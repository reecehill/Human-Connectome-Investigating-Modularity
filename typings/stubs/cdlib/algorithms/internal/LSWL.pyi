"""
This type stub file was generated by pyright.
"""

class LSWLCommunityDiscovery:
    minimum_improvement = ...
    def __init__(self, graph, strength_type, timeout) -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def remove_self_loops(self): # -> None:
        ...
    
    def set_start_node(self, start_node): # -> None:
        ...
    
    def update_sets_when_node_joins(self, node): # -> None:
        ...
    
    def update_shell_when_node_joins(self, new_node): # -> None:
        ...
    
    def update_dicts_of_common_neighbors_info(self, node): # -> None:
        ...
    
    def assign_local_strength(self, node): # -> None:
        ...
    
    def find_best_next_node(self, improvements): # -> tuple[Any | None, float | Any]:
        ...
    
    def merge_dangling_nodes(self): # -> None:
        ...
    
    def amend_small_communities(self): # -> None:
        ...
    
    def community_search(self, start_node, amend=...): # -> list[Any]:
        ...
    


class LSWLCommunityDiscovery_offline:
    minimum_improvement = ...
    def __init__(self, graph, strength_type, timeout) -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def remove_self_loops(self): # -> None:
        ...
    
    def set_start_node(self, start_node): # -> None:
        ...
    
    def update_sets_when_node_joins(self, node): # -> None:
        ...
    
    def update_shell_when_node_joins(self, new_node): # -> None:
        ...
    
    def update_dicts_of_common_neighbors_info(self, node): # -> None:
        ...
    
    def assign_local_strength(self, node): # -> None:
        ...
    
    def find_best_next_node(self, improvements): # -> tuple[Any | None, float | Any]:
        ...
    
    def merge_dangling_nodes(self): # -> None:
        ...
    
    def amend_small_communities(self): # -> None:
        ...
    
    def community_search(self, start_node, amend=...): # -> list[Any]:
        ...
    


class LSWLPlusCommunityDetection:
    minimum_improvement = ...
    def __init__(self, graph, strength_type, merge_outliers, detect_overlap, nodes_to_ignore=...) -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def remove_self_loops(self): # -> None:
        ...
    
    def set_start_node(self, start_node): # -> None:
        ...
    
    def update_sets_when_node_joins(self, node): # -> None:
        ...
    
    def update_shell_when_node_joins(self, new_node): # -> None:
        ...
    
    def update_dicts_of_common_neighbors_info(self, node): # -> None:
        ...
    
    def assign_local_strength(self, node): # -> None:
        ...
    
    def find_best_next_node(self, improvements): # -> tuple[Any | None, float | Any]:
        ...
    
    def merge_dangling_nodes(self): # -> None:
        ...
    
    def find_community(self, start_node=...): # -> None:
        ...
    
    def community_detection(self): # -> list[Any]:
        ...
    
    def amend_partition(self): # -> None:
        ...
    
    def amend_partition_helper2(self, community, strength_dict): # -> None:
        ...
    
    def amend_partition_helper(self, communities): # -> None:
        ...
    



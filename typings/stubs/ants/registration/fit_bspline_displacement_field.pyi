"""
This type stub file was generated by pyright.
"""

__all__ = ["fit_bspline_displacement_field"]
def fit_bspline_displacement_field(displacement_field=..., displacement_weight_image=..., displacement_origins=..., displacements=..., displacement_weights=..., origin=..., spacing=..., size=..., direction=..., number_of_fitting_levels=..., mesh_size=..., spline_order=..., enforce_stationary_boundary=..., estimate_inverse=..., rasterize_points=...):
    """
    Fit a b-spline object to a dense displacement field image and/or a set of points
    with associated displacements and smooths them using B-splines.  The inverse
    can also be estimated..  This is basically a wrapper for the ITK filter

    https://itk.org/Doxygen/html/classitk_1_1DisplacementFieldToBSplineImageFilter.html}

    which, in turn is a wrapper for the ITK filter used for the function
    fit_bspline_object_to_scattered_data.

    ANTsR function: `fitBsplineToDisplacementField`

    Arguments
    ---------
    displacement_field : ANTs image
        Input displacement field.  Either this and/or the points must be specified.

    displacement_weight_image : ANTs image
        Input image defining weighting of the voxelwise displacements in the displacement_field.  I
        If None, defaults to identity weighting for each displacement.  Default = None.

    displacement_origins : 2-D numpy array
        Matrix (number_of_points x dimension) defining the origins of the input
        displacement points.  Default = None.

    displacements : 2-D numpy array
        Matrix (number_of_points x dimension) defining the displacements of the input
        displacement points.  Default = None.

    displacement_weights : 1-D numpy array
        Array defining the individual weighting of the corresponding scattered data value.
        Default = None meaning all values are weighted the same.

    origin : n-D tuple
        Defines the physical origin of the B-spline object.

    spacing : n-D tuple
        Defines the physical spacing of the B-spline object.

    size : n-D tuple
       Defines the size (length) of the B-spline object.  Note that the length of the
       B-spline object in dimension d is defined as
       spacing[d] * size[d]-1.

    direction : 2-D numpy array
       Booleans defining whether or not the corresponding parametric dimension is
       closed (e.g., closed loop).  Default = None.

    number_of_fitting_levels : integer
       Specifies the number of fitting levels.

    mesh_size : n-D tuple
       Defines the mesh size at the initial fitting level.

    spline_order : integer
       Spline order of the B-spline object.  Default = 3.

    enforce_stationary_boundary : boolean
       Ensure no displacements on the image boundary.  Default = True.

    estimate_inverse : boolean
       Estimate the inverse displacement field.  Default = False.

    rasterize_points : boolean
       Use nearest neighbor rasterization of points for estimating the
       field (potential speed-up).  Default = False.

    Returns
    -------
    Returns an ANTsImage.

    Example
    -------
    >>> import ants
    >>> import numpy as np
    >>> points = np.array([[-50, -50]])
    >>> deltas = np.array([[10, 10]])
    >>> bspline_field = ants.fit_bspline_displacement_field(
    >>>   displacement_origins=points, displacements=deltas,
    >>>   origin=[0.0, 0.0], spacing=[1.0, 1.0], size=[100, 100],
    >>>   direction=np.array([[-1, 0], [0, -1]]),
    >>>   number_of_fitting_levels=4, mesh_size=(1, 1))
    """
    ...


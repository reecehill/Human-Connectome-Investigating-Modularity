"""
This type stub file was generated by pyright.
"""

import atexit
import os
import random
import colorama
from .config import ConfigManager, warn_on_undefined_git_identity
from datalad.utils import get_encoding_info, get_envvars_info, getpwd
from .log import lgr
from .support.sshconnector import SSHManager
from ._version import get_versions

"""DataLad aims to expose (scientific) data available online as a unified data
distribution with the convenience of git-annex repositories as a backend.

Commands are exposed through both a command-line interface and a Python API. On
the command line, run 'datalad --help' for a summary of the available commands.
From an interactive Python session, import `datalad.api` and inspect its
documentation with `help`.
"""
if not __debug__:
    ...
__api = ...
def get_apimode(): # -> str:
    """Returns the API mode label for the current session.

    The API mode label indicates whether DataLad is running in "normal"
    mode in a Python session, or whether it is used via the command line
    interface.

    This function is a utility for optimizing behavior and messaging to the
    particular API (Python vs command line) in use in a given process.

    Returns
    {'python', 'cmdline'}
      The API mode is 'python' by default, unless the main command line
      entrypoint set it to 'cmdline'.
    """
    ...

def in_librarymode(): # -> bool:
    """Returns whether DataLad is requested to run in "library mode"

    In this mode DataLad aims to behave without the assumption that it is
    itself the front-end of a process and in full control over messaging
    and parameters.

    Returns
    -------
    bool
    """
    ...

def enable_librarymode(): # -> None:
    """Request DataLad to operate in library mode.

    This function should be executed immediately after importing the `datalad`
    package, when DataLad is not used as an application, or in interactive
    scenarios, but as a utility library inside other applications. Enabling
    this mode will turn off some convenience feature that are irrelevant in
    such use cases (with performance benefits), and alters it messaging
    behavior to better interoperate with 3rd-party front-ends.

    Library mode can only be enabled once. Switching it on and off within
    the runtime of a process is not supported.

    Example::

        >>> import datalad
        >>> datalad.enable_librarymode()
    """
    ...

_seed = ...
if _seed is not None:
    _seed = ...
cfg = ...
__runtime_mode = ...
def setup_package():
    ...

def teardown_package():
    ...

ssh_manager = ...
__version__ = ...
if str(__version__) == '0' or __version__.startswith('0+'):
    ...

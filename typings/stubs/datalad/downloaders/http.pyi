"""
This type stub file was generated by pyright.
"""

import requests
import requests.auth
from ..utils import auto_repr
from ..dochelpers import borrowkwargs
from .base import Authenticator, BaseDownloader, DownloaderSession

"""Provide access to stuff (html, data files) via HTTP and HTTPS

"""
lgr = ...
DEFAULT_USER_AGENT = ...
_FTP_SUPPORT = ...
if lgr.getEffectiveLevel() <= 1:
    requests_log = ...
__docformat__ = ...
def process_www_authenticate(v): # -> list[Any] | list[str]:
    ...

def check_response_status(response, err_prefix=..., session=...): # -> None:
    """Check if response's status_code signals problem with authentication etc

    ATM succeeds only if response code was 200
    """
    ...

@auto_repr
class HTTPBaseAuthenticator(Authenticator):
    """Base class for html_form and http_auth authenticators
    """
    def __init__(self, url=..., failure_re=..., success_re=..., session_cookies=..., **kwargs) -> None:
        """
        Parameters
        ----------
        url : str, optional
          URL where to find the form/login to authenticate.  If not provided, an original query url
          which will be provided to the __call__ of the authenticator will be used
        failure_re : str or list of str, optional
        success_re : str or list of str, optional
          Regular expressions to determine if login has failed or succeeded.
          TODO: we might condition when it gets ran
        session_cookies : str or list of str, optional
          Session cookies to store (besides auth response cookies)
        """
        ...
    
    def authenticate(self, url, credential, session, update=...): # -> None:
        ...
    
    def check_for_auth_failure(self, content, err_prefix=...): # -> None:
        ...
    


@auto_repr
class HTMLFormAuthenticator(HTTPBaseAuthenticator):
    """Authenticate by opening a session via POSTing to HTML form
    """
    def __init__(self, fields, tagid=..., **kwargs) -> None:
        """

        Example specification in the .ini config file
        [provider:crcns]
        ...
        credential = crcns ; is not given to authenticator as is
        authentication_type = html_form
        # TODO: may be rename into post_url
        html_form_url = https://crcns.org/login_form
        # probably not needed actually since form_url
        # html_form_tagid = login_form
        html_form_fields = __ac_name={user}
                   __ac_password={password}
                   submit=Log in
                   form.submitted=1
                   js_enabled=0
                   cookies_enabled=
        html_form_failure_re = (Login failed|Please log in)
        html_form_success_re = You are now logged in

        Parameters
        ----------
        fields : str or dict
          String or a dictionary, which will be used (along with credential) information
          to feed into the form
        tagid : str, optional
          id of the HTML <form> in the document to use. If None, and page contains a single form,
          that one will be used.  If multiple forms -- error will be raise
        **kwargs : dict, optional
          Passed to super class HTTPBaseAuthenticator
        """
        ...
    


@auto_repr
class HTTPRequestsAuthenticator(HTTPBaseAuthenticator):
    """Base class for various authenticators using requests pre-crafted ones


    Note, that current implementation assumes REQUESTS_FIELDS to be identical to
    the keys of a `Credential` object's FIELDS.
    """
    REQUESTS_AUTHENTICATOR = ...
    REQUESTS_FIELDS = ...
    def __init__(self, **kwargs) -> None:
        ...
    


@auto_repr
class HTTPBasicAuthAuthenticator(HTTPRequestsAuthenticator):
    """Authenticate via basic HTTP authentication

    Example specification in the .ini config file
    [provider:hcp-db]
    ...
    credential = hcp-db
    authentication_type = http_auth

    Parameters
    ----------
    **kwargs : dict, optional
      Passed to super class HTTPBaseAuthenticator
    """
    REQUESTS_AUTHENTICATOR = requests.auth.HTTPBasicAuth


@auto_repr
class HTTPAuthAuthenticator(HTTPRequestsAuthenticator):
    """Authenticate via Basic authentication to some other post url

    TODO:  actually this is some remnants which might later were RFed
    into the form authenticator since otherwise they make little sense
    """
    REQUESTS_AUTHENTICATOR = requests.auth.HTTPBasicAuth


@auto_repr
class HTTPDigestAuthAuthenticator(HTTPRequestsAuthenticator):
    """Authenticate via HTTP digest authentication
    """
    REQUESTS_AUTHENTICATOR = requests.auth.HTTPDigestAuth


@auto_repr
class HTTPBearerTokenAuthenticator(HTTPRequestsAuthenticator):
    """Authenticate via HTTP 'Authorization: Bearer TOKEN' header

    E.g. as defined for OAuth2 in RFC 6750
    https://datatracker.ietf.org/doc/html/rfc6750
    """
    DEFAULT_CREDENTIAL_TYPE = ...
    AUTH_KEYWORD = ...
    def __init__(self, **kwargs) -> None:
        ...
    


class HTTPTokenAuthenticator(HTTPBearerTokenAuthenticator):
    """Authenticate via HTTP 'Authorization: Token TOKEN' header

    It is pretty much the "Bearer TOKEN" method but which uses different keyword
    "Token".  It is e.g. the one provided by Django REST Framework.
    GitHub allows for both 'Bearer' and 'Token' keywords:
    https://docs.github.com/en/rest/authentication/authenticating-to-the-rest-api?apiVersion=2022-11-28
    """
    AUTH_KEYWORD = ...


@auto_repr
class HTTPAnonBearerTokenAuthenticator(HTTPBearerTokenAuthenticator):
    """Retrieve token via 401 response and add Authorization: Bearer header.
    """
    allows_anonymous = ...
    def authenticate(self, url, credential, session, update=...): # -> None:
        ...
    


@auto_repr
class HTTPDownloaderSession(DownloaderSession):
    def __init__(self, size=..., filename=..., url=..., headers=..., response=..., chunk_size=...) -> None:
        ...
    
    def download(self, f=..., pbar=..., size=...): # -> bytes | None:
        ...
    


@auto_repr
class HTTPDownloader(BaseDownloader):
    """A stateful downloader to maintain a session to the website
    """
    @borrowkwargs(BaseDownloader)
    def __init__(self, headers=..., **kwargs) -> None:
        """

        Parameters
        ----------
        headers: dict, optional
          Header fields to be provided to the session. Unless User-Agent provided, a custom
          one, available in `DEFAULT_USER_AGENT` constant of this module will be used.
        """
        ...
    
    def get_downloader_session(self, url, allow_redirects=..., use_redirected_url=..., headers=...): # -> HTTPDownloaderSession:
        ...
    
    @classmethod
    def get_status_from_headers(cls, headers): # -> FileStatus:
        """Given HTTP headers, return 'status' record to assess later if link content was changed
        """
        ...
    



"""
This type stub file was generated by pyright.
"""

from typing import Tuple, Union

__all__ = ["_normalized_shannon_entropy", "facet_unicity", "facet_identity", "facet_outflow", "facet_metadata", "purity", "event_typicality", "stability"]
def facet_unicity(labels: list) -> float:
    """
    the unicity facet quantifies the extent to which a target set comes from one (=1) or multiple (->0) flows.
    It is computed as the difference between the largest and the second largest group size
    If the target set is composed of a single group, the unicity facet is 1

    :param labels: the list of group labels
    :return: the unicity facet
    """
    ...

def facet_identity(target: set, reference: list) -> float:
    """
    the identity facet quantifies how much the identity of the target set is shared with the reference groups.


    :param target: the target set
    :param reference: the reference sets
    :return: the contribution factor
    """
    ...

def facet_outflow(target: set, reference: list) -> float:
    """
    the outflow facet is the ratio of the number of elements
    in the target set that are not in any of the reference sets

    :param target: the target set
    :param reference: the reference sets
    :return: the difference factor
    """
    ...

def facet_metadata(target_labels: list, reference_labels: list, base: int = ...) -> Union[float, None]:
    """
    compute the change in attribute entropy between a target set and a reference set

    :param target_labels: the labels of the target set
    :param reference_labels: the labels of the reference sets (a list of lists)
    :param base: the base of the logarithm
    :return: the change in attribute entropy
    """
    ...

def stability(lc: object, direction: str) -> float:
    """
    compute the temporal partition stability.
    The stability is the average of the continue events scores.

    :param lc: the lifecycle object
    :param direction: the temporal direction
    :return: the stability score

    """
    ...

def purity(labels: list) -> Tuple[str, float]:
    """
    compute the purity of a set of labels. Purity is defined as the relative frequency
    of the most frequent attribute value

    :param labels: the list of labels
    :return: a tuple of the most frequent attribute value and its frequency
    """
    ...

def event_typicality(event_scores: dict) -> Tuple[str, float]:
    """
    compute the event's name and its typicality score.
    The typicality score is the highest score among all events scores.

    :param event_scores: a dictionary keyed by event name and valued by the event score
    :return: a tuple of the event name and its typicality score

    """
    ...


"""
This type stub file was generated by pyright.
"""

"""
    High-level access to HDF5 dataspace selections
"""
def select(shape, args, dataset=...): # -> Selection | PointSelection:
    """ High-level routine to generate a selection from arbitrary arguments
    to __getitem__.  The arguments should be the following:

    shape
        Shape of the "source" dataspace.

    args
        Either a single argument or a tuple of arguments.  See below for
        supported classes of argument.

    dataset
        A h5py.Dataset instance representing the source dataset.

    Argument classes:

    Single Selection instance
        Returns the argument.

    numpy.ndarray
        Must be a boolean mask.  Returns a PointSelection instance.

    RegionReference
        Returns a Selection instance.

    Indices, slices, ellipses, MultiBlockSlices only
        Returns a SimpleSelection instance

    Indices, slices, ellipses, lists or boolean index arrays
        Returns a FancySelection instance.
    """
    ...

class Selection:
    """
        Base class for HDF5 dataspace selections.  Subclasses support the
        "selection protocol", which means they have at least the following
        members:

        __init__(shape)   => Create a new selection on "shape"-tuple
        __getitem__(args) => Perform a selection with the range specified.
                             What args are allowed depends on the
                             particular subclass in use.

        id (read-only) =>      h5py.h5s.SpaceID instance
        shape (read-only) =>   The shape of the dataspace.
        mshape  (read-only) => The shape of the selection region.
                               Not guaranteed to fit within "shape", although
                               the total number of points is less than
                               product(shape).
        nselect (read-only) => Number of selected points.  Always equal to
                               product(mshape).

        broadcast(target_shape) => Return an iterable which yields dataspaces
                                   for read, based on target_shape.

        The base class represents "unshaped" selections (1-D).
    """
    def __init__(self, shape, spaceid=...) -> None:
        """ Create a selection.  Shape may be None if spaceid is given. """
        ...
    
    @property
    def id(self):
        """ SpaceID instance """
        ...
    
    @property
    def shape(self): # -> tuple[Any, ...]:
        """ Shape of whole dataspace """
        ...
    
    @property
    def nselect(self):
        """ Number of elements currently selected """
        ...
    
    @property
    def mshape(self): # -> tuple[Any]:
        """ Shape of selection (always 1-D for this class) """
        ...
    
    @property
    def array_shape(self): # -> tuple[Any]:
        """Shape of array to read/write (always 1-D for this class)"""
        ...
    
    def expand_shape(self, source_shape):
        ...
    
    def broadcast(self, source_shape): # -> Generator[Any, Any, None]:
        """ Get an iterable for broadcasting """
        ...
    
    def __getitem__(self, args):
        ...
    


class PointSelection(Selection):
    """
        Represents a point-wise selection.  You can supply sequences of
        points to the three methods append(), prepend() and set(), or
        instantiate it with a single boolean array using from_mask().
    """
    def __init__(self, shape, spaceid=..., points=...) -> None:
        ...
    
    @classmethod
    def from_mask(cls, mask, spaceid=...): # -> Self:
        """Create a point-wise selection from a NumPy boolean array """
        ...
    
    def append(self, points): # -> None:
        """ Add the sequence of points to the end of the current selection """
        ...
    
    def prepend(self, points): # -> None:
        """ Add the sequence of points to the beginning of the current selection """
        ...
    
    def set(self, points): # -> None:
        """ Replace the current selection with the given sequence of points"""
        ...
    


class SimpleSelection(Selection):
    """ A single "rectangular" (regular) selection composed of only slices
        and integer arguments.  Can participate in broadcasting.
    """
    @property
    def mshape(self): # -> tuple[Any, ...]:
        """ Shape of current selection """
        ...
    
    @property
    def array_shape(self): # -> tuple[Any, ...]:
        ...
    
    def __init__(self, shape, spaceid=..., hyperslab=...) -> None:
        ...
    
    def expand_shape(self, source_shape): # -> tuple[Any, ...]:
        """Match the dimensions of an array to be broadcast to the selection

        The returned shape describes an array of the same size as the input
        shape, but its dimensions

        E.g. with a dataset shape (10, 5, 4, 2), writing like this::

            ds[..., 0] = np.ones((5, 4))

        The source shape (5, 4) will expand to (1, 5, 4, 1).
        Then the broadcast method below repeats that chunk 10
        times to write to an effective shape of (10, 5, 4, 1).
        """
        ...
    
    def broadcast(self, source_shape): # -> Generator[Any, Any, None]:
        """ Return an iterator over target dataspaces for broadcasting.

        Follows the standard NumPy broadcasting rules against the current
        selection shape (self.mshape).
        """
        ...
    


class FancySelection(Selection):
    """
        Implements advanced NumPy-style selection operations in addition to
        the standard slice-and-int behavior.

        Indexing arguments may be ints, slices, lists of indices, or
        per-axis (1D) boolean arrays.

        Broadcasting is not supported for these selections.
    """
    @property
    def mshape(self): # -> tuple[Any, ...]:
        ...
    
    @property
    def array_shape(self): # -> tuple[Any, ...]:
        ...
    
    def __init__(self, shape, spaceid=..., mshape=..., array_shape=...) -> None:
        ...
    
    def expand_shape(self, source_shape):
        ...
    
    def broadcast(self, source_shape): # -> Generator[Any, Any, None]:
        ...
    


def guess_shape(sid): # -> tuple[Any, ...] | tuple[Literal[0], ...] | tuple[Any] | tuple[Any | int, ...] | None:
    """ Given a dataspace, try to deduce the shape of the selection.

    Returns one of:
        * A tuple with the selection shape, same length as the dataspace
        * A 1D selection shape for point-based and multiple-hyperslab selections
        * None, for unselected scalars and for NULL dataspaces
    """
    ...


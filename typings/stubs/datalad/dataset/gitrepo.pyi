"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import Optional
from datalad.dataset.repo import PathBasedFlyweight, RepoInterface, path_based_str_repr

"""Core interface to Git repositories

At the moment the GitRepo class provided here is not meant to be used
directly, but is primarily a vehicle for a slow refactoring process.

While is could be used directly in some cases, note that the singleton
handling implemented here will not allow switching between this
implementation and the old-standard from datalad.support.gitrepo for the
lifetime of a singleton.
"""
__all__ = ['GitRepo']
lgr = ...
preferred_encoding = ...
@contextmanager
def git_ignore_check(expect_fail, stdout_buffer, stderr_buffer): # -> Generator[None, Any, None]:
    ...

@path_based_str_repr
class GitRepo(RepoInterface, metaclass=PathBasedFlyweight):
    """Representation of a Git repository

    """
    _GIT_COMMON_OPTIONS = ...
    _git_cmd_prefix = ...
    _unique_instances = ...
    def __hash__(self) -> int:
        ...
    
    def __init__(self, path) -> None:
        ...
    
    def __eq__(self, obj) -> bool:
        """Decides whether or not two instances of this class are equal.

        This is done by comparing the base repository path.
        """
        ...
    
    def is_valid(self_or_path): # -> bool:
        """Returns whether the underlying repository appears to be still valid

        This method can be used as an instance method or a class method.
        """
        ...
    
    @property
    def cfg(self): # -> ConfigManager:
        """Get a ConfigManager instance for this repository

        Returns
        -------
        ConfigManager
        """
        ...
    
    def add_fake_dates_to_env(self, env=...): # -> dict[str, str]:
        """Add fake dates to `env`.

        Parameters
        ----------
        env : dict, optional
            Environment variables.

        Returns
        -------
        A dict (copied from env), with date-related environment
        variables for git and git-annex set.
        """
        ...
    
    def call_git(self, args, files=..., expect_stderr=..., expect_fail=..., env=..., pathspec_from_file: Optional[bool] = ..., read_only=...): # -> str:
        """Call git and return standard output.

        Parameters
        ----------
        args : list of str
          Arguments to pass to `git`.
        files : list of str, optional
          File arguments to pass to `git`. The advantage of passing these here
          rather than as part of `args` is that the call will be split into
          multiple calls to avoid exceeding the maximum command line length.
        expect_stderr : bool, optional
          Standard error is expected and should not be elevated above the DEBUG
          level.
        expect_fail : bool, optional
          A non-zero exit is expected and should not be elevated above the
          DEBUG level.
        pathspec_from_file : bool, optional
          Could be set to True for a `git` command which supports
          --pathspec-from-file and --pathspec-file-nul options. Then pathspecs
          would be passed through a temporary file.
        read_only : bool, optional
          By setting this to True, the caller indicates that the command does
          not write to the repository, which lets this function skip some
          operations that are necessary only for commands the modify the
          repository. Beware that even commands that are conceptually
          read-only, such as `git-status` and `git-diff`, may refresh and write
          the index.

        Returns
        -------
        standard output (str)

        Raises
        ------
        CommandError if the call exits with a non-zero status.
        """
        ...
    
    def call_git_items_(self, args, files=..., expect_stderr=..., expect_fail=..., env=..., pathspec_from_file: Optional[bool] = ..., read_only=..., sep=..., keep_ends=...): # -> Generator[str, Any, None]:
        """
        Call git, yield output lines when available. Output lines are split
        at line ends or `sep` if `sep` is not None.

        Parameters
        ----------
        sep : str, optional
          Use sep as line separator. Does not create an empty last line if
          the input ends on sep.

        All other parameters match those described for `call_git`.

        Returns
        -------
        Generator that yields stdout items, i.e. lines with the line ending or
        separator removed.

        Please note, this method is meant to be used to process output that is
        meant for 'interactive' interpretation. It is not intended to return
        stdout from a command like "git cat-file". The reason is that
        it strips of the line endings (or separator) from the result lines,
        unless 'keep_ends' is True. If 'keep_ends' is False, you will not know
        which line ending was stripped (if 'separator' is None) or whether a
        line ending (or separator) was stripped at all, because the last line
        may not have a line ending (or separator).

        If you want to reliably recreate the output set 'keep_ends' to True and
        "".join() the result, or use 'GitRepo.call_git()' instead.

        Raises
        ------
        CommandError if the call exits with a non-zero status.
        """
        ...
    
    def call_git_oneline(self, args, files=..., expect_stderr=..., pathspec_from_file: Optional[bool] = ..., read_only=...): # -> str:
        """Call git for a single line of output.

        All other parameters match those described for `call_git`.

        Raises
        ------
        CommandError if the call exits with a non-zero status.
        AssertionError if there is more than one line of output.
        """
        ...
    
    def call_git_success(self, args, files=..., expect_stderr=..., pathspec_from_file: Optional[bool] = ..., read_only=...): # -> bool:
        """Call git and return true if the call exit code of 0.

        All parameters match those described for `call_git`.

        Returns
        -------
        bool
        """
        ...
    
    def init(self, sanity_checks=..., init_options=...): # -> Self:
        """Initializes the Git repository.

        Parameters
        ----------
        create_sanity_checks: bool, optional
          Whether to perform sanity checks during initialization if the target
          path already exists, such as that new repository is not created in
          the directory where git already tracks some files.
        init_options: list, optional
          Additional options to be appended to the `git-init` call.
        """
        ...
    
    def for_each_ref_(self, fields=..., pattern=..., points_at=..., sort=..., count=..., contains=...): # -> Generator[dict[Any, str], Any, None]:
        """Wrapper for `git for-each-ref`

        Please see manual page git-for-each-ref(1) for a complete overview
        of its functionality. Only a subset of it is supported by this
        wrapper.

        Parameters
        ----------
        fields : iterable or str
          Used to compose a NULL-delimited specification for for-each-ref's
          --format option. The default field list reflects the standard
          behavior of for-each-ref when the --format option is not given.
        pattern : list or str, optional
          If provided, report only refs that match at least one of the given
          patterns.
        points_at : str, optional
          Only list refs which points at the given object.
        sort : list or str, optional
          Field name(s) to sort-by. If multiple fields are given, the last one
          becomes the primary key. Prefix any field name with '-' to sort in
          descending order.
        count : int, optional
          Stop iteration after the given number of matches.
        contains : str, optional
          Only list refs which contain the specified commit.

        Yields
        ------
        dict with items matching the given `fields`

        Raises
        ------
        ValueError
          if no `fields` are given

        RuntimeError
          if `git for-each-ref` returns a record where the number of
          properties does not match the number of `fields`
        """
        ...
    



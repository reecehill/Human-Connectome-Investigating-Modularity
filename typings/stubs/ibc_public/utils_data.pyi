"""
This type stub file was generated by pyright.
"""

import os

"""
Common utilities to all scripts

Author: Bertrand Thirion, Ana Luisa Pinho 2016-2020

Compatibility: Python 3.5

"""
main_parent_dir = ...
alt_parent_dir = ...
if os.path.exists(main_parent_dir):
    ibc = ...
else:
    ibc = ...
DERIVATIVES = ...
SMOOTH_DERIVATIVES = ...
THREE_MM = ...
SUBJECTS = ...
_package_directory = ...
CONDITIONS = ...
CONTRASTS = ...
ALL_CONTRASTS = ...
LABELS = ...
BETTER_NAMES = ...
all_contrasts = ...
def get_subject_session(protocols): # -> list[Unknown]:
    """
    Utility to get all (subject, session) for a given protocol or set
    of protocols

    Parameters
    ----------
    protocols: string or list,
               name(s) of the protocols the user wants to retrieve

    Returns
    -------
    subject_session: list of tuples
                     Each element correspondes to a (subject, session) pair
                     for the requested protocols
    """
    ...

def data_parser(derivatives=..., conditions=..., subject_list=..., task_list=..., verbose=..., acquisition=...):
    """Generate a dataframe that contains all the data corresponding
    to the archi, hcp and rsvp_language acquisitions

    Parameters
    ----------
    derivatives: string, optional
        path toward a valid BIDS derivatives directory

    conditions: pandas DataFrame, optional,
        dataframe describing the conditions under considerations

    subject_list: list, optional,
        list of subjects to be included in the analysis

    task_list: list_optional,
        list of tasks to be returned

    verbose: Bool, optional,
             verbosity mode

    acquisition={'all', 'ap', 'pa', 'ffx'}, default='all'
        which acquisition to select

    Returns
    -------
    db: pandas DataFrame,
        "database" yielding informations (path,
        subject, modality, contrast, session, task, acquisition)
        on the images under consideration
    """
    ...

def average_anat(db):
    """ return the average anatomical image """
    ...

def gm_mask(db, ref_affine, ref_shape, threshold=...): # -> tuple[Unknown, Nifti1Image]:
    """ Utility to create a gm mask by averaging glm images from the db """
    ...

def resample_images(paths, ref_affine, ref_shape): # -> FileBasedImage:
    """ Utility to resample images provided as paths and return an image"""
    ...

def summarize_db(df, plot=...): # -> DataFrame:
    ...

def horizontal_fingerprint(coef, roi_name, labels_bottom, labels_top, output_file, wc=..., nonneg=..., dpi=...): # -> None:
    """Create a fingerprint figure, optionally with a word cloud"""
    ...

def copy_db(df, write_dir, filename=...):
    """Create a copy of all the files to create a portable database."""
    ...

def make_surf_db(derivatives=..., conditions=..., subject_list=..., task_list=..., mesh=..., acquisition=...): # -> DataFrame:
    """ Create a database for surface data (gifti files)

    derivatives: string,
              directory where the studd will be found

    conditions: Bool, optional,
                Whether to map conditions or contrastsderivatives: string, optional
        path toward a valid BIDS derivatives directory

    conditions: pandas DataFrame, optional,
        dataframe describing the conditions under considerations

    subject_list: list, optional,
        list of subjects to be included in the analysis

    task_list: list_optional,
        list of tasks to be returned

    mesh: string, optional,
          should be one of ["fsaverage5", "fsaverage7", "individual"],
          default behaviour will be that of "fsaverage5" if no value
          or incorrect value is given

    acquisition: one of ['ffx', 'ap', 'pa', 'all'], defaults to 'ffx'
          the acquisition to be picked.

    Returns
    -------
    db: pandas DataFrame,
        "database" yielding informations (path,
        subject, modality, contrast, session, task, acquisition, hemisphere)
        on the gifti files under consideration
    """
    ...


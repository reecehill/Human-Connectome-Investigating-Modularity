function mapFmriToHighResSurf(pathToFile, subjectId, downsample, type, fMriFolder, fMriScalarFile, fMriSurf_L, fMriSurf_R)
% HCP Dataset has fMRI data in 32k nodes per hemisphere only. This function
% therefore maps the 32k node data to the higher-res surface.
% No interpolation is performed, so this is suitable with module numbers/labels only.

close all;
restoredefaultpath;
gcp;
addpath('toolboxes/AlongTractStats');
addpath(genpath('toolboxes/SurfStat'));
addpath('toolboxes/FieldTrip');
ft_defaults;
ft_hastoolbox('gifti',1);
ft_hastoolbox('iso2mesh',1);
ft_hastoolbox('freesurfer',1);
disp('Mapping fMRI (32k) to high-res surface')
disp(['Type: ' num2str(type) ' (' class(type) ')'])

disp('loading labelSRF.mat');
fileToLoad=[pathToFile,'/',subjectId,'/labelSRF.mat'];

if strcmp(downsample,'yes')
    load(fileToLoad, "nfl","nfr","nvl","nvr"); % not used: "faceROIidL", "faceROIidR", "filenames", "subROIid", "subfilenames"
    structuralFaces_L = nfl;
    structuralFaces_R = nfr;
    structuralNodes_L = nvl;
    structuralNodes_R = nvr;
elseif strcmp(downsample,'no')
    load(fileToLoad, "glpfaces","grpfaces","glpvertex","grpvertex"); % not used: "faceROIidL", "faceROIidR", "filenames", "subROIid", "subfilenames"
    structuralFaces_L = glpfaces;
    structuralFaces_R = grpfaces;
    structuralNodes_L = glpvertex;
    structuralNodes_R = grpvertex;
end

surf_32k_L = gifti(fMriSurf_L);
surf_32k_R = gifti(fMriSurf_R);
fMriValues = ft_read_cifti(fMriScalarFile, 'readdata',true,'mapname','array','cortexleft',fMriSurf_L,'cortexright',fMriSurf_R);

fMriValues_L = fMriValues.dscalar(fMriValues.brainstructure==1,:);
fMriValues_R = fMriValues.dscalar(fMriValues.brainstructure==2,:);

%% Loop through each NODE on high-res mesh to find closest NODE on downsampled mesh. Maps fMRIs value up.
[hi_fMriValues_L] = loopNodesProjectFromLoToHiRes(surf_32k_L.vertices,structuralNodes_L,fMriValues_L);
[hi_fMriValues_R] = loopNodesProjectFromLoToHiRes(surf_32k_R.vertices,structuralNodes_R,fMriValues_R);

%% Store surface as new gifti
hi_surf_L = surf_32k_L;
hi_surf_L.faces = structuralFaces_L;
hi_surf_L.vertices = structuralNodes_L;
hi_surf_R = surf_32k_R;
hi_surf_R.faces = structuralFaces_R;
hi_surf_R.vertices = structuralNodes_R;
save(hi_surf_L, [fMriFolder,'/HiResAutoGenerated/L.surf.gii']);
save(hi_surf_R, [fMriFolder,'/HiResAutoGenerated/R.surf.gii']);


%% Store as new cifti
hi_fMriValues = fMriValues;
hi_fMriValues.dimord = 'pos'; %switch to struct without mapnames
hi_fMriValues = rmfield(hi_fMriValues, "mapname");
hi_fMriValues.pos=[structuralNodes_L; structuralNodes_R];
hi_fMriValues.tri=[structuralFaces_L; structuralFaces_R];
for fMriBlockIndex = 1:length(fMriValues.mapname)
    hi_fMriValues.dscalar  = [hi_fMriValues_L(:,fMriBlockIndex); hi_fMriValues_R(:,fMriBlockIndex)];
    hi_fMriValues.brainstructure = ones(size(hi_fMriValues.dscalar,1),1);
    hi_fMriValues.brainstructure(length(hi_fMriValues_L)+1:end)=2;
    hi_fMriValues.brainstructurelabel = hi_fMriValues.brainstructurelabel(1,1:2);
    ft_write_cifti(strjoin([fMriFolder,'/HiResAutoGenerated/',fMriValues.mapname(fMriBlockIndex)],''), hi_fMriValues, 'parameter', 'dscalar','writesurface',false);
end


%TODO: Sort fMRI into modules, THEN upsample to high res.
currentFolder = pwd;
cd(fMriFolder);
system(['wb_command -cifti-find-clusters ',fMriFolder,'/100610_tfMRI_MOTOR_level2_hp200_s2_MSMAll.dscalar.nii 0.5 -inf inf inf COLUMN ',fMriFolder,'/HiResAutoGenerated/results.dscalar.nii -left-surface ',fMriFolder,'/../../../fsaverage_LR59k/100610.L.pial_1.6mm_MSMAll.59k_fs_LR.surf.gii.automated.surf.gii -right-surface ',fMriFolder,'/../../../fsaverage_LR59k/100610.R.pial_1.6mm_MSMAll.59k_fs_LR.surf.gii.automated.surf.gii -distance 100 -inf "'])

!wb_command -cifti-find-clusters ./100610_tfMRI_MOTOR_level2_hp200_s2_MSMAll.dscalar.nii 0.5 -inf inf inf COLUMN HiResAutoGenerated/results.dscalar.nii -left-surface ../../../fsaverage_LR59k/100610.L.pial_1.6mm_MSMAll.59k_fs_LR.surf.gii.automated.surf.gii -right-surface ../../../fsaverage_LR59k/100610.R.pial_1.6mm_MSMAll.59k_fs_LR.surf.gii.automated.surf.gii -distance 100 -inf
%! wb_command -cifti-find-clusters ../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/100610_tfMRI_MOTOR_level2_RF-AVG_hp200_s2_MSMAll.dscalar.nii 3.0 -inf inf inf COLUMN ../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/results_lowres.dscalar.nii -left-surface ../../data/subjects/100610/MNINonLinear/fsaverage_LR32k/100610.L.pial.32k_fs_LR.surf.gii -right-surface ../../data/subjects/100610/MNINonLinear/fsaverage_LR32k/100610.R.pial.32k_fs_LR.surf.gii
cd(currentFolder);

close all;
hi_binarised_fMRI = ft_read_cifti('../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/results.dscalar.nii');
disp(max(hi_binarised_fMRI.dscalar));


%% Plot high-res fMRI
figure;
hold on;
plotsurf(glpvertex, glpfaces, hi_binarised_fMRI.dscalar(hi_binarised_fMRI.brainstructure==1)+1);
plotsurf(grpvertex, grpfaces, hi_binarised_fMRI.dscalar(hi_binarised_fMRI.brainstructure==2)+1);
lighting gouraud;

% fMriValues_L(fMriValues_L > 1) = 1;
% fMriValues_L(fMriValues_L <= 1) = 0;
hi_res_fmri = hi_fMriValues_L(:,1);
hi_res_fmri(hi_res_fmri > 1) = 10;
hi_res_fmri(hi_res_fmri ~= 10) = 0;
hi_res_fmri(isnan(hi_res_fmri)) = 0;
plotsurf(glpvertex, glpfaces, hi_res_fmri);
plotsurf(grpvertex, grpfaces, fMriValues_R > 1);

end
function [hi_nodes_scalar] = loopNodesProjectFromLoToHiRes(lo_nodes,hi_nodes,lo_nodes_values)
nHiNodes = size(hi_nodes,1);
nMissingFmriData = 0;
matchedNodes = zeros(nHiNodes,7);
hi_nodes_scalar=zeros(nHiNodes,size(lo_nodes_values,2));
for k=1:nHiNodes
    % Print progress.
    if mod(k/1000,1)==0
        disp(num2str(nHiNodes\k))
    end

    currentnode=hi_nodes(k,:); %current node's coordinates
    %Euclidean distances (vector double) between current face and all mesh centroids
    ds=((currentnode(:,1)-lo_nodes(:,1)).^2 + (currentnode(:,2)-lo_nodes(:,2)).^2 + (currentnode(:,3)-lo_nodes(:,3)).^2 );

    % ID of the mesh centroid that is closest to current face's
    % centroid.
    [distance,closestVertex_id]=min(ds);
    matchedNodes(k,:) = [currentnode lo_nodes(closestVertex_id,:) distance];
    % Replace ID (as above) with the fMRI value of the closest centroid.
    try
        hi_nodes_scalar(k,:)=lo_nodes_values(closestVertex_id,:);
    catch
        % Nearest face is not cortical.
        hi_nodes_scalar(k,:)=NaN;
        nMissingFmriData = nMissingFmriData+1;
    end
end
if(nMissingFmriData>0)
    disp(nMissingFmriData+" vertices with an unknown/missing fMRI data value encountered. They were skipped.");
end
end
function [facesROI] = loopROIAndAssignLabels(ROI_startIndex, ROI_endIndex, faces)
    facesROI={};
    parfor roi=ROI_startIndex:ROI_endIndex
        x=sum(ismember(faces,ROIfacevert(roi).faces(:,1)+1),2);
        ROIfacevert(roi).ffaces=find(x>1); %by Xue
        nbffaces=length(ROIfacevert(roi).ffaces);
        facesROI{roi} = [faces(ROIfacevert(roi).ffaces,:), ones(nbffaces,1)*roi];
    end
    facesROI=cat(1,facesROI{:});
end
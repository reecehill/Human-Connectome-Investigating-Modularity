"""
This type stub file was generated by pyright.
"""

from cdlib import NodeClustering
from typing import Union

__all__ = ["plot_network_clusters", "plot_network_highlighted_clusters", "plot_community_graph"]
COLOR = ...
def plot_network_clusters(graph: object, partition: NodeClustering, position: dict = ..., figsize: tuple = ..., node_size: Union[int, dict] = ..., plot_overlaps: bool = ..., plot_labels: bool = ..., cmap: object = ..., top_k: int = ..., min_size: int = ..., show_edge_widths: bool = ..., show_edge_weights: bool = ..., show_node_sizes: bool = ...) -> object:
    """
    This function plots a graph where nodes are color-coded based on their community assignments. Each node belongs to a specific community, and this function visualizes these communities by assigning color to nodes in each community.

    :param graph: NetworkX/igraph graph
    :param partition: NodeClustering object
    :param position: A dictionary with nodes as keys and positions as values. Example: networkx.fruchterman_reingold_layout(G). By default, uses nx.spring_layout(g)
    :param figsize: the figure size; it is a pair of float, default (8, 8)
    :param node_size: The size of nodes. It can be an integer or a dictionary mapping nodes to sizes. Default is 200.
    :param plot_overlaps: bool, default False. Flag to control if multiple algorithms memberships are plotted.
    :param plot_labels: bool, default False. Flag to control if node labels are plotted.
    :param cmap: str or Matplotlib colormap, Colormap(Matplotlib colormap) for mapping intensities of nodes. If set to None, original colormap is used.
    :param top_k: int, Show the top K influential communities. If set to zero or negative value indicates all.
    :param min_size: int, Exclude communities below the specified minimum size.
    :param show_edge_widths: Flag to control if edge widths are shown. Default is False.
    :param show_edge_weights: Flag to control if edge weights are shown. Default is False.
    :param show_node_sizes: Flag to control if node sizes are shown. Default is False.

    Example:

    >>> from cdlib import algorithms, viz
    >>> import networkx as nx
    >>> g = nx.karate_club_graph()
    >>> coms = algorithms.louvain(g)
    >>> position = nx.spring_layout(g)
    >>> viz.plot_network_clusters(g, coms, position)
    """
    ...

def plot_network_highlighted_clusters(graph: object, partition: NodeClustering, position: dict = ..., figsize: tuple = ..., node_size: int = ..., plot_overlaps: bool = ..., plot_labels: bool = ..., cmap: object = ..., top_k: int = ..., min_size: int = ..., edge_weights_intracluster: int = ...) -> object:
    """
    This function plots a network with highlighted communities, node color coding for communities and draws polygons around clusters. It utilizes spring_layout from NetworkX to position nodes, bringing intra-cluster nodes closer. When considering edge weights, this layout adjusts node positions accordingly, facilitating clearer visualizations of community structures.

    :param graph: NetworkX/igraph graph
    :param partition: NodeClustering object
    :param position: A dictionary with nodes as keys and positions as values. Example: networkx.fruchterman_reingold_layout(G). By default, uses nx.spring_layout(g)
    :param figsize: the figure size; it is a pair of float, default (8, 8)
    :param node_size: int, the size of nodes. Default is 200.
    :param plot_overlaps: bool, default False. Flag to control if multiple algorithms memberships are plotted.
    :param plot_labels: bool, default False. Flag to control if node labels are plotted.
    :param cmap: str or Matplotlib colormap, Colormap(Matplotlib colormap) for mapping intensities of nodes. If set to None, original colormap is used.
    :param top_k: int, Show the top K influential communities. If set to zero or negative value indicates all.
    :param min_size: int, Exclude communities below the specified minimum size.
    :param edge_weights_intracluster: The weight of the edges within clusters. Useful for spring_layout.

    Example:

    >>> from cdlib import algorithms, viz
    >>> import networkx as nx
    >>> g = nx.karate_club_graph()
    >>> coms = algorithms.louvain(g)
    >>> position = nx.spring_layout(g)
    >>> viz.plot_network_highlighted_clusters(g, coms, position)
    """
    ...

def calculate_cluster_edge_weights(graph, node_to_com): # -> None:
    """
    Calculate edge weights between different clusters.

    This function calculates the edge weights between nodes belonging to different clusters.
    It iterates through the edges of the graph, identifies the communities of the source and target nodes,
    and increments the edge weight for the corresponding cluster pair.

    :param graph: NetworkX/igraph graph
    :param node_to_com: Dictionary mapping nodes to their community IDs
    """
    ...

def calculate_cluster_sizes(partition: NodeClustering) -> Union[int, dict]:
    """
    Calculate the total weight of all nodes in each cluster.

    :param partition: The partition of the graph into clusters.
    :type partition: NodeClustering
    :return: If all clusters have the same size, return the size as an integer.
             Otherwise, return a dictionary mapping cluster ID to the number of nodes in the cluster.
    :rtype: Union[int, dict]
    """
    ...

def plot_community_graph(graph: object, partition: NodeClustering, figsize: tuple = ..., node_size: Union[int, dict] = ..., plot_overlaps: bool = ..., plot_labels: bool = ..., cmap: object = ..., top_k: int = ..., min_size: int = ..., show_edge_weights: bool = ..., show_edge_widths: bool = ..., show_node_sizes: bool = ...) -> object:
    """

    This function plots a graph where each node represents a community, and nodes are color-coded based on their community assignments generated by a community detection algorithm. In this representation, each node in the graph represents a detected community, and edges between nodes indicate connections between communities.

    :param graph: NetworkX/igraph graph
    :param partition: NodeClustering object
    :param figsize: the figure size; it is a pair of float, default (8, 8)
    :param node_size: The size of nodes. It can be an integer or a dictionary mapping nodes to sizes. Default is 200.
    :param plot_overlaps: bool, default False. Flag to control if multiple algorithms memberships are plotted.
    :param plot_labels: bool, default False. Flag to control if node labels are plotted.
    :param cmap: str or Matplotlib colormap, Colormap(Matplotlib colormap) for mapping intensities of nodes. If set to None, original colormap is used..
    :param top_k: int, Show the top K influential communities. If set to zero or negative value indicates all.
    :param min_size: int, Exclude communities below the specified minimum size.
    :param show_edge_widths: Flag to control if edge widths are shown. Default is True.
    :param show_edge_weights: Flag to control if edge weights are shown. Default is True.
    :param show_node_sizes: Flag to control if node sizes are shown. Default is True.

    Example:

    >>> from cdlib import algorithms, viz
    >>> import networkx as nx
    >>> g = nx.karate_club_graph()
    >>> coms = algorithms.louvain(g)
    >>> viz.plot_community_graph(g, coms)
    """
    ...


"""
This type stub file was generated by pyright.
"""

from ..utils import auto_repr
from ..dochelpers import borrowkwargs
from .base import Authenticator, BaseDownloader, DownloaderSession

"""Provide access to Amazon S3 objects.
"""
lgr = ...
boto_lgr = ...
__docformat__ = ...
@auto_repr
class S3Authenticator(Authenticator):
    """Authenticator for S3 AWS
    """
    allows_anonymous = ...
    DEFAULT_CREDENTIAL_TYPE = ...
    def __init__(self, *args, host=..., **kwargs) -> None:
        """

        Parameters
        ----------
        host: str, optional
          In some cases it is necessary to provide host to connect to. Passed
          to boto.connect_s3
        """
        ...
    
    def authenticate(self, bucket_name, credential, cache=...): # -> Bucket | None:
        """Authenticates to the specified bucket using provided credentials

        Returns
        -------
        bucket
        """
        ...
    


@auto_repr
class S3DownloaderSession(DownloaderSession):
    def __init__(self, size=..., filename=..., url=..., headers=..., key=...) -> None:
        ...
    
    def download(self, f=..., pbar=..., size=...): # -> None:
        ...
    


@auto_repr
class S3Downloader(BaseDownloader):
    """Downloader from AWS S3 buckets
    """
    _DEFAULT_AUTHENTICATOR = S3Authenticator
    @borrowkwargs(BaseDownloader)
    def __init__(self, **kwargs) -> None:
        ...
    
    @property
    def bucket(self): # -> Any | None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def get_downloader_session(self, url, **kwargs): # -> S3DownloaderSession:
        ...
    
    @classmethod
    def get_key_headers(cls, key, dateformat=...): # -> dict[str, Unknown]:
        ...
    
    @classmethod
    def get_status_from_headers(cls, headers): # -> FileStatus:
        ...
    
    @classmethod
    def get_key_status(cls, key, dateformat=...): # -> FileStatus:
        ...
    



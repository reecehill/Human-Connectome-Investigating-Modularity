"""
This type stub file was generated by pyright.
"""

class Leader_Identification:
    def __init__(self, leader_epsilon) -> None:
        ...
    
    def leader_finding(self, G): # -> list[Any]:
        """
        :param G: G: the networkx graph on which perform DCS
        """
        ...
    


class Merging:
    def __init__(self) -> None:
        """
        Constructor
        """
        ...
    
    def merge_communities(self, communities, actual_community, epsilon):
        """
        :param communities: dictionary of communities
        :param actual_community: a community
        :param epsilon: the tolerance required in order to merge communities
        """
        ...
    


class Community(Merging):
    def __init__(self) -> None:
        """
        Constructor
        """
        ...
    
    def execute(self, G, leader_nodes, epsilon, depth): # -> dict[Any, Any]:
        """
        Execute CD algorithm
        :param leader_nodes:
        :param G: the networkx graph on which perform detection
        :param epsilon: the tolerance required in order to merge communities (default 0.5)
        :param depth: the level of depth for neighborhood extraction (1 or 2)
        """
        ...
    


class Bridge(Merging):
    def __init__(self, size=...) -> None:
        """
        Constructor
        """
        ...
    
    def create_ap_points(self, G): # -> Graph:
        """
        this method creates weak articulation points
        :param G: the networkx graph on which perform detection
        """
        ...
    
    def bridge_function(self, G): # -> tuple[dict[Any, Any], dict[Any, Any]]:
        """
        bridge function to identify weak nodes of the graph
        :param G: the networkx graph on which perform detection
        """
        ...
    


def main_dcs(G): # -> list[Any]:
    ...


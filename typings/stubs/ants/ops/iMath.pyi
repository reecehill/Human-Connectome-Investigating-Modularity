"""
This type stub file was generated by pyright.
"""

from ants.decorators import image_method

__all__ = ['iMath', 'image_math', 'multiply_images', 'iMath_get_largest_component', 'iMath_normalize', 'iMath_truncate_intensity', 'iMath_sharpen', 'iMath_pad', 'iMath_maurer_distance', 'iMath_perona_malik', 'iMath_grad', 'iMath_laplacian', 'iMath_canny', 'iMath_histogram_equalization', 'iMath_MD', 'iMath_ME', 'iMath_MO', 'iMath_MC', 'iMath_GD', 'iMath_GE', 'iMath_GO', 'iMath_GC', 'iMath_fill_holes', 'iMath_get_largest_component', 'iMath_normalize', 'iMath_truncate_intensity', 'iMath_sharpen', 'iMath_propagate_labels_through_mask']
_iMathOps = ...
@image_method
def multiply_images(image1, image2):
    ...

@image_method
def iMath(image, operation, *args):
    """
    Perform various (often mathematical) operations on the input image/s.
    Additional parameters should be specific for each operation.
    See the the full iMath in ANTs, on which this function is based.

    ANTsR function: `iMath`

    Arguments
    ---------
    image : ANTsImage
        input object, usually antsImage

    operation
        a string e.g. "GetLargestComponent" ... the special case of "GetOperations"
        or "GetOperationsFull" will return a list of operations and brief
        description. Some operations may not be valid (WIP), but most are.

    *args : non-keyword arguments
        additional parameters specific to the operation

    Example
    -------
    >>> import ants
    >>> img = ants.image_read(ants.get_ants_data('r16'))
    >>> img2 = ants.iMath(img, 'Canny', 1, 5, 12)
    """
    ...

image_math = ...
def iMath_ops(): # -> set[str]:
    ...

@image_method
def iMath_canny(image, sigma, lower, upper):
    ...

@image_method
def iMath_fill_holes(image, hole_type=...):
    ...

@image_method
def iMath_GC(image, radius=...):
    ...

@image_method
def iMath_GD(image, radius=...):
    ...

@image_method
def iMath_GE(image, radius=...):
    ...

@image_method
def iMath_GO(image, radius=...):
    ...

@image_method
def iMath_get_largest_component(image, min_size=...):
    ...

@image_method
def iMath_grad(image, sigma=..., normalize=...):
    ...

@image_method
def iMath_histogram_equalization(image, alpha, beta):
    ...

@image_method
def iMath_laplacian(image, sigma=..., normalize=...):
    ...

@image_method
def iMath_MC(image, radius=..., value=..., shape=..., parametric=..., lines=..., thickness=..., include_center=...):
    ...

@image_method
def iMath_MD(image, radius=..., value=..., shape=..., parametric=..., lines=..., thickness=..., include_center=...):
    ...

@image_method
def iMath_ME(image, radius=..., value=..., shape=..., parametric=..., lines=..., thickness=..., include_center=...):
    ...

@image_method
def iMath_MO(image, radius=..., value=..., shape=..., parametric=..., lines=..., thickness=..., include_center=...):
    ...

@image_method
def iMath_maurer_distance(image, foreground=...):
    ...

@image_method
def iMath_normalize(image):
    ...

@image_method
def iMath_pad(image, padding):
    ...

@image_method
def iMath_perona_malik(image, conductance=..., n_iterations=...):
    ...

@image_method
def iMath_sharpen(image):
    ...

@image_method
def iMath_propagate_labels_through_mask(image, labels, stopping_value=..., propagation_method=...):
    """
    >>> import ants
    >>> wms = ants.image_read('~/desktop/wms.nii.gz')
    >>> thal = ants.image_read('~/desktop/thal.nii.gz')
    >>> img2 = ants.iMath_propagate_labels_through_mask(wms, thal, 500, 0)
    """
    ...

@image_method
def iMath_truncate_intensity(image, lower_q, upper_q, n_bins=...):
    """
    >>> import ants
    >>> img = ants.image_read(ants.get_ants_data('r16'))
    >>> ants.iMath_truncate_intensity( img, 0.2, 0.8 )
    """
    ...


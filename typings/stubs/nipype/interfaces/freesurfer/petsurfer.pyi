"""
This type stub file was generated by pyright.
"""

from ..base import File, InputMultiPath, TraitedSpec
from .base import FSCommand, FSTraitedSpec
from .model import GLMFit, GLMFitInputSpec

"""Provides interfaces to various commands for running PET analyses provided by FreeSurfer
"""
__docformat__ = ...
iflogger = ...
class GTMSegInputSpec(FSTraitedSpec):
    subject_id = ...
    xcerseg = ...
    out_file = ...
    upsampling_factor = ...
    subsegwm = ...
    keep_hypo = ...
    keep_cc = ...
    dmax = ...
    ctx_annot = ...
    wm_annot = ...
    output_upsampling_factor = ...
    head = ...
    subseg_cblum_wm = ...
    no_pons = ...
    no_vermis = ...
    colortable = ...
    no_seg_stats = ...


class GTMSegOutputSpec(TraitedSpec):
    out_file = ...


class GTMSeg(FSCommand):
    """create an anatomical segmentation for the geometric transfer matrix (GTM).

    Examples
    --------
    >>> gtmseg = GTMSeg()
    >>> gtmseg.inputs.subject_id = 'subject_id'
    >>> gtmseg.cmdline
    'gtmseg --o gtmseg.mgz --s subject_id'
    """
    _cmd = ...
    input_spec = GTMSegInputSpec
    output_spec = GTMSegOutputSpec


class GTMPVCInputSpec(FSTraitedSpec):
    in_file = ...
    frame = ...
    psf = ...
    segmentation = ...
    _reg_xor = ...
    reg_file = ...
    regheader = ...
    reg_identity = ...
    pvc_dir = ...
    mask_file = ...
    auto_mask = ...
    no_reduce_fov = ...
    reduce_fox_eqodd = ...
    contrast = InputMultiPath(File(exists=True), argstr="--C %s...", desc="contrast file")
    default_seg_merge = ...
    merge_hypos = ...
    merge_cblum_wm_gyri = ...
    tt_reduce = ...
    replace = ...
    rescale = ...
    no_rescale = ...
    scale_refval = ...
    _ctab_inputs = ...
    color_table_file = ...
    default_color_table = ...
    tt_update = ...
    lat = ...
    no_tfe = ...
    no_pvc = ...
    tissue_fraction_resolution = ...
    rbv = ...
    rbv_res = ...
    mg = ...
    mg_ref_cerebral_wm = ...
    mg_ref_lobes_wm = ...
    mgx = ...
    km_ref = ...
    km_hb = ...
    steady_state_params = ...
    X = ...
    y = ...
    beta = ...
    X0 = ...
    save_input = ...
    save_eres = ...
    save_yhat = ...
    save_yhat_with_noise = ...
    save_yhat_full_fov = ...
    save_yhat0 = ...
    optimization_schema = ...
    opt_tol = ...
    opt_brain = ...
    opt_seg_merge = ...
    num_threads = ...
    psf_col = ...
    psf_row = ...
    psf_slice = ...


class GTMPVCOutputSpec(TraitedSpec):
    pvc_dir = ...
    ref_file = ...
    hb_nifti = ...
    hb_dat = ...
    nopvc_file = ...
    gtm_file = ...
    gtm_stats = ...
    input_file = ...
    reg_pet2anat = ...
    reg_anat2pet = ...
    reg_rbvpet2anat = ...
    reg_anat2rbvpet = ...
    mgx_ctxgm = ...
    mgx_subctxgm = ...
    mgx_gm = ...
    rbv = ...
    opt_params = ...
    yhat0 = ...
    yhat = ...
    yhat_full_fov = ...
    yhat_with_noise = ...


class GTMPVC(FSCommand):
    """create an anatomical segmentation for the geometric transfer matrix (GTM).

    Examples
    --------
    >>> gtmpvc = GTMPVC()
    >>> gtmpvc.inputs.in_file = 'sub-01_ses-baseline_pet.nii.gz'
    >>> gtmpvc.inputs.segmentation = 'gtmseg.mgz'
    >>> gtmpvc.inputs.reg_file = 'sub-01_ses-baseline_pet_mean_reg.lta'
    >>> gtmpvc.inputs.pvc_dir = 'pvc'
    >>> gtmpvc.inputs.psf = 4
    >>> gtmpvc.inputs.default_seg_merge = True
    >>> gtmpvc.inputs.auto_mask = (1, 0.1)
    >>> gtmpvc.inputs.km_ref = ['8 47']
    >>> gtmpvc.inputs.km_hb = ['11 12 50 51']
    >>> gtmpvc.inputs.no_rescale = True
    >>> gtmpvc.inputs.save_input = True
    >>> gtmpvc.cmdline  # doctest: +NORMALIZE_WHITESPACE
    'mri_gtmpvc --auto-mask 1.000000 0.100000 --default-seg-merge \
    --i sub-01_ses-baseline_pet.nii.gz --km-hb 11 12 50 51 --km-ref 8 47 --no-rescale \
    --psf 4.000000 --o pvc --reg sub-01_ses-baseline_pet_mean_reg.lta --save-input \
    --seg gtmseg.mgz'

    >>> gtmpvc = GTMPVC()
    >>> gtmpvc.inputs.in_file = 'sub-01_ses-baseline_pet.nii.gz'
    >>> gtmpvc.inputs.segmentation = 'gtmseg.mgz'
    >>> gtmpvc.inputs.regheader = True
    >>> gtmpvc.inputs.pvc_dir = 'pvc'
    >>> gtmpvc.inputs.mg = (0.5, ["ROI1", "ROI2"])
    >>> gtmpvc.cmdline  # doctest: +NORMALIZE_WHITESPACE
    'mri_gtmpvc --i sub-01_ses-baseline_pet.nii.gz --mg 0.5 ROI1 ROI2 --o pvc --regheader --seg gtmseg.mgz'
    """
    _cmd = ...
    input_spec = GTMPVCInputSpec
    output_spec = GTMPVCOutputSpec


class MRTMInputSpec(GLMFitInputSpec):
    mrtm1 = ...


class MRTM(GLMFit):
    """Perform MRTM1 kinetic modeling.

    Examples
    --------
    >>> mrtm = MRTM()
    >>> mrtm.inputs.in_file = 'tac.nii'
    >>> mrtm.inputs.mrtm1 = ('ref_tac.dat', 'timing.dat')
    >>> mrtm.inputs.glm_dir = 'mrtm'
    >>> mrtm.cmdline
    'mri_glmfit --glmdir mrtm --y tac.nii --mrtm1 ref_tac.dat timing.dat'
    """
    input_spec = MRTMInputSpec


class MRTM2InputSpec(GLMFitInputSpec):
    mrtm2 = ...


class MRTM2(GLMFit):
    """Perform MRTM2 kinetic modeling.
    Examples
    --------
    >>> mrtm2 = MRTM2()
    >>> mrtm2.inputs.in_file = 'tac.nii'
    >>> mrtm2.inputs.mrtm2 = ('ref_tac.dat', 'timing.dat', 0.07872)
    >>> mrtm2.inputs.glm_dir = 'mrtm2'
    >>> mrtm2.cmdline
    'mri_glmfit --glmdir mrtm2 --y tac.nii --mrtm2 ref_tac.dat timing.dat 0.078720'
    """
    input_spec = MRTM2InputSpec


class LoganRefInputSpec(GLMFitInputSpec):
    logan = ...


class LoganRef(GLMFit):
    """Perform Logan reference kinetic modeling.
    Examples
    --------
    >>> logan = LoganRef()
    >>> logan.inputs.in_file = 'tac.nii'
    >>> logan.inputs.logan = ('ref_tac.dat', 'timing.dat', 2600)
    >>> logan.inputs.glm_dir = 'logan'
    >>> logan.cmdline
    'mri_glmfit --glmdir logan --y tac.nii --logan ref_tac.dat timing.dat 2600'
    """
    input_spec = LoganRefInputSpec



"""
This type stub file was generated by pyright.
"""

from contextlib import AbstractContextManager

"""

Miscellaneous tools to support Interface functionality
......................................................

"""
iflogger = ...
HELP_LINEWIDTH = ...
class RuntimeContext(AbstractContextManager):
    """A context manager to run NiPype interfaces."""
    __slots__ = ...
    def __init__(self, resource_monitor=..., ignore_exception=...) -> None:
        """Initialize the context manager object."""
        ...
    
    def __call__(self, interface, cwd=..., redirect_x=...): # -> Self@RuntimeContext:
        """Generate a new runtime object."""
        ...
    
    def __enter__(self): # -> Bunch:
        """Tear-up the execution of an interface."""
        ...
    
    def __exit__(self, exc_type, exc_value, exc_tb): # -> Literal[True] | None:
        """Tear-down interface execution."""
        ...
    
    @property
    def runtime(self): # -> Bunch:
        ...
    


class NipypeInterfaceError(Exception):
    """Custom error for interfaces"""
    def __init__(self, value) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class Bunch:
    """
    Dictionary-like class that provides attribute-style access to its items.

    A ``Bunch`` is a simple container that stores its items as class
    attributes [1]_. Internally all items are stored in a dictionary and
    the class exposes several of the dictionary methods.

    Examples
    --------
    >>> from nipype.interfaces.base import Bunch
    >>> inputs = Bunch(infile='subj.nii', fwhm=6.0, register_to_mean=True)
    >>> inputs
    Bunch(fwhm=6.0, infile='subj.nii', register_to_mean=True)
    >>> inputs.register_to_mean = False
    >>> inputs
    Bunch(fwhm=6.0, infile='subj.nii', register_to_mean=False)

    References
    ----------
    .. [1] A. Martelli, D. Hudgeon, "Collecting a Bunch of Named
           Items", Python Cookbook, 2nd Ed, Chapter 4.18, 2005.

    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def update(self, *args, **kwargs): # -> None:
        """update existing attribute, or create new attribute

        Note: update is very much like HasTraits.set"""
        ...
    
    def items(self): # -> list[tuple[str, Any]]:
        """iterates over bunch attributes as key, value pairs"""
        ...
    
    def iteritems(self): # -> list[tuple[str, Any]]:
        """iterates over bunch attributes as key, value pairs"""
        ...
    
    def get(self, *args): # -> Any | None:
        """Support dictionary get() functionality"""
        ...
    
    def set(self, **kwargs): # -> None:
        """Support dictionary get() functionality"""
        ...
    
    def dictcopy(self): # -> dict[str, Any]:
        """returns a deep copy of existing Bunch as a dictionary"""
        ...
    
    def __repr__(self): # -> str:
        """representation of the sorted Bunch as a string

        Currently, this string representation of the `inputs` Bunch of
        interfaces is hashed to determine if the process' dirty-bit
        needs setting or not. Till that mechanism changes, only alter
        this after careful consideration.
        """
        ...
    


class InterfaceResult:
    """Object that contains the results of running a particular Interface.

    Attributes
    ----------
    version : version of this Interface result object (a readonly property)
    interface : class type
        A copy of the `Interface` class that was run to generate this result.
    inputs :  a traits free representation of the inputs
    outputs : Bunch
        An `Interface` specific Bunch that contains all possible files
        that are generated by the interface.  The `outputs` are used
        as the `inputs` to another node when interfaces are used in
        the pipeline.
    runtime : Bunch

        Contains attributes that describe the runtime environment when
        the `Interface` was run.  Contains the attributes:

        * cmdline : The command line string that was executed
        * cwd : The directory the ``cmdline`` was executed in.
        * stdout : The output of running the ``cmdline``.
        * stderr : Any error messages output from running ``cmdline``.
        * returncode : The code returned from running the ``cmdline``.

    """
    def __init__(self, interface, runtime, inputs=..., outputs=..., provenance=...) -> None:
        ...
    
    @property
    def version(self): # -> float:
        ...
    


def format_help(cls): # -> LiteralString:
    """
    Prints help text of a Nipype interface

    >>> from nipype.interfaces.afni import GCOR
    >>> GCOR.help()  # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    Wraps the executable command ``@compute_gcor``.
    <BLANKLINE>
    Computes the average correlation between every voxel
    and ever other voxel, over any give mask.
    <BLANKLINE>
    <BLANKLINE>
    For complete details, ...

    """
    ...

def get_trait_desc(inputs, name, spec): # -> list[str]:
    """Parses a HasTraits object into a nipype documentation string"""
    ...


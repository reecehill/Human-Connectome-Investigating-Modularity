"""
This type stub file was generated by pyright.
"""

def sparse_allclose(a, b, rtol=..., atol=...): # -> Any:
    """
    Version of np.allclose for use with sparse matrices
    """
    ...

def normalize(matrix): # -> csr_matrix | tuple[ndarray[Any, Any] | spmatrix, ndarray[Any, Any]] | ndarray[Any, Any]:
    """
    Normalize the columns of the given matrix

    :param matrix: The matrix to be normalized
    :returns: The normalized matrix
    """
    ...

def inflate(matrix, power): # -> csr_matrix | tuple[ndarray[Any, Any] | spmatrix, ndarray[Any, Any]] | ndarray[Any, Any]:
    """
    Apply cluster inflation to the given matrix by raising
    each element to the given power.

    :param matrix: The matrix to be inflated
    :param power: Cluster inflation parameter
    :returns: The inflated matrix
    """
    ...

def expand(matrix, power):
    """
    Apply cluster expansion to the given matrix by raising
    the matrix to the given power.

    :param matrix: The matrix to be expanded
    :param power: Cluster expansion parameter
    :returns: The expanded matrix
    """
    ...

def add_self_loops(matrix, loop_value):
    """
    Add self-loops to the matrix by setting the diagonal
    to loop_value

    :param matrix: The matrix to add loops to
    :param loop_value: Value to use for self-loops
    :returns: The matrix with self-loops
    """
    ...

def prune(matrix, threshold): # -> csc_array:
    """
    Prune the matrix so that very small edges are removed.
    The maximum value in each column is never pruned.

    :param matrix: The matrix to be pruned
    :param threshold: The value below which edges will be removed
    :returns: The pruned matrix
    """
    ...

def converged(matrix1, matrix2): # -> Any | bool:
    """
    Check for convergence by determining if
    matrix1 and matrix2 are approximately equal.

    :param matrix1: The matrix to compare with matrix2
    :param matrix2: The matrix to compare with matrix1
    :returns: True if matrix1 and matrix2 approximately equal
    """
    ...

def iterate(matrix, expansion, inflation): # -> csr_matrix | tuple[ndarray[Any, Any] | spmatrix, ndarray[Any, Any]] | ndarray[Any, Any]:
    """
    Run a single iteration (expansion + inflation) of the mcl algorithm

    :param matrix: The matrix to perform the iteration on
    :param expansion: Cluster expansion factor
    :param inflation: Cluster inflation factor
    """
    ...

def get_clusters(matrix): # -> list[Any]:
    """
    Retrieve the clusters from the matrix

    :param matrix: The matrix produced by the MCL algorithm
    :returns: A list of tuples where each tuple represents a cluster and
              contains the indices of the nodes belonging to the cluster
    """
    ...

def run_mcl(matrix, expansion=..., inflation=..., loop_value=..., iterations=..., pruning_threshold=..., pruning_frequency=..., convergence_check_frequency=..., verbose=...): # -> csc_array | ndarray[Any, Any] | csr_matrix | tuple[ndarray[Any, Any] | spmatrix, ndarray[Any, Any]]:
    """
    Perform MCL on the given similarity matrix

    :param matrix: The similarity matrix to cluster
    :param expansion: The cluster expansion factor
    :param inflation: The cluster inflation factor
    :param loop_value: Initialization value for self-loops
    :param iterations: Maximum number of iterations
           (actual number of iterations will be less if convergence is reached)
    :param pruning_threshold: Threshold below which matrix elements will be set
           set to 0
    :param pruning_frequency: Perform pruning every 'pruning_frequency'
           iterations.
    :param convergence_check_frequency: Perform the check for convergence
           every convergence_check_frequency iterations
    :param verbose: Print extra information to the console
    :returns: The final matrix
    """
    ...


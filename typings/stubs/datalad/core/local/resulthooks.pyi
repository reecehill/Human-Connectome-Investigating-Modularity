"""
This type stub file was generated by pyright.
"""

"""Utility functions for result hooks

"""
__docformat__ = ...
lgr = ...
def get_jsonhooks_from_config(cfg): # -> dict[Any, Any]:
    """Parse out hook definitions given a ConfigManager instance

    Returns
    -------
    dict
      where keys are hook names/labels, and each value is a dict with
      three keys: 'cmd' contains the name of the to-be-executed DataLad
      command; 'args' has a JSON-encoded string with a dict of keyword
      arguments for the command (format()-language based placeholders
      can be present); 'match' holds a JSON-encoded string representing
      a dict with key/value pairs that need to match a result in order
      for a hook to be triggered.
    """
    ...

def match_jsonhook2result(hook, res, match): # -> bool:
    """Evaluate a hook's result match definition against a concrete result

    A match definition is a dict that can contain any number of keys. For each
    key it is tested, if the value matches the one in a given result.
    If all present key/value pairs match, the hook is executed. In addition to
    ``==`` tests, ``in``, ``not in``, and ``!=`` tests are supported. The
    test operation can be given by wrapping the test value into a list, the
    first item is the operation label 'eq', 'neq', 'in', 'nin'; the second value
    is the test value (set). Example::

        {
          "type": ["in", ["file", "directory"]],
          "action": "get",
          "status": "notneeded"
        }

    If a to be tested value is a list, an 'eq' operation needs to be specified
    explicitly in order to disambiguate the definition.

    Parameters
    ----------
    hook : str
      Name of the hook
    res : dict
      Result dictionary
    match : dict
      Match definition (see above for details).

    Returns
    -------
    bool
      True if the given result matches the hook's match definition, or
      False otherwise.
    """
    ...

def run_jsonhook(hook, spec, res, dsarg=...): # -> Generator[Any, Any, None]:
    """Execute a hook on a given result

    A hook definition's 'call' specification may contain placeholders that
    will be expanded using matching values in the given result record. In
    addition to keys in the result a '{dsarg}' placeholder is supported.
    The characters '{' and '}' in the 'call' specification that are not part
    of format() placeholders have to be escaped as '{{' and '}}'. Example
    'call' specification to execute the DataLad ``unlock`` command::

        unlock {{"dataset": "{dsarg}", "path": "{path}"}}

    Parameters
    ----------
    hook : str
      Name of the hook
    spec : dict
      Hook definition as returned by `get_hooks_from_config()`
    res : dict
      Result records that were found to match the hook definition.
    dsarg : Dataset or str or None, optional
      Value to substitute a {dsarg} placeholder in a hook 'call' specification
      with. Non-string values are automatically converted.

    Yields
    ------
    dict
      Any result yielded by the command executed as hook.
    """
    ...


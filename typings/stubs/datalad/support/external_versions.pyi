"""
This type stub file was generated by pyright.
"""

"""Module to help maintain a registry of versions for external modules etc
"""
__all__ = ['UnknownVersion', 'ExternalVersions', 'external_versions']
class UnknownVersion:
    """For internal use
    """
    def __str__(self) -> str:
        ...
    
    def __cmp__(self, other): # -> Literal[0]:
        ...
    


_runner = ...
_git_runner = ...
def get_rsync_version(): # -> LooseVersion:
    ...

class ExternalVersions:
    """Helper to figure out/use versions of the externals (modules, cmdline tools, etc).

    To avoid collision between names of python modules and command line tools,
    prepend names for command line tools with `cmd:`.

    It maintains a dictionary of `distuil.version.LooseVersion`s to make
    comparisons easy. Note that even if version string conform the StrictVersion
    "standard", LooseVersion will be used.  If version can't be deduced for the
    external, `UnknownVersion()` is assigned.  If external is not present (can't
    be imported, or custom check throws exception), None is returned without
    storing it, so later call will re-evaluate fully.
    """
    UNKNOWN = ...
    _CUSTOM = ...
    _PYTHON_PACKAGES = ...
    _INTERESTING = ...
    def __init__(self) -> None:
        ...
    
    def __getitem__(self, module): # -> None:
        ...
    
    def keys(self, query=...): # -> dict_keys[Any, Any]:
        """Return names of the known modules

        Parameters
        ----------
        query: bool, optional
          If True, we will first query all CUSTOM and INTERESTING entries
          to make sure we have them known.
        """
        ...
    
    def __contains__(self, item): # -> bool:
        ...
    
    def add(self, name, func=...): # -> None:
        """Add a version checker

        This method allows third-party libraries to define additional checks.
        It will not add `name` if already exists.  If `name` exists and `func`
        is different - it will override with a new `func`.  Added entries will
        be included in the output of `dumps(query=True)`.

        Parameters
        ----------
        name: str
          Name of the check (usually a name of the Python module, or an
          external command prefixed with "cmd:")
        func: callable, optional
          Function to be called to obtain version information. This should be
          defined when checking the version of something that is not a Python
          module or when this class's method for determining the version of a
          Python module isn't sufficient.
        """
        ...
    
    @property
    def versions(self): # -> dict[Any, Any]:
        """Return dictionary (copy) of versions"""
        ...
    
    def dumps(self, indent=..., preamble=..., query=...): # -> str:
        """Return listing of versions as a string

        Parameters
        ----------
        indent: bool or str, optional
          If set would instruct on how to indent entries (if just True, ' '
          is used). Otherwise returned in a single line
        preamble: str, optional
          What preamble to the listing to use
        query : bool, optional
          To query for versions of all "registered" custom externals, so to
          get those which weren't queried for yet
        """
        ...
    
    def check(self, name, min_version=..., msg=...): # -> None:
        """Check if an external (optionally of specified min version) present

        Parameters
        ----------
        name: str
          Name of the external (typically a Python module)
        min_version: str or version, optional
          Minimal version to satisfy
        msg: str, optional
          An additional message to include into the exception message

        Raises
        ------
        MissingExternalDependency
          if the external is completely missing
        OutdatedExternalDependency
          if the external is present but does not satisfy the min_version
        """
        ...
    


external_versions = ...

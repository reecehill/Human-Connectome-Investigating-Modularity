"""
This type stub file was generated by pyright.
"""

"""

A reference internal for Diffusion Entropy Reducer graph clustering algorithm. See

M. Kozdoba and S. Mannor, Community Detection via Measure Space Embedding, NIPS 2015


Code from: https://github.com/komarkdev/der_graph_clustering

The main function is

der_graph_clustering(G, NCOMPONENTS = 2,
                            WALK_LEN = 3,
                            alg_threshold = None,
                            alg_iterbound = 100,
                            do_soften = True
                        )
Arguments:
G - an undirected networkx graph object,
The rest of the parameters are as described in the paper.
Usage example is in block_model_test.py


Code structure:
* Kmeans class implements a generic K-means like skeleton.
* WeightedMeasNodes encapuslates the specific likelihood computations.
* der_graph_clustering is the main function.
  It creates the walks, creates an initialization, runs the algorithm,
  and finally extracts the communities.


"""
class KMeans:
    STRICT_INCREASE_FLAG = ...
    def __init__(self, init_params, data, node_implementation) -> None:
        ...
    
    def computeQ(self): # -> Any | Literal[0]:
        ...
    
    def optimize_step(self): # -> None:
        ...
    
    def optimize(self, threshold, iterbound=...): # -> None:
        ...
    


class WeightedMeasNodes:
    def __init__(self, weights, k) -> None:
        ...
    
    def node_log_probabilities__(self, data, param):
        ...
    
    def node_log_probabilities(self, data, param):
        ...
    
    def optimize__(self, data, Q): # -> NDArray[float64]:
        ...
    
    def optimize(self, data, Q): # -> NDArray[float64]:
        ...
    
    def get_communities(self, params, data): # -> list[Any]:
        ...
    
    def init_params_soften(self, params, alpha=...):
        ...
    
    def init_params_random_subset_data(self, ncomp, data, weights=...):
        ...
    


def der_graph_clustering(graph, ncomponents=..., walk_len=..., alg_threshold=..., alg_iterbound=..., do_soften=...): # -> tuple[list[Any], KMeans]:
    ...


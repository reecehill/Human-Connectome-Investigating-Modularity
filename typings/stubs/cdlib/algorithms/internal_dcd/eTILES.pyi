"""
This type stub file was generated by pyright.
"""

__author__ = ...
__contact__ = ...
__website__ = ...
__license__ = ...
class eTILES:
    """
    TILES
    Algorithm for evolutionary community discovery
    ***Explicit removal***
    """
    def __init__(self, dg: object, obs: int = ...) -> None:
        """
        Constructor
        :param g: DyNetx graph
        :param obs: observation window
        :param start: starting date
        :param end: ending date
        """
        ...
    
    @property
    def new_community_id(self) -> int:
        """
        Return a new community identifier
        :return: new community id
        """
        ...
    
    def execute(self) -> dict:
        """
        Execute TILES algorithm
        """
        ...
    
    def print_communities(self): # -> None:
        """
        Print the actual communities
        """
        ...
    
    def common_neighbors_analysis(self, u, v, common_neighbors): # -> None:
        """
        General case in which both the nodes are already present in the net.
        :param u: a node
        :param v: a node
        :param common_neighbors: common neighbors of the two nodes
        """
        ...
    
    def remove_edge(self, e): # -> None:
        """
        Edge removal procedure
        :param e: edge
        """
        ...
    
    def destroy_community(self, cid): # -> None:
        ...
    
    def add_to_community(self, node, cid): # -> None:
        ...
    
    def remove_from_community(self, node, cid): # -> None:
        ...
    
    def update_shared_coms(self, coms_to_change): # -> None:
        ...
    
    def modify_after_removal(self, sub_c, c): # -> None:
        """
        Maintain the clustering coefficient invariant after the edge removal phase
        :param sub_c: sub-community to evaluate
        :param c: community id
        """
        ...
    
    def centrality_test(self, subgraph): # -> dict[Any, Any]:
        ...
    
    def get_matches(self): # -> list[Any]:
        ...
    



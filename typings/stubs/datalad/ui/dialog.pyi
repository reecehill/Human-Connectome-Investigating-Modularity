"""
This type stub file was generated by pyright.
"""

from ..utils import auto_repr
from .base import InteractiveUI

"""Basic dialog-like interface for interactions in the terminal window

"""
__docformat__ = ...
lgr = ...
@auto_repr
class ConsoleLog:
    progressbars = ...
    def __init__(self, out=...) -> None:
        ...
    
    def message(self, msg, cr=...): # -> None:
        ...
    
    def error(self, error): # -> None:
        ...
    
    def get_progressbar(self, *args, **kwargs): # -> SilentProgressBar | LogProgressBar:
        """Return a progressbar.  See e.g. `tqdmProgressBar` about the interface

        Additional parameter is backend to choose among available
        """
        ...
    
    @property
    def is_interactive(self): # -> bool:
        ...
    


@auto_repr
class SilentConsoleLog(ConsoleLog):
    """A ConsoleLog with a SilentProgressbar"""
    def get_progressbar(self, *args, **kwargs): # -> SilentProgressBar:
        ...
    


@auto_repr
class QuietConsoleLog(ConsoleLog):
    """A ConsoleLog with a LogProgressbar"""
    def get_progressbar(self, *args, **kwargs): # -> LogProgressBar:
        ...
    


def getpass_echo(prompt=..., stream=...): # -> str:
    """Q&D workaround until we have proper 'centralized' UI -- just use getpass BUT enable echo
    """
    ...

@auto_repr
class DialogUI(ConsoleLog, InteractiveUI):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def input(self, prompt, hidden=...): # -> str:
        """Request user input

        Parameters
        ----------
        prompt: str
          Prompt for the entry
        """
        ...
    
    def question(self, text, title=..., choices=..., default=..., hidden=..., repeat=...): # -> str:
        ...
    


class IPythonUI(DialogUI):
    """Custom to IPython frontend UI implementation

    There is no way to discriminate between web notebook or qt console,
    so we have just a single class for all.

    TODO: investigate how to provide 'proper' displays for
    IPython of progress bars so backend could choose the
    appropriate one

    """
    _tqdm_frontend = ...
    def input(self, prompt, hidden=...): # -> str:
        ...
    
    def get_progressbar(self, *args, **kwargs): # -> SilentProgressBar | LogProgressBar:
        """Return a progressbar.  See e.g. `tqdmProgressBar` about the
        interface

        Additional parameter is backend to choose among available
        """
        ...
    


@auto_repr
class UnderAnnexUI(DialogUI):
    def __init__(self, specialremote=..., **kwargs) -> None:
        ...
    
    def set_specialremote(self, specialremote): # -> None:
        ...
    
    def get_progressbar(self, *args, **kwargs): # -> SilentProgressBar | LogProgressBar:
        ...
    


@auto_repr
class UnderTestsUI(DialogUI):
    """UI to help with testing functionality requiring interaction

    It will provide additional method to push responses to be provided,
    and could be used as a context manager
    """
    def __init__(self, **kwargs) -> None:
        ...
    
    def add_responses(self, responses): # -> Self@UnderTestsUI:
        ...
    
    def get_responses(self): # -> deque[Unknown]:
        ...
    
    def clear_responses(self): # -> None:
        ...
    
    def question(self, *args, **kwargs):
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
    



"""
This type stub file was generated by pyright.
"""

from typing import Callable

class TemporalClustering:
    def __init__(self) -> None:
        """
        Temporal Communities representation
        """
        ...
    
    def add_matching(self, matching: list): # -> None:
        """
        Add a precomputed matching of the communities.

        :param matching: a list of tuples [(Ti_Ca, Tj_Cb, score), ... ].
                Community names needs to satisfy the pattern {tid}_{cid}, where tid is the time of observation and
                cid is the position of the community within the Clustering object.
        """
        ...
    
    def get_observation_ids(self) -> list:
        """
        Returns the list of temporal ids for the available clusterings
        :return: a list of temporal ids
        """
        ...
    
    def get_clustering_at(self, time: object) -> object:
        """
        Returns the clustering observed at a given time

        :param time: the time of observation
        :return: a Clustering object
        """
        ...
    
    def add_clustering(self, clustering: object, time: object): # -> None:
        """
        Add to the Temporal Clustering the communities observed at a given time

        :param clustering: a Clustering object
        :param time: time of observation
        """
        ...
    
    def get_community(self, cid: str) -> list:
        """
        Returns the nodes within a given temporal community

        :param cid: community id of the form {tid}_{cid}, where tid is the time of observation and
                cid is the position of the community within the Clustering object.
        :return: list of nodes within cid
        """
        ...
    
    def to_json(self): # -> str:
        """
        Generate a JSON representation of the TemporalClustering object

        :return: a JSON formatted string representing the object
        """
        ...
    
    def clustering_stability_trend(self, method: Callable[[object, object], float]) -> list:
        """
        Returns the trend for community stability.
        The stability index is computed for temporally adjacent clustering pairs.

        :param method: a comparison score taking as input two Clustering objects (e.g., NMI, NF1, ARI...)
        :return: a list of floats
        """
        ...
    
    def has_explicit_match(self) -> bool:
        """
        Checks if the algorithm provided an explicit match of temporal communities

        :return: a list of tuple [(Ti_Ca, Tj_Cb, score), ... ].
                Community names are assigned following the pattern {tid}_{cid}, where tid is the time of observation and
                cid is the position of the community within the Clustering object.
        """
        ...
    
    def get_explicit_community_match(self) -> list:
        """
        Return an explicit matching of computed communities (if it exists)

        :return: a list of tuple [(Ti_Ca, Tj_Cb, score), ... ].
                Community names are assigned following the pattern {tid}_{cid}, where tid is the time of observation and
                cid is the position of the community within the Clustering object.
        """
        ...
    



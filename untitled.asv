clear all;
addpath('C:\Users\Reece\AppData\Roaming\MathWorks\MATLAB Add-Ons\Collections\Iso2Mesh');

load('D:\Dissertation\Participants\sub-002\moduleResults\allBrainData__2.mat');
close all;
overlappingFaces = find(allBrainData.leftHemisphere.surf.faces(:,6) == 1);
offset = max(allBrainData.leftHemisphere.surf.faces(:,5))+1;
allBrainData.leftHemisphere.surf.faces(allBrainData.leftHemisphere.surf.faces(:,5)>0,5) = allBrainData.leftHemisphere.surf.faces(allBrainData.leftHemisphere.surf.faces(:,5)>0,5) + offset;
allBrainData.leftHemisphere.surf.faces(:,7) = allBrainData.leftHemisphere.surf.faces(:,4) + allBrainData.leftHemisphere.surf.faces(:,5);
%globalFunctionalModules = transpose(unique(allBrainData.leftHemisphere.surf.faces(allBrainData.leftHemisphere.surf.faces(:,5)>0,5)));

maxStructuralModule = max(allBrainData.leftHemisphere.surf.faces(:,4),[],'all');
for moduleIndex=1:maxStructuralModule
    %% For each module, get its outline.
    % Edges are defined by two indexes - the two nodes they connect.
    strucModuleFacesIndexes{moduleIndex} = find(allBrainData.leftHemisphere.surf.faces(:,4) == moduleIndex);
    strucModuleFacesBiggerThan1Indexes{moduleIndex} = length(find(allBrainData.leftHemisphere.surf.faces(:,4) == moduleIndex)) > 1;
    strucModuleNodeIndexesTemp = allBrainData.leftHemisphere.surf.faces(strucModuleFacesIndexes{moduleIndex},1:3);
    strucModuleNodeIndexes = unique(strucModuleNodeIndexesTemp(:));
    strucModuleAreaMm{moduleIndex} = sum(elemvolume(allBrainData.leftHemisphere.surf.nodes(:,1:3),allBrainData.leftHemisphere.surf.faces(strucModuleFacesIndexes{moduleIndex},1:3)));
    allBrainData.leftHemisphere.surf.nodes(strucModuleNodeIndexes,4) = moduleIndex;
    [strucEdges{moduleIndex},~]=surfedge(allBrainData.leftHemisphere.surf.faces(strucModuleFacesIndexes{moduleIndex},1:3));
end

funcModuleIndexes = transpose(unique(allBrainData.leftHemisphere.surf.faces(overlappingFaces,5)));
%funcModuleIndexes = transpose(unique(allBrainData.leftHemisphere.surf.faces(allBrainData.leftHemisphere.surf.faces(:,5)>0,5)));

for funcModuleIndex=funcModuleIndexes
    funcModuleFacesIndexes{funcModuleIndex} = intersect(overlappingFaces,find(allBrainData.leftHemisphere.surf.faces(:,5) == funcModuleIndex));
    funcModuleAreaMm{funcModuleIndex} = sum(elemvolume(allBrainData.leftHemisphere.surf.nodes(:,1:3),allBrainData.leftHemisphere.surf.faces(funcModuleFacesIndexes{funcModuleIndex},1:3)));
    
    globalFuncModuleFacesIndexes{funcModuleIndex}= find(allBrainData.leftHemisphere.surf.faces(:,5) == funcModuleIndex);
    globalFuncModuleAreaMm{funcModuleIndex} = sum(elemvolume(allBrainData.leftHemisphere.surf.nodes(:,1:3),allBrainData.leftHemisphere.surf.faces(funcModuleFacesIndexes{funcModuleIndex},1:3)));
    
    funcModuleNodeIndexesTemp = allBrainData.leftHemisphere.surf.faces(funcModuleFacesIndexes{funcModuleIndex},1:3);
    funcModuleNodeIndexes{funcModuleIndex} = unique(funcModuleNodeIndexesTemp(:));
    [funcEdges{funcModuleIndex},~]=surfedge(allBrainData.leftHemisphere.surf.faces(funcModuleFacesIndexes{funcModuleIndex},(1:3)));
end

%% Calculating overlap

metrics0 = struct('faceIdsOfOverlap',[],'areaOverlapAsPercentOfFunc',0,'areaOverlapAsPercentOfStruc',0);
overlapMatrix = [{}];
moduleCounter=0;
for funcModuleIndex=funcModuleIndexes
    moduleCounter = moduleCounter+1;
    funcFaceIds = find(allBrainData.leftHemisphere.surf.faces(:,5) == funcModuleIndex);
    strucModuleIds = transpose(unique(allBrainData.leftHemisphere.surf.faces(intersect(overlappingFaces,funcFaceIds),4)));
        for strucModuleIndex=strucModuleIds
            strucFaceIds = find(allBrainData.leftHemisphere.surf.faces(:,4) == strucModuleIndex);  
            metrics = metrics0;
            metrics.faceIdsOfOverlap = intersect(funcFaceIds,strucFaceIds);
            metrics.overlapArea = sum(elemvolume(allBrainData.leftHemisphere.surf.nodes(:,1:3),allBrainData.leftHemisphere.surf.faces(metrics.faceIdsOfOverlap,1:3)));
            metrics.areaOverlapAsPercentOfFunc = metrics.overlapArea / funcModuleAreaMm{funcModuleIndex};
            metrics.areaOverlapAsPercentOfStruc = metrics.overlapArea / strucModuleAreaMm{strucModuleIndex};
            overlapMatrix = [overlapMatrix; metrics];
            clear metrics;
        end
end
collectionOfMetrics = cat(2,overlapMatrix{:});




%% Visualisations
figure;
xlabel('Left-Right');
ylabel('Anterior-Posterior');
zlabel('Inferior-Superior');
hold on;
ax = gca;               % get the current axis
ax.Clipping = 'off';    % turn clipping off
title("Left motor homonculus parcellated into triangular nodes");
plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces(:,1:3),'DisplayName','Left hemisphere','FaceAlpha',0.5,'EdgeColor','black','EdgeAlpha',0.05,'FaceColor','white');
%plotsurf(allBrainData.leftHemisphere.surf.nodes(:,1:3),allBrainData.leftHemisphere.surf.faces(:,[1:3,7]),'DisplayName',['Structural Module: #' num2str(moduleIndex)],'EdgeAlpha',0.3);
    



figure;
xlabel('Left-Right');
ylabel('Anterior-Posterior');
zlabel('Inferior-Superior');
hold on;
ax = gca;               % get the current axis
ax.Clipping = 'off';    % turn clipping off
title("Left motor homonculus parcellated into triangular nodes");
%plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces(:,1:3),'DisplayName','Left hemisphere','FaceAlpha',0.5,'EdgeColor','black','EdgeAlpha',0.05,'FaceColor','white');
plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces(find(allBrainData.leftHemisphere.surf.faces(:,4) > 0),1:3),'DisplayName','Left hemisphere','FaceAlpha',0.5,'EdgeColor','black','EdgeAlpha',0.05,'FaceColor','white');

colormap_hsv = hsv(maxStructuralModule);
for moduleIndex=1:maxStructuralModule
    color = colormap_hsv(moduleIndex,:);
    plotsurf(allBrainData.leftHemisphere.surf.nodes(:,1:3),allBrainData.leftHemisphere.surf.faces(strucModuleFacesIndexes{moduleIndex},1:3),'DisplayName',['Structural Module: #' num2str(moduleIndex)],'EdgeAlpha',0.3,'FaceColor',[color]);
    %plotedges(allBrainData.leftHemisphere.surf.nodes(:,1:3), strucEdges{moduleIndex},'linewidth',randi(5,1),'Color',[color 0.9],'linestyle','-','DisplayName',['Structural Module: #' num2str(moduleIndex)]);
end

colormap_jet = jet(length(funcModuleIndexes));
count = 0;
for funcModuleIndex=funcModuleIndexes
    count = count+1;
    color = colormap_jet(count,:);
    %plotsurf(allBrainData.leftHemisphere.surf.nodes(:,1:3),allBrainData.leftHemisphere.surf.faces(intersect(overlappingFaces,funcModuleFacesIndexes{funcModuleIndex}),1:3),'DisplayName',['Functional Module: #' num2str(funcModuleIndex)],'EdgeAlpha',0.3,'FaceColor',colormap_jet(funcModuleIndex,:));
    plotedges(allBrainData.leftHemisphere.surf.nodes(:,1:3), funcEdges{funcModuleIndex},'linewidth',3,'Color',[color],'linestyle','-','DisplayName',['Functional Module: #' num2str(funcModuleIndex)],'Marker','o','MarkerSize',3,'AlignVertexCenters','on','HandleVisibility','off');
    plot(NaN,NaN,'linewidth',5,'Color',[color],'DisplayName',['Functional Module: #' num2str(funcModuleIndex)],'Marker','o','MarkerSize',3)
end

camlight;
lighting gouraud;
legend;


figure;
hold on;

title("Independent view of each structural module");
modulesWith1OrMoreFaces = cat(2,strucModuleFacesBiggerThan1Indexes{:});

t = tiledlayout(ceil(sum(modulesWith1OrMoreFaces)/3),3,'TileSpacing','None','Padding','None');


for moduleIndex=1:maxStructuralModule
    if(modulesWith1OrMoreFaces(moduleIndex) == 1)
        ax = nexttile;               % get the current axis
        hold on;
        ax.Clipping = 'off';    % turn clipping offcamlight;
        light(ax,'Position',[0 0 0]);
        light(ax,'Position',[200 200 200]);
        light(ax,'Position',[-100 70 0]);
        lighting(ax, 'gouraud');
        plotsurf(allBrainData.leftHemisphere.surf.nodes(:,1:3),...
            allBrainData.leftHemisphere.surf.faces(strucModuleFacesIndexes{moduleIndex},(1:3)),'DisplayName',['Structural Module: ' moduleIndex],'EdgeAlpha',0.3,'FaceColor',colormap_hsv(moduleIndex,:));
    end
end
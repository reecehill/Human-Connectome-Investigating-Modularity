"""
This type stub file was generated by pyright.
"""

"""
This module contains dataset-independent utilities
to run fMRI data analyses.

Author: Bertrand Thirion, 2015
"""
def fsl_topup(field_maps, fmri_files, mem, write_dir, modality=...): # -> None:
    """ This function calls topup to estimate distortions from field maps
    then apply the ensuing correction to fmri_files"""
    ...

def run_glm(dmtx, contrasts, fmri_data, mask_img, subject_dic, subject_session_output_dir, tr, slice_time_ref, smoothing_fwhm=...): # -> tuple[dict[Unknown, Unknown], Unknown]:
    """ Run the GLM on a given session and compute contrasts

    Parameters
    ----------
    dmtx : array-like
        the design matrix for the model
    contrasts : dict
        holding the numerical specification of contrasts
    fmri_data : Nifti1Image
        the fMRI data fir by the model
    mask_img : Nifti1Image
        the mask used for the fMRI data
    """
    ...

def run_surface_glm(dmtx, contrasts, fmri_path, subject_session_output_dir): # -> None:
    """ """
    ...

def masking(func, output_dir): # -> Nifti1Image | FileBasedImage:
    """compute the mask for all sessions"""
    ...

def first_level(subject_dic, additional_regressors=..., compcorr=..., smooth=..., mesh=..., mask_img=..., orthogonalize_confounds=...): # -> None:
    """ Run the first-level analysis (GLM fitting + statistical maps)
    in a given subject

    Parameters
    ----------
    subject_dic: dict,
                 exhaustive description of an individual acquisition
    additional_regressors: dict or None,
                 additional regressors provided as an already sampled
                 design_matrix
                 dictionary keys are session_ids
    compcorr: Bool, optional,
              whether confound estimation and removal should be done or not
    smooth: float or None, optional,
            how much the data should spatially smoothed during masking
    """
    ...

def fixed_effects_analysis(subject_dic, mask_img=..., mesh=...): # -> None:
    """ Combine the AP and PA images """
    ...

def fixed_effects_surf(con_imgs, var_imgs): # -> list[Unknown]:
    """Idem fixed_effects_img but for surfaces"""
    ...

def fixed_effects_img(con_imgs, var_imgs, mask_img): # -> list[Unknown]:
    """Compute the fixed effets given images of effects and variance

    Parameters
    ----------
    con_imgs: list of Nifti1Images or strings
              the input contrast images
    var_imgs: list of Nifti1Images or strings
              the input variance images
    mask_img: Nifti1Image or string,
              mask image

    returns
    -------
    ffx_con: Nifti1Image,
             the fixed effects contrast computed within the mask
    ffx_var: Nifti1Image,
             the fixed effects variance computed within the mask
    ffx_stat: Nifti1Image,
             the fixed effects t-test computed within the mask
    """
    ...

def fixed_effects(contrasts, variances): # -> list[Any]:
    """Compute the fixed effets given arrays of effects and variance
    """
    ...


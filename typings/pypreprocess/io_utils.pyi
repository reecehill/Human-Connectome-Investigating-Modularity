"""
This type stub file was generated by pyright.
"""

"""
:Module: utils
:Synopsis: routine business related to image i/o manips
:Author: dohmatob elvis dopgima

"""
DICOM_EXTENSIONS = ...
def is_niimg(img): # -> Type[Nifti1Image] | Type[Nifti1Pair] | Type[Spm2AnalyzeImage] | Type[Spm99AnalyzeImage] | Type[MGHImage] | Literal[False]:
    """
    Checks whether given img is nibabel image object.

    """
    ...

def load_vols(niimgs): # -> list[Unknown | Nifti1Image | FileBasedImage | Generator[Nifti1Image | FileBasedImage | Unknown, None, None]] | list[Nifti1Image] | list[Unknown]:
    """Loads a nifti image (or a bail of) into a list qof 3D volumes.

    Parameters
    ----------
    niimgs: 3 or 4D Niimg-like object
        If niimgs is an iterable, checks if data is really 4D. Then,
        considering that it is a list of niimg and load them one by one.
        If niimg is a string, consider it as a path to Nifti image and
        call nibabel.load on it. If it is an object, check if get_data
        and get_affine methods are present, raise an Exception otherwise.

    Returns
    -------
    niimgs_: list of nifti image objects
        The loaded volumes.
    """
    ...

def save_vols(vols, output_dir, basenames=..., affine=..., concat=..., prefix=..., ext=...): # -> str | list[Unknown]:
    """
    Saves a single 4D image or a couple of 3D vols unto disk.

    vols: single 4D nibabel image object, or list of 3D nibabel image objects
        volumes, of ndarray
        volumes to be saved

    output_dir: string
        existing filename, destination directory

    basenames: string or list of string, optional (default None)
        basename(s) for output image(s)

    affine: 2D array of shape (4, 4)
        affine matrix for the output images

    concat: bool, optional (default False)
        concatenate all vols into a single film

    prefix: string, optional (default '')
       prefix to be prepended to output file basenames

    ext: string, optional (default ".nii.gz")
        file extension for output images

    Returns
    -------
    string of list of strings, dependending on whether vols is list or
    not, and on whether concat is set or not
        the output image filename(s)

    """
    ...

def save_vol(vol, output_filename=..., output_dir=..., basename=..., concat=..., **kwargs): # -> str:
    """
    Saves a single volume to disk.

    """
    ...

def is_3D(image): # -> bool:
    """Check whether image is 3D"""
    ...

def is_4D(image): # -> bool:
    """Check whether image is 4D
    """
    ...

def get_vox_dims(niimg): # -> list[float]:
    """
    Infer voxel dimensions of a nifti image.

    Parameters
    ----------
    volume: string or nibabel image object, or list of
        input image whose voxel dimensions are to be computed

    Returns
    -------
    list of three floats

    """
    ...

def delete_orientation(imgs, output_dir, output_tag=...): # -> list[Unknown]:
    """Function to delete (corrupt) orientation meta-data in nifti

    XXX TODO: Do this without using fsl

    Parameters
    ----------
    imgs: string or list of string
       path (paths) to 4D (3D) image (images) under inspection

    output_dir: string
       directory to which output will be written

    output_tag: string (optional)
       tag to append output image filename(s) with

    Returns
    -------
    output images

    """
    ...

def do_3Dto4D_merge(threeD_img_filenames, output_dir=..., output_filename=...): # -> FileBasedImage | Nifti1Image | Any | None:
    """
    This function produces a single 4D nifti image from several 3D.

    threeD_img_filenames: list of string
        paths to images to be merged

    Returns
    -------
    returns nifit image object

    """
    ...

def resample_img(input_img_filename, new_vox_dims, output_filename=...):
    """
    Resamples an image to a new resolution

    Parameters
    ----------
    input_img_filename: string
        path to image to be resampled

    new_vox_dims: list or tuple of +ve floats
        new vox dimensions to which the image is to be resampled

    output_filename: string (optional)
        where output image will be written

    Returns
    -------
    output_filename: string
        where the resampled img has been written

    """
    ...

def compute_mean_image(images, output_filename=..., threeD=...): # -> Nifti1Image:
    """Computes the mean of --perhaps differently shaped-- images

    Parameters
    ----------
    images: string/image object, or list (-like) of
        image(s) whose mean we seek

    output_filename: string, optional (default None)
        output file where computed mean image will be written

    Returns
    -------
    mean nifti image object

    """
    ...

def compute_mean_3D_image(images, output_filename=...): # -> Nifti1Image:
    """Computes the mean of --perhaps differently shaped-- images

    Parameters
    ----------
    images: string/image object, or list (-like) of
        image(s) whose mean we seek

    Returns
    -------
    mean nifti image object

    """
    ...

def hard_link(filenames, output_dir): # -> str | list[Unknown]:
    """
    Auxiliary function for hardlinking files to specified output director.

    Parameters
    ----------
    filenames: string, list of strings, or list of such, or list of such,
    or list of such, and so on.
        files to hard-link
    output_dir: string
        output directory to which the files will be hard-linked

    Returns
    -------
    hardlinked_filenames: same structure as the input filenames
        the hard-linked filenames

    """
    ...

def get_basename(x, ext=...): # -> LiteralString:
    ...

def get_basenames(x, ext=...): # -> list[Unknown | str] | None:
    ...

def loaduint8(img, log=...): # -> Nifti1Image | ndarray[Unknown, Unknown]:
    """Load data from file indicated by V into array of unsigned bytes.

    Parameters
    ----------
    img: string, `np.ndarray`, or niimg
        image to be loaded

    Returns
    -------
    uint8_data: `np.ndarray`, if input was ndarray; `nibabel.NiftiImage1' else
        the loaded image (dtype='uint8')

    """
    ...

def ravel_filenames(fs): # -> tuple[str | Unknown | list[Unknown], list[Unknown] | Literal['str']]:
    ...

def unravel_filenames(filenames, file_types): # -> str | list[Unknown]:
    ...

def niigz2nii(ifilename, output_dir=...): # -> list[Unknown] | str:
    """
    Converts .nii.gz to .nii (SPM doesn't support .nii.gz images).

    Parameters
    ----------
    ifilename: string, of list of strings
        input filename of image to be extracted

    output_dir: string, optional (default None)
        output directory to which exctracted file will be written.
        If no value is given, the output will be written in the parent
        directory of ifilename

    Returns
    -------
    ofilename: string
        filename of extracted image

    """
    ...

def isdicom(source_name): # -> bool:
    """
    Determines, by filename extension, whether `source_name` is a DICOM file
    or not.

    Returns
    -------
    True if `source_name` is a DICOM file, False otherwise.

    """
    ...

def dcm2nii(source_names, terminal_output=..., gzip_output=..., anonymize=..., output_dir=..., caching=..., **other_dcm2nii_kwargs): # -> tuple[Unknown, None] | tuple[str | Unknown, None] | tuple[Unknown, Unknown | InterfaceResult]:
    """
    Converts DICOM (dcm) images to Nifti.

    """
    ...

def get_relative_path(ancestor, descendant): # -> Literal[''] | None:
    """
    Get's path of a file or directory (descendant) relative to another
    directory (ancestor). For example get_relative_path("/toto/titi",
    "/toto/titi/tata/test.txt") should return "tata/test.txt"

    """
    ...

def get_shape(img): # -> tuple[Unknown, ...]:
    """
    Computes shape of an image.

    Parameters
    ----------
    img: niim, string, or list of such
        img whose shape is sought-for

    Returns
    -------
    shape: tuple
        shape of image


    """
    ...

def compute_output_voxel_size(img, voxel_size): # -> list[float] | None:
    """
    Computes desired output voxel size of an img.

    """
    ...

def sanitize_fwhm(fwhm): # -> float | list[Unknown]:
    ...

def nii2niigz(input_filename, output_dir=...): # -> list[Unknown] | str:
    """
    Converts .nii to .nii.gz

    Parameters
    ----------

    input_filename: string, of list of strings
        input filename of image to be compressed

    output_dir: string, optional (default None)
        output directory to which compressed file will be written.
        If no value is given, the output will be written in the parent
        directory of input_filename

    Returns
    -------
    output_filename: string
        filename of extracted image

    """
    ...


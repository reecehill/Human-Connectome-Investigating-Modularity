"""
This type stub file was generated by pyright.
"""

"""
Utility functions for single- and mult-subject preprocessing of fMRI

The most useful functions are do_subject_preproc and do_subjects_preproc
"""
T1_TEMPLATE = ...
CSF_TEMPLATE = ...
TISSUES = ...
_logger = ...
_INTERFACE_ERROR_MSG = ...
def do_subject_preproc(subject_data, deleteorient=..., slice_timing=..., slice_order=..., interleaved=..., ref_slice=..., TR=..., TA=..., slice_timing_software=..., realign=..., realign_reslice=..., register_to_mean=..., realign_software=..., coregister=..., coregister_reslice=..., coreg_anat_to_func=..., coregister_software=..., segment=..., normalize=..., epi_template=..., t1_template=..., dartel=..., fwhm=..., anat_fwhm=..., func_write_voxel_sizes=..., anat_write_voxel_sizes=..., smooth_software=..., hardlink_output=..., tsdiffana=..., parent_results_gallery=..., last_stage=..., preproc_undergone=..., prepreproc_undergone=..., caching=..., report=..., **kwargs):
    """
    Function preprocessing data for a single subject.

    Parameters
    ----------
    subject_data: instance of `SubjectData`
        Object containing information about the subject under inspection
        (path to anat image, func image(s), output directory, etc.). Refer
        to documentation of `SubjectData` class

    realign: bool, optional (default True)
        if set, then the functional data will be realigned to correct for
        head-motion.

        subject_data.nipype_results['realign'] will contain the result from
        the spm.Realign node.

    coreg: bool, optional (default True)
        if set, the functional (subject_data.func) and anatomical
        (subject_data.anat) images will be corregistered. If this
        not set, and subject_data.anat is not None, the it is assumed that
        subject_data.func and subject_data.anat have already bean coregistered.

        subject_data.nipype_results['coregister'] will contain the result
        from the spm.Coregister node.

    coreg_anat_to_func: bool, optional (default False)
       if set, then functional data (subject_data.func) will be the reference
       during coregistration. By default the anatomical data
       (subject_data.anat) if the reference, to ensure a precise registration
       (since anatomical data has finer resolution)

    segment: bool, optional (default True)
        if set, then the subject's anatomical (subject_data.anat) image will be
        segmented to produce GM, WM, and CSF compartments (useful for both
        indirect normalization (intra-subject) or DARTEL (inter-subject) alike

        subject_data.nipype_results['segment'] will contain the result from
        the spm.Segment node.

    normalize: bool, optional (default True)
       if set, then the subject_data (subject_data.func and subject_data.anat)
       will will be warped into MNI space

       subject_data.nipype_results['normalize'] will contain the result from
       the spm.Normalize node.

    epi_template: str, otpional (default None)
        the path to a custom functional template.

    t1_template: str, otpional (default None)
        the path to a custom anatomical template.

    fwhm: float or list of 3 floats, optional (default 0)
        FWHM for smoothing the functional data (subject_data.func).
        If normalize is set, then this parameter is based to spm.Normalize,
        else spm.Smooth is used to explicitly smooth the functional data.

        If spm.Smooth is used for smoothing (i.e if normalize if False
        and fwhm is not 0), then subject_data.nipype_results['smooth']
        will contain the result from the spm.Smooth node.

    dartel: bool, optional (default False)
        flag indicating whether DARTEL will be chained with the results
        of this function

    deleteorient: bool (optional)
        if true, then orientation meta-data in all input image files for this
        subject will be stripped-off

    hardlink_output: bool, optional (default True)
        if set, then output files will be hard-linked from the respective
        nipype cache directories, to the subject's immediate output directory
        (subject_data.output_dir)

    report: bool, optional (default True)
        if set, then HTML reports will be generated

    tsdiffana: bool, optional (default True)
        if set, six figures are added to characterize differences between
        consecutive time points in the times series for artefact detection

    See also
    ========
    pypreprocess.purepython_preproc_utils

    """
    ...

def do_subjects_preproc(subject_factory, session_ids=..., report=..., **preproc_params):
    """
    This function does intra-subject preprocessing on a group of subjects.

    Parameters
    ----------
    subject_factory: iterable of `SubjectData` objects
        data for the subjects to be preprocessed

    output_dir: string, optional (default None)
        output directory where all results will be written

    n_jobs: int, optional (default None)
        number of jobs to create; parameter passed to `joblib.Parallel`.
        if N_JOBS is defined in the shell environment, then its value
        is used instead.

    caching: bool, optional (default True)
       if set then caching (joblib, nipype, etc.), will by used where ever
       useful

    dartel: bool, optional (default False)
        flag indicating whether NewSegment + DARTEL should used for
        normalization

    func_write_voxel_sizes: triplet of floats, optional (default None)
        final voxel size of all functional images after normalization

    anat_wrirt_voxel_sizes: triple of floats, optional (default None)
        final voxel size for all anatomical images after normalization

    report: bool, optional (default True)
        if set, then HTML reports will be generated

    dataset_id: string, optional (default None)
        brief description of the dataset being preprocessed
        (e.g "ABIDE", "NYU")

    dataset_description: string, optional (default None)
        longer description of what the dataset being preprocessed is
        all about

    prepreproc_undergone: string, optional (default None)
        preprocessed already undergone by the dataset out-side this function

    preproc_params: parameter-value dict
        optional parameters passed to the \do_subject_preproc` API. See
        the API documentation for details

    matlab_exec: string, optional (default None)
        full path to the MATLAB executable to be used with SPM

    spm_dir: string, optional (default None)
        full path to the SPM installation directory to be used

    Returns
    -------
    preproc_subject_data: list of preprocessed `SubjectData` objects
        each elements is the preprocessed version of the corresponding
        input `SubjectData` object

    """
    ...


"""
This type stub file was generated by pyright.
"""

__all__ = ['ANTsImage', 'copy_image_info', 'set_origin', 'get_origin', 'set_direction', 'get_direction', 'set_spacing', 'get_spacing', 'is_image', 'from_pointer']
_supported_ptypes = ...
_supported_dtypes = ...
_itk_to_npy_map = ...
_npy_to_itk_map = ...
class ANTsImage:
    def __init__(self, pointer) -> None:
        """
        Initialize an ANTsImage.

        Creating an ANTsImage requires a pointer to an underlying ITK image that
        is stored via a nanobind class wrapping a AntsImage struct.

        Arguments
        ---------
        pointer : nb::class
            nanobind class wrapping the struct holding the pointer to the underlying ITK image object

        """
        ...
    
    @property
    def shape(self): # -> tuple[Any, ...]:
        ...
    
    @property
    def physical_shape(self): # -> tuple[Any, ...]:
        ...
    
    @property
    def is_rgb(self): # -> bool:
        ...
    
    @property
    def has_components(self): # -> bool:
        ...
    
    @property
    def components(self): # -> Any | Literal[1]:
        ...
    
    @property
    def pixeltype(self): # -> str:
        ...
    
    @property
    def dtype(self): # -> str:
        ...
    
    @property
    def dimension(self): # -> int:
        ...
    
    @property
    def spacing(self): # -> tuple[Any, ...]:
        """
        Get image spacing

        Returns
        -------
        tuple
        """
        ...
    
    def set_spacing(self, new_spacing): # -> None:
        """
        Set image spacing

        Arguments
        ---------
        new_spacing : tuple or list
            updated spacing for the image.
            should have one value for each dimension

        Returns
        -------
        None
        """
        ...
    
    @property
    def origin(self): # -> tuple[Any, ...]:
        """
        Get image origin

        Returns
        -------
        tuple
        """
        ...
    
    def set_origin(self, new_origin): # -> None:
        """
        Set image origin

        Arguments
        ---------
        new_origin : tuple or list
            updated origin for the image.
            should have one value for each dimension

        Returns
        -------
        None
        """
        ...
    
    @property
    def direction(self): # -> ndarray[Any, dtype[Any]]:
        """
        Get image direction

        Returns
        -------
        tuple
        """
        ...
    
    def set_direction(self, new_direction): # -> None:
        """
        Set image direction

        Arguments
        ---------
        new_direction : numpy.ndarray or tuple or list
            updated direction for the image.
            should have one value for each dimension

        Returns
        -------
        None
        """
        ...
    
    @property
    def orientation(self): # -> None:
        ...
    
    def view(self, single_components=...): # -> ndarray[Any, Any]:
        """
        Geet a numpy array providing direct, shared access to the image data.
        IMPORTANT: If you alter the view, then the underlying image data
        will also be altered.

        Arguments
        ---------
        single_components : boolean (default is False)
            if True, keep the extra component dimension in returned array even
            if image only has one component (i.e. self.has_components == False)

        Returns
        -------
        ndarray
        """
        ...
    
    def numpy(self, single_components=...): # -> NDArray[Any]:
        """
        Get a numpy array copy representing the underlying image data. Altering
        this ndarray will have NO effect on the underlying image data.

        Arguments
        ---------
        single_components : boolean (default is False)
            if True, keep the extra component dimension in returned array even
            if image only has one component (i.e. self.has_components == False)

        Returns
        -------
        ndarray
        """
        ...
    
    def astype(self, dtype):
        """
        Cast & clone an ANTsImage to a given numpy datatype.

        Map:
            uint8   : unsigned char
            uint32  : unsigned int
            float32 : float
            float64 : double
        """
        ...
    
    def to_file(self, filename): # -> None:
        """
        Write the ANTsImage to file

        Args
        ----
        filename : string
            filepath to which the image will be written
        """
        ...
    
    to_filename = ...
    def apply(self, fn):
        """
        Apply an arbitrary function to ANTsImage.

        Args
        ----
        fn : python function or lambda
            function to apply to ENTIRE image at once

        Returns
        -------
        ANTsImage
            image with function applied to it
        """
        ...
    
    def abs(self, axis=...): # -> NDArray[Any]:
        """ Return absolute value of image """
        ...
    
    def mean(self, axis=...): # -> Any:
        """ Return mean along specified axis """
        ...
    
    def median(self, axis=...): # -> floating[Any]:
        """ Return median along specified axis """
        ...
    
    def std(self, axis=...): # -> Any:
        """ Return std along specified axis """
        ...
    
    def sum(self, axis=..., keepdims=...): # -> Any:
        """ Return sum along specified axis """
        ...
    
    def min(self, axis=...): # -> Any:
        """ Return min along specified axis """
        ...
    
    def max(self, axis=...): # -> Any:
        """ Return max along specified axis """
        ...
    
    def range(self, axis=...): # -> tuple[Any, Any]:
        """ Return range tuple along specified axis """
        ...
    
    def argmin(self, axis=...): # -> intp:
        """ Return argmin along specified axis """
        ...
    
    def argmax(self, axis=...): # -> intp:
        """ Return argmax along specified axis """
        ...
    
    def argrange(self, axis=...): # -> tuple[intp, intp] | NDArray[signedinteger[_NBitIntP]]:
        """ Return argrange along specified axis """
        ...
    
    def flatten(self): # -> ndarray[Any, dtype[Any]]:
        """ Flatten image data """
        ...
    
    def nonzero(self): # -> tuple[NDArray[intp], ...]:
        """ Return non-zero indices of image """
        ...
    
    def unique(self, sort=...): # -> NDArray[Any]:
        """ Return unique set of values in image """
        ...
    
    def __add__(self, other):
        ...
    
    __radd__ = ...
    def __sub__(self, other):
        ...
    
    def __rsub__(self, other):
        ...
    
    def __mul__(self, other):
        ...
    
    __rmul__ = ...
    def __truediv__(self, other):
        ...
    
    def __pow__(self, other):
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __getitem__(self, idx): # -> ANTsImage | ndarray[Any, dtype[Any]]:
        ...
    
    def __setitem__(self, idx, value): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __getstate__(self): # -> tuple[NDArray[Any], tuple[Any, ...], tuple[Any, ...], ndarray[Any, dtype[Any]], bool, bool]:
        """
        import ants
        import pickle
        import numpy as np
        from copy import deepcopy
        img = ants.image_read( ants.get_ants_data("r16"))
        img_pickled = pickle.dumps(img)
        img2 = pickle.loads(img_pickled)
        img3 = deepcopy(img)
        img += 10
        print(img.mean(), img3.mean())
        """
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


def copy_image_info(reference, target):
    """
    Copy origin, direction, and spacing from one antsImage to another

    ANTsR function: `antsCopyImageInfo`

    Arguments
    ---------
    reference : ANTsImage
        Image to get values from.
    target  : ANTsImAGE
        Image to copy values to

    Returns
    -------
    ANTsImage
        Target image with reference header information
    """
    ...

def set_origin(image, origin): # -> None:
    """
    Set origin of ANTsImage

    ANTsR function: `antsSetOrigin`
    """
    ...

def get_origin(image):
    """
    Get origin of ANTsImage

    ANTsR function: `antsGetOrigin`
    """
    ...

def set_direction(image, direction): # -> None:
    """
    Set direction of ANTsImage

    ANTsR function: `antsSetDirection`
    """
    ...

def get_direction(image):
    """
    Get direction of ANTsImage

    ANTsR function: `antsGetDirection`
    """
    ...

def set_spacing(image, spacing): # -> None:
    """
    Set spacing of ANTsImage

    ANTsR function: `antsSetSpacing`
    """
    ...

def get_spacing(image):
    """
    Get spacing of ANTsImage

    ANTsR function: `antsGetSpacing`
    """
    ...

def is_image(object): # -> bool:
    ...

def from_pointer(pointer): # -> ANTsImage:
    ...


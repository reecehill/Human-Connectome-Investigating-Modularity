"""
This type stub file was generated by pyright.
"""

WRAP_CACHE = ...
class CloudpickledObjectWrapper:
    def __init__(self, obj, keep_wrapper=...) -> None:
        ...
    
    def __reduce__(self): # -> tuple[(__data: ReadableBuffer, *, fix_imports: bool = True, encoding: str = "ASCII", errors: str = "strict", buffers: Iterable[Any] | None = ()) -> Any, tuple[bytes]] | tuple[(_pickled_object: Unknown, keep_wrapper: Unknown) -> (CallableObjectWrapper | CloudpickledObjectWrapper), tuple[bytes, Literal[True]]]:
        ...
    
    def __getattr__(self, attr): # -> Any:
        ...
    


class CallableObjectWrapper(CloudpickledObjectWrapper):
    def __call__(self, *args, **kwargs):
        ...
    


def wrap_non_picklable_objects(obj, keep_wrapper=...): # -> Type[CloudpickledClassWrapper] | CallableObjectWrapper | CloudpickledObjectWrapper:
    """Wrapper for non-picklable object to use cloudpickle to serialize them.

    Note that this wrapper tends to slow down the serialization process as it
    is done with cloudpickle which is typically slower compared to pickle. The
    proper way to solve serialization issues is to avoid defining functions and
    objects in the main scripts and to implement __reduce__ functions for
    complex classes.
    """
    ...


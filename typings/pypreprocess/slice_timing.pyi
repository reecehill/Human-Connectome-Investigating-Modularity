"""
This type stub file was generated by pyright.
"""

"""
:module: st
:synopsis: module for STC (Slice-Timing Correction) in fMRI data
:author: elvis[dot]dohmatob[at]inria[dot]fr

"""
def get_slice_indices(n_slices, slice_order=..., interleaved=..., return_final=...): # -> NDArray[Any]:
    """Function computes the (unique permutation on) slice indices, consistent
    with the specified slice order.

    Parameters
    ----------
    n_slices: int
        The number of slices there're altogether.

    slice_order: string ('ascending', 'descending'), or array of ints or
                 length n_slices slice order of acquisitions in a TR.
        'ascending': slices were acquired from bottommost to topmost
        'descending': slices were acquired from topmost to bottommost.
        If list of integers, 0-based (i.e Python!) indexing is assumed.

    interleaved: bool (optional, default False)
        Ff set, then slices were acquired in interleaved order, odd-numbered
        slices first, and then even-numbered slices.

    Returns
    -------
    slice_indices: 1D array of length n_slices
        Slice indices consistent with slice order (i.e, slice_indices[k]
        is the corrected index of slice k according to the slice order).

    Raises
    ------
    ValueError
    """
    ...

class STC:
    """Correct differences in slice acquisition times.

    This correction assumes that the data are band-limited (i.e. there is
    no meaningful information present in the data at a frequency higher than
    that of the Nyquist). This assumption is supported by the study of Josephs
    et al (1997, NeuroImage) that obtained event-related data at an
    effective TR of 166 msecs. No physio-logical signal change was present
    at frequencies higher than their typical Nyquist (0.25 HZ).

    Parameters
    ----------
    slice_order: string or array of ints or length n_slices
        slice order of acquisitions in a TR
        'ascending': slices were acquired from bottommost to topmost
        'descending': slices were acquired from topmost to bottommost

    interleaved: bool (optional, default False)
        if set, then slices were acquired in interleaved order,
        odd-numbered slices first, and then even-numbered slices

    ref_slice: int (optional, default 0)
        the slice number to be taken as the reference slice

    verbose: int (optional, default 1)
        verbosity level, set to 0 for no verbose

    Attributes
    ----------
    kernel_: 2D array of shape (n_slices, n_scans)
        sinc kernel for phase shifting the different slices within each TR

    """
    def __init__(self, slice_order=..., interleaved=..., ref_slice=..., verbose=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def fit(self, raw_data=..., n_slices=..., n_scans=..., timing=...): # -> Self@STC:
        """Fits an STC transform that can be later used (using the
        transform(..) method) to re-slice compatible data.

        Each row of the fitter transform is precisely the filter by
        which the signal will be convolved to introduce the phase
        shift in the corresponding slice. It is constructed explicitly
        in the Fourier domain. In the time domain, it can be described
        via the Whittaker-Shannon formula (sinc interpolation).

        Parameters
        ----------
        raw_data: 4D array of shape (n_rows, n_colomns, n_slices,
        n_scans) (optional, default None)
            raw data to fit the transform on. If this is specified, then
            n_slices and n_scans parameters should not be specified.

        n_slices: int (optional, default None)
            number of slices in each 3D volume. If the raw_data parameter
            is specified then this parameter should not be specified

        n_scans: int (optional, default None)
            number of 3D volumes. If the raw_data parameter
            is specified then this parameter should not be specified

        timing: list or tuple of length 2 (optional, default None)
            additional information for sequence timing
            timing[0] = time between slices
            timing[1] = time between last slices and next volume

        Returns
        -------
        self: fitted STC object

        Raises
        ------
        ValueError, in case parameters are insane

        """
        ...
    
    def transform(self, raw_data=...): # -> NDArray[signedinteger[Any]]:
        """
        Applies STC transform to raw data, thereby correcting for time-delay
        in acquisition.

        Parameters
        ----------
        raw_data: 4D array of shape (n_rows, n_columns, n_slices, n_scans),
        optional (default None)
            the data to be ST corrected. raw_data is Not modified in memory;
            another array is returned. If not specified, then the fitted
            data if used in place

        Returns
        -------
        self.output_data_: array of same shape as raw_data
            ST corrected data

        Raises
        ------
        Exception, if fit(...) has not yet been invoked

        """
        ...
    
    def get_last_output_data(self): # -> NDArray[signedinteger[Any]]:
        """Returns the output data computed by the last call to the transform
        method

        Raises
        ------
        Exception, if transform(...) has not yet been invoked

        """
        ...
    


class fMRISTC(STC):
    """
    Slice-Timing Correction for fMRI data.

    Attributes
    ----------
    kernel
    """
    def get_raw_data(self): # -> NDArray[Unknown]:
        ...
    
    def transform(self, raw_data=..., output_dir=..., affine=..., prefix=..., basenames=..., ext=...): # -> str | list[Unknown] | FileBasedImage | list[Nifti1Image] | Nifti1Image | NDArray[signedinteger[Any]]:
        ...
    



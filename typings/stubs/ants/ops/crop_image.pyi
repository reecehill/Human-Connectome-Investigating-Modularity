"""
This type stub file was generated by pyright.
"""

from ants.decorators import image_method

__all__ = ['crop_image', 'crop_indices', 'decrop_image']
@image_method
def crop_image(image, label_image=..., label=...): # -> ANTsImage:
    """
    Use a label image to crop a smaller ANTsImage from within a larger ANTsImage

    ANTsR function: `cropImage`
    
    Arguments
    ---------
    image : ANTsImage  
        image to crop
    
    label_image : ANTsImage
        image with label values. If not supplied, estimated from data.
    
    label : integer   
        the label value to use

    Returns
    -------
    ANTsImage

    Example
    -------
    >>> import ants
    >>> fi = ants.image_read( ants.get_ants_data('r16') )
    >>> cropped = ants.crop_image(fi)
    >>> fi2 = ants.merge_channels([fi,fi])
    >>> cropped2 = ants.crop_image(fi2)
    >>> cropped = ants.crop_image(fi, fi, 100 )
    """
    ...

@image_method
def crop_indices(image, lowerind, upperind): # -> ANTsImage:
    """
    Create a proper ANTsImage sub-image by indexing the image with indices. 
    This is similar to but different from array sub-setting in that 
    the resulting sub-image can be decropped back into its place without 
    having to store its original index locations explicitly.
    
    ANTsR function: `cropIndices`

    Arguments
    ---------
    image : ANTsImage  
        image to crop
    
    lowerind : list/tuple of integers  
        vector of lower index, should be length image dimensionality
    
    upperind : list/tuple of integers
        vector of upper index, should be length image dimensionality
    
    Returns
    -------
    ANTsImage

    Example
    -------
    >>> import ants
    >>> fi = ants.image_read( ants.get_ants_data("r16"))
    >>> cropped = ants.crop_indices( fi, (10,10), (100,100) )
    >>> cropped = ants.smooth_image( cropped, 5 )
    >>> decropped = ants.decrop_image( cropped, fi )
    """
    ...

@image_method
def decrop_image(cropped_image, full_image): # -> ANTsImage:
    """
    The inverse function for `ants.crop_image`

    ANTsR function: `decropImage`
    
    Arguments
    ---------
    cropped_image : ANTsImage
        cropped image

    full_image : ANTsImage
        image in which the cropped image will be put back

    Returns
    -------
    ANTsImage

    Example
    -------
    >>> import ants
    >>> fi = ants.image_read(ants.get_ants_data('r16'))
    >>> mask = ants.get_mask(fi)
    >>> cropped = ants.crop_image(fi, mask, 1)
    >>> cropped = ants.smooth_image(cropped, 1)
    >>> decropped = ants.decrop_image(cropped, fi)
    """
    ...


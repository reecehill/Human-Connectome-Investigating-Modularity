function mapFmriToHighResSurf(pathToFile, subjectId, downsample, type)
% HCP Dataset has fMRI data in 32k nodes per hemisphere only. This function
% therefore maps the 32k node data to the higher-res surface.
% No interpolation is performed, so this is suitable with module numbers/labels only.

close all;
restoredefaultpath;
gcp;
addpath('toolboxes/AlongTractStats');
addpath(genpath('toolboxes/SurfStat'));
addpath('toolboxes/FieldTrip');
ft_defaults;
ft_hastoolbox('gifti',1);
ft_hastoolbox('iso2mesh',1);
ft_hastoolbox('freesurfer',1);
disp('Mapping fMRI (32k) to high-res surface')
disp(['Type: ' num2str(type) ' (' class(type) ')'])

disp('loading labelSRF.mat');
fileToLoad=[pathToFile,'/labelSRF.mat'];
if strcmp(downsample,'yes')
    load(fileToLoad, "nfl","nfr","nvl","nvr"); % not used: "faceROIidL", "faceROIidR", "filenames", "subROIid", "subfilenames"
    hi_faces_L = nfl;
    hi_faces_R = nfr;
    hi_nodes_L = nvl;
    hi_nodes_R = nvr;
elseif strcmp(downsample,'no')
    load(fileToLoad, "glpfaces","grpfaces","glpvertex","grpvertex"); % not used: "faceROIidL", "faceROIidR", "filenames", "subROIid", "subfilenames"
    hi_faces_L = glpfaces;
    hi_faces_R = grpfaces;
    hi_nodes_L = glpvertex;
    hi_nodes_R = grpvertex;
end

fMriValues = ft_read_cifti('../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/100610_tfMRI_MOTOR_level2_hp200_s2_MSMAll.dscalar.nii');
fMriValues_L = fMriValues.x100610_tfmri_motor_level2_lf_hp200_s2_msmall(fMriValues.brainstructure==1);
fMriValues_R = fMriValues.x100610_tfmri_motor_level2_lf_hp200_s2_msmall(fMriValues.brainstructure==2);

surf_32k_L = gifti('../../data/subjects/100610/MNINonLinear/fsaverage_LR32k/100610.L.pial.32k_fs_LR.surf.gii');
surf_32k_R = gifti('../../data/subjects/100610/MNINonLinear/fsaverage_LR32k/100610.R.pial.32k_fs_LR.surf.gii');

%% Loop through each NODE on high-res mesh to find closest NODE on downsampled mesh. Maps fMRI value up.
[hi_fMriValues_L] = loopNodesProjectFromLoToHiRes(surf_32k_L.vertices,hi_nodes_L,fMriValues_L);
[hi_fMriValues_R] = loopNodesProjectFromLoToHiRes(surf_32k_R.vertices,hi_nodes_R,fMriValues_R);

%% Store surface as new gifti
hi_surf_L = surf_32k_L;
hi_surf_L.faces = hi_faces_L;
hi_surf_L.vertices = hi_nodes_L;
hi_surf_R = surf_32k_R;
hi_surf_R.faces = hi_faces_R;
hi_surf_R.vertices = hi_nodes_R;
save(hi_surf_L, '../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/L.surf.gii');
save(hi_surf_R, '../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/R.surf.gii');


%% Store as new cifti
hi_fMriValues = ft_read_cifti('../../data/subjects/100610/MNINonLinear/100610.curvature_MSMAll.164k_fs_LR.dscalar.nii','readdata',false); % copy struct, to replace.
test_hi_fMriValues = struct();
test_hi_fMriValues.dimord = fMriValues.dimord;
test_hi_fMriValues.hdr = fMriValues.hdr;
test_hi_fMriValues.unit = fMriValues.unit;
test_hi_fMriValues.dim = fMriValues.dim;
test_hi_fMriValues.transform = fMriValues.transform;
%test_hi_fMriValues.brainstructurelabel = cell({});
test_hi_fMriValues.x100610_tfmri_motor_level2_lf_hp200_s2_msmall  = [hi_fMriValues_L; hi_fMriValues_R;];
test_hi_fMriValues.brainstructure = ones(size(test_hi_fMriValues.x100610_tfmri_motor_level2_lf_hp200_s2_msmall,1),1);
test_hi_fMriValues.brainstructure(length(hi_fMriValues_L)+1:end)=2;
test_hi_fMriValues.pos=[hi_nodes_L; hi_nodes_R];

ROIfacevert = getROIByFaceVertex(pathToFile,subjectId);
for i=1:size(ROIfacevert,1)
        %test_hi_fMriValues.brainstructurelabel(1,i) = ROIfacevert(i).id;
        %test_hi_fMriValues.brainstructure = [test_hi_fMriValues.brainstructure; ROIfacevert(i).faces(:,1)];
end

%hi_fMriValues.x100610_tfmri_motor_level2_lf_hp200_s2_msmall(isnan(hi_fMriValues.x100610_tfmri_motor_level2_lf_hp200_s2_msmall)) = 0;

ft_write_cifti('../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/100610_tfMRI_MOTOR_level2_hp200_s2_MSMAll', hi_fMriValues, 'parameter', 'x100610_tfmri_motor_level2_lf_hp200_s2_msmall');

%TODO: Sort fMRI into modules, THEN upsample to high res.
%!wb_command -cifti-find-clusters ../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/100610_tfMRI_MOTOR_level2_hp200_s2_MSMAll.dscalar.nii 0.5 -inf inf inf COLUMN ../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/results.dscalar.nii -left-surface ../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/100610_tfMRI_MOTOR_level2_hp200_s2_MSMAll.CORTEX_LEFT.surf.gii -right-surface ../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/100610_tfMRI_MOTOR_level2_hp200_s2_MSMAll.CORTEX_RIGHT.surf.gii -distance 100 -inf
%! wb_command -cifti-find-clusters ../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/100610_tfMRI_MOTOR_level2_hp200_s2_MSMAll.dscalar.nii 3.0 -inf inf inf COLUMN ../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/results_lowres.dscalar.nii -left-surface ../../data/subjects/100610/MNINonLinear/fsaverage_LR32k/100610.L.pial.32k_fs_LR.surf.gii -right-surface ../../data/subjects/100610/MNINonLinear/fsaverage_LR32k/100610.R.pial.32k_fs_LR.surf.gii

close all;
hi_binarised_fMRI = ft_read_cifti('../../data/subjects/100610/MNINonLinear/Results/tfMRI_MOTOR/tfMRI_MOTOR_hp200_s2_level2_MSMAll.feat/HiResAutoGenerated/results.dscalar.nii');
disp(max(hi_binarised_fMRI.dscalar));


%% Plot high-res fMRI
figure;
hold on;
plotsurf(glpvertex, glpfaces, hi_binarised_fMRI.dscalar(hi_binarised_fMRI.brainstructure==1)+1);
plotsurf(grpvertex, grpfaces, hi_binarised_fMRI.dscalar(hi_binarised_fMRI.brainstructure==2)+1);
lighting gouraud;

% fMriValues_L(fMriValues_L > 1) = 1;
% fMriValues_L(fMriValues_L <= 1) = 0;
hi_res_fmri = hi_fMriValues_L(:,1);
hi_res_fmri(hi_res_fmri > 1) = 10;
hi_res_fmri(hi_res_fmri ~= 10) = 0;
hi_res_fmri(isnan(hi_res_fmri)) = 0;
plotsurf(glpvertex, glpfaces, hi_res_fmri);
plotsurf(grpvertex, grpfaces, fMriValues_R > 1);

end
function [hi_nodes_scalar] = loopNodesProjectFromLoToHiRes(lo_nodes,hi_nodes,lo_nodes_scalar)
nHiNodes = size(hi_nodes,1);
nMissingFmriData = 0;
matchedNodes = zeros(nHiNodes,7);
hi_nodes_scalar=zeros(nHiNodes,1);
parfor k=1:nHiNodes
    % Print progress.
    if mod(k/1000,1)==0
        disp(num2str(nHiNodes\k))
    end

    currentnode=hi_nodes(k,:); %current node's coordinates
    %Euclidean distances (vector double) between current face and all mesh centroids
    ds=((currentnode(:,1)-lo_nodes(:,1)).^2 + (currentnode(:,2)-lo_nodes(:,2)).^2 + (currentnode(:,3)-lo_nodes(:,3)).^2 );

    % ID of the mesh centroid that is closest to current face's
    % centroid.
    [distance,closestVertex_id]=min(ds);
    matchedNodes(k,:) = [currentnode lo_nodes(closestVertex_id,:) distance];
    % Replace ID (as above) with the fMRI value of the closest centroid.
    try
        hi_nodes_scalar(k,1)=lo_nodes_scalar(closestVertex_id);
    catch
        % Nearest face is not cortical.
        hi_nodes_scalar(k,1)=NaN;
        nMissingFmriData = nMissingFmriData+1;
    end
end
if(nMissingFmriData>0)
    disp(nMissingFmriData+" vertices with an unknown/missing fMRI data value encountered. They were skipped.");
end
end
function [facesROI] = loopROIAndAssignLabels(ROI_startIndex, ROI_endIndex, faces)
    facesROI={};
    parfor roi=ROI_startIndex:ROI_endIndex
        x=sum(ismember(faces,ROIfacevert(roi).faces(:,1)+1),2);
        ROIfacevert(roi).ffaces=find(x>1); %by Xue
        nbffaces=length(ROIfacevert(roi).ffaces);
        facesROI{roi} = [faces(ROIfacevert(roi).ffaces,:), ones(nbffaces,1)*roi];
    end
    facesROI=cat(1,facesROI{:});
end
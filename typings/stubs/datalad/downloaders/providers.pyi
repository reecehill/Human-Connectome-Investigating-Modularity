"""
This type stub file was generated by pyright.
"""

from datalad.utils import auto_repr

"""Data providers - bind downloaders and credentials together
"""
lgr = ...
AUTHENTICATION_TYPES = ...
@auto_repr
class Provider:
    """Class to bring together url_res, credential, and authenticator
    """
    DOWNLOADERS = ...
    def __init__(self, name, url_res, credential=..., authenticator=..., downloader=...) -> None:
        """
        Parameters
        ----------
        name: str
        url_res: list of str
           Regular expressions
        credential: Credential, optional
        authenticator: Authenticator, optional
        downloader: Downloader, optional

        """
        ...
    
    @property
    def downloader(self): # -> None:
        ...
    
    @staticmethod
    def get_scheme_from_url(url):
        """Given a URL return scheme to decide which downloader class to use
        """
        ...
    
    def get_downloader(self, url, **kwargs):
        """Assigns proper downloader given the URL

        If one is known -- verifies its appropriateness for the given url.
        ATM we do not support multiple types of downloaders per single provider
        """
        ...
    


class Providers:
    """

    So we could provide handling for URLs with corresponding credentials
    and specific (reusable) downloader.  Internally it contains
    Providers and interfaces them based on a given URL.  Each provider
    in turn takes care about associated with it Downloader.
    """
    _DEFAULT_PROVIDERS = ...
    _DS_ROOT = ...
    _CONFIG_TEMPLATE = ...
    def __init__(self, providers=...) -> None:
        """
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __getitem__(self, index):
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    @classmethod
    def from_config_files(cls, files=..., reload=...): # -> Providers:
        """Loads information about related/possible websites requiring authentication from:

        - datalad/downloaders/configs/*.cfg files provided by the codebase
        - current dataset .datalad/providers/
        - User's home directory directory (ie ~/.config/datalad/providers/*.cfg)
        - system-wide datalad installation/config (ie /etc/datalad/providers/*.cfg)

        For sample configs files see datalad/downloaders/configs/providers.cfg

        If files is None, loading is cached between calls.  Specify reload=True to force
        reloading of files from the filesystem.  The class method reset_default_providers
        can also be called to reset the cached providers.
        """
        ...
    
    @classmethod
    def reset_default_providers(cls): # -> None:
        """Resets to None memoized by from_config_files providers
        """
        ...
    
    def reload(self): # -> None:
        ...
    
    def get_provider(self, url, only_nondefault=..., return_all=...): # -> list[Any] | None:
        """Given a URL returns matching provider
        """
        ...
    
    def enter_new(self, url=..., auth_types=..., url_re=..., name=..., credential_name=..., credential_type=...): # -> list[Any] | None:
        """Create new provider and credential config

        If interactive, this will ask the user to enter the details (or confirm
        default choices). A dedicated config file is written at
        <user_config_dir>/providers/<name>.cfg

        Parameters:
        -----------
        url: str or RI
          URL this config is created for
        auth_types: list
          List of authentication types to choose from. First entry becomes
          default. See datalad.downloaders.providers.AUTHENTICATION_TYPES
        url_re: str
          regular expression; Once created, this config will be used for any
          matching URL; defaults to `url`
        name: str
          name for the provider; needs to be unique per user
        credential_name: str
          name for the credential; defaults to the provider's name
        credential_type: str
          credential type to use (key for datalad.downloaders.CREDENTIAL_TYPES)
        """
        ...
    
    def download(self, url, *args, **kwargs):
        ...
    
    def fetch(self, url, *args, **kwargs):
        ...
    
    def get_status(self, url, *args, **kwargs):
        ...
    
    def needs_authentication(self, url): # -> bool | None:
        ...
    



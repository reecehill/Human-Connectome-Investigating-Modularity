"""
This type stub file was generated by pyright.
"""

__all__ = ["CommunityMatching"]
class CommunityMatching:
    """
    A class to represent and analyze temporally-evolving groups.
    """
    def __init__(self, dtype: type = ...) -> None:
        ...
    
    def temporal_ids(self) -> list:
        """
        retrieve the temporal ids of the CommunityMatching.
        Temporal ids are integers that represent the observation time of a partition.
        """
        ...
    
    def slice(self, start: int, end: int) -> object:
        """
        slice the CommunityMatching to keep only a given interval

        :param start: the start of the interval
        :param end: the end of the interval
        :return: a new CommunityMatching object
        """
        ...
    
    def universe_set(self) -> set:
        """
        retrieve the universe set.
        The universe set is the union of all sets in the CommunityMatching

        :return: the universe set
        """
        ...
    
    def groups_ids(self) -> list:
        """
        retrieve the group ids of the CommunityMatching. Each id is of the form 'tid_gid' where tid is the temporal id
        and gid is the group id. The group id is a unique identifier of the group within the temporal id.

        :return: a list of ids of the temporal groups
        """
        ...
    
    def set_temporal_clustering(self, partitions: object) -> None:
        """
        add multiple partitions to the CommunityMatching.

        :param partitions: a list of partitions
        :return: None
        """
        ...
    
    def get_partition_at(self, tid: int) -> list:
        """
        retrieve a partition by id

        :param tid: the id of the partition to retrieve
        :return: the partition corresponding to the given id
        """
        ...
    
    def set_attributes(self, attributes: dict, attr_name: str) -> None:
        """
        set the temporal attributes of the elements in the CommunityMatching

        The temporal attributes must be provided as a dictionary keyed by the element id and valued by a dictionary
        keyed by the temporal id and valued by the attribute value.

        :param attr_name: the name of the attribute
        :param attributes: a dictionary of temporal attributes
        :return: None
        """
        ...
    
    def get_attributes(self, attr_name, of=...) -> dict:
        """
        retrieve the temporal attributes of the CommunityMatching

        :param attr_name: the name of the attribute
        :param of: the element for which to retrieve the attributes. If None, all attributes are returned

        :return: a dictionary keyed by element id and valued by a dictionary keyed by temporal id and valued
                 by the attribute value
        """
        ...
    
    def get_group(self, gid: str) -> set:
        """
        retrieve a group by id

        :param gid: the name of the group to retrieve
        :return: the group corresponding to the given name
        """
        ...
    
    def group_iterator(self, tid: int = ...) -> iter:
        """
        returns an iterator over the groups of the CommunityMatching.
        if a temporal id is provided, it will iterate over the groups observed at that time instant

        :param tid: the temporal id of the groups to iterate over. Default is None
        :return: an iterator over the groups
        """
        ...
    
    def filter_on_group_size(self, min_size: int = ..., max_size: int = ...) -> None:
        """
        remove groups that do not meet the size criteria

        :param min_size: the minimum size of the groups to keep
        :param max_size: the maximum size of the groups to keep
        :return: None
        """
        ...
    
    def get_element_membership(self, element: object) -> list:
        """
        retrieve the list of sets that contain a given element

        :param element: the element for which to retrieve the memberships
        :return: a list of set names that contain the given element
        """
        ...
    
    def get_all_element_memberships(self) -> dict:
        """
        retrieve the list of sets that contain each element in the CommunityMatching

        :return: a dictionary keyed by element and valued by a list of set names that contain the element
        """
        ...
    
    def group_flow(self, target: str, direction: str, min_branch_size: int = ...) -> dict:
        """
        compute the flow of a group w.r.t. a given temporal direction. The flow of a group is the collection of groups
        that contain at least one element of the target group, Returns a dictionary keyed by group name and valued by
        the intersection of the target group and the group corresponding to the key.

        :param target: the name of the group to analyze
        :param direction: the temporal direction in which the group is to be analyzed
        :param min_branch_size: the minimum size of the intersection between the target group and the group
        :return: a dictionary keyed by group name and valued by the intersection of the target group and the group
        """
        ...
    
    def all_flows(self, direction: str, min_branch_size: int = ...) -> dict:
        """
        compute the flow of all groups w.r.t. a given temporal direction

        :param direction: the temporal direction in which the sets are to be analyzed
        :param min_branch_size: the minimum size of a branch to be considered
        :return: a dictionary keyed by group name and valued by the flow of the group
        """
        ...
    



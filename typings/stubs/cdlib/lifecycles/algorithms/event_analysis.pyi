"""
This type stub file was generated by pyright.
"""

from cdlib.lifecycles.classes.matching import CommunityMatching
from cdlib.lifecycles.algorithms.measures import *
from cdlib.lifecycles.utils import *

__all__ = ["analyze_all_flows", "analyze_flow", "events_all", "facets", "event_weights", "event", "event_weights_from_flow"]
def event_weights_from_flow(analyzed_flows: dict, direction: str) -> dict:
    """
    Compute the event weights of the analyzed flows.

    :param analyzed_flows:  the result of the analysis of a flow
    :param direction:  the temporal direction in which the flow was analyzed
    :return: a dictionary containing the event weights
    """
    ...

def events_all(lc: CommunityMatching, direction=...) -> dict:
    """
    Compute all events for a lifecycle object.

    :param lc: a LifeCycle object
    :param direction: the temporal direction in which the events are to be computed

    :return: a dictionary containing the events

    """
    ...

def analyze_all_flows(lc: CommunityMatching, direction: str, min_branch_size: int = ..., attr=...) -> dict:
    """
    Analyze the flow of all sets in a LifeCycle object w.r.t. a given temporal direction.
    See analyze_flow for more details
    :param lc: a LifeCycle object
    :param direction: the temporal direction in which the sets are to be analyzed
    :param min_branch_size: the minimum number of elements that a branch must contain to be considered
    :param attr: the name or list of names of the attribute(s) to analyze. If None, no attribute is analyzed
    :return:
    """
    ...

def analyze_flow(lc: CommunityMatching, target: str, direction: str, min_branch_size=..., attr: str = ...) -> dict:
    """
    Analyze the flow of a set with respect to a given temporal direction.
    Specifically, compute the entropy of the flow, the contribution factor, the difference factor and the set size.
    If one of more attributes are specified via the attr parameter, also compute the entropy of the attribute values,
    the entropy change, the purity and the most common attribute value.
    In case min_branch_size is specified, all branches of the flow that include less than min_branch_size elements are
    discarded.
    :param lc:  a LifeCycle object
    :param target:  the name of the set to analyze
    :param direction:  the temporal direction in which the set is to be analyzed
    :param min_branch_size:  the minimum number of elements that a branch must contain to be considered
    :param attr:  the name or list of names of the attribute(s) to analyze. If None, no attribute is analyzed
    :return: a dictionary containing the analysis results
    """
    ...

def facets(lc: CommunityMatching, target: str, direction: str) -> dict:
    """
    Compute the unicity, identity, and outflow facets of a target set in a lifecycle object.
    Also compute the size of the target set.

    :param lc: a LifeCycle object
    :param target: the name of the target set
    :param direction: the temporal direction in which the flow is to be analyzed
    :return: a dictionary containing the facets
    """
    ...

def event_weights(lc: CommunityMatching, target: str, direction: str) -> dict:
    """
    Compute the event weights of a target set in a lifecycle object.

    :param lc: a LifeCycle object
    :param target: the name of the target set
    :param direction: the temporal direction in which the flow is to be analyzed
    :return: a dictionary containing the event weights
    """
    ...

def event(lc, target, direction=...): # -> dict[str, Tuple[str, float] | dict[Any, Any]]:
    """
    Compute the event type and typicality of a target set in a lifecycle.

    :param lc: lifecycle object
    :param target: name of the target set
    :param direction: temporal direction in which the flow is to be analyzed
    :return: a dictionary containing the event type and scores
    """
    ...


"""
This type stub file was generated by pyright.
"""

from ants.decorators import image_method

"""
Image IO
"""
__all__ = ["image_header_info", "image_clone", "image_read", "dicom_read", "image_write", "make_image", "from_numpy", "from_numpy_like", "new_image_like"]
_supported_pclasses = ...
_supported_ptypes = ...
_supported_ntypes = ...
_unsupported_ptypes = ...
_unsupported_ptype_map = ...
_image_type_map = ...
_ptype_type_map = ...
_ntype_type_map = ...
_npy_to_itk_map = ...
_image_read_dict = ...
def from_numpy(data, origin=..., spacing=..., direction=..., has_components=..., is_rgb=...): # -> ANTsImage:
    """
    Create an ANTsImage object from a numpy array

    ANTsR function: `as.antsImage`

    Arguments
    ---------
    data : ndarray
        image data array

    origin : tuple/list
        image origin

    spacing : tuple/list
        image spacing

    direction : list/ndarray
        image direction

    has_components : boolean
        whether the image has components

    Returns
    -------
    ANTsImage
        image with given data and any given information
    """
    ...

def make_image(imagesize, voxval=..., spacing=..., origin=..., direction=..., has_components=..., pixeltype=...):
    """
    Make an image with given size and voxel value or given a mask and vector

    ANTsR function: `makeImage`

    Arguments
    ---------
    shape : tuple/ANTsImage
        input image size or mask

    voxval : scalar
        input image value or vector, size of mask

    spacing : tuple/list
        image spatial resolution

    origin  : tuple/list
        image spatial origin

    direction : list/ndarray
        direction matrix to convert from index to physical space

    components : boolean
        whether there are components per pixel or not

    pixeltype : float
        data type of image values

    Returns
    -------
    ANTsImage
    """
    ...

def image_header_info(filename): # -> Any:
    """
    Read file info from image header

    ANTsR function: `antsImageHeaderInfo`

    Arguments
    ---------
    filename : string
        name of image file from which info will be read

    Returns
    -------
    dict
    """
    ...

def image_clone(image, pixeltype=...):
    """
    Clone an ANTsImage

    ANTsR function: `antsImageClone`

    Arguments
    ---------
    image : ANTsImage
        image to clone

    dtype : string (optional)
        new datatype for image

    Returns
    -------
    ANTsImage
    """
    ...

def image_read(filename, dimension=..., pixeltype=..., reorient=...): # -> ANTsImage:
    """
    Read an ANTsImage from file

    ANTsR function: `antsImageRead`

    Arguments
    ---------
    filename : string
        Name of the file to read the image from.

    dimension : int
        Number of dimensions of the image read. This need not be the same as
        the dimensions of the image in the file. Allowed values: 2, 3, 4.
        If not provided, the dimension is obtained from the image file

    pixeltype : string
        C++ datatype to be used to represent the pixels read. This datatype
        need not be the same as the datatype used in the file.
        Options: unsigned char, unsigned int, float, double

    reorient : boolean | string
        if True, the image will be reoriented to RPI if it is 3D
        if False, nothing will happen
        if string, this should be the 3-letter orientation to which the
            input image will reoriented if 3D.
        if the image is 2D, this argument is ignored

    Returns
    -------
    ANTsImage
    """
    ...

def dicom_read(directory, pixeltype=...): # -> ANTsImage:
    """
    Read a set of dicom files in a directory into a single ANTsImage.
    The origin of the resulting 3D image will be the origin of the
    first dicom image read.

    Arguments
    ---------
    directory : string
        folder in which all the dicom images exist

    Returns
    -------
    ANTsImage

    Example
    -------
    >>> import ants
    >>> img = ants.dicom_read('~/desktop/dicom-subject/')
    """
    ...

@image_method
def image_write(image, filename, ri=...): # -> None:
    """
    Write an ANTsImage to file

    ANTsR function: `antsImageWrite`

    Arguments
    ---------
    image : ANTsImage
        image to save to file

    filename : string
        name of file to which image will be saved

    ri : boolean
        if True, return image. This allows for using this function in a pipeline:
            >>> img2 = img.smooth_image(2.).image_write(file1, ri=True).threshold_image(0,20).image_write(file2, ri=True)
        if False, do not return image
    """
    ...

@image_method
def clone(image, pixeltype=...): # -> ANTsImage:
    """
    Create a copy of the given ANTsImage with the same data and info, possibly with
    a different data type for the image data. Only supports casting to
    uint8 (unsigned char), uint32 (unsigned int), float32 (float), and float64 (double)

    Arguments
    ---------
    dtype: string (optional)
        if None, the dtype will be the same as the cloned ANTsImage. Otherwise,
        the data will be cast to this type. This can be a numpy type or an ITK
        type.
        Options:
            'unsigned char' or 'uint8',
            'unsigned int' or 'uint32',
            'float' or 'float32',
            'double' or 'float64'

    Returns
    -------
    ANTsImage
    """
    ...

copy = ...
@image_method
def new_image_like(image, data): # -> ANTsImage:
    """
    Create a new ANTsImage with the same header information, but with
    a new image array.

    Arguments
    ---------
    data : ndarray or py::capsule
        New array or pointer for the image.
        It must have the same shape as the current
        image data.

    Returns
    -------
    ANTsImage
    """
    ...

def from_numpy_like(data, image): # -> ANTsImage:
    ...


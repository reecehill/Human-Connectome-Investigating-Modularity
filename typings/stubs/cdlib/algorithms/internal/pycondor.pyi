"""
This type stub file was generated by pyright.
"""

def condor_object(net): # -> dict[str, Any]:
    """Initialization of the condor object. The function gets a network in edgelist format encoded in a pandas
    dataframe. Returns a dictionary with an igraph network, names of the targets and regulators, list of edges,
    modularity, and vertex memberships.
    """
    ...

def bipartite_modularity(B, m, R, T, CO): # -> tuple[int, Any]:
    """Computation of the bipartite modularity as described in ""Modularity and community detection in bipartite
    networks" by Michael J. Barber." """
    ...

def initial_community(CO, method=...):
    """Computation of the initial community structure based on unipartite methods.
    The implementation using bipartite projection is not yet available, but project=False
    performs better modularity-wise (at least with the networks I worked on).
    """
    ...

def brim(CO, deltaQmin=..., c=...):
    """Implementation of the BRIM algorithm to iteratively maximize bipartite modularity.
    Note that c is the maximum number of communities. Dynamic choice of c is not yet implemented.
    """
    ...

def matrices(CO, c): # -> tuple[NDArray[floating[Any]], float, NDArray[float64], Literal[0], dict[Any, int], dict[Any, int]] | tuple[NDArray[floating[Any]], float, NDArray[float64], NDArray[float64], dict[Any, int], dict[Any, int]]:
    """Computation of modularity matrix and initial community matrix."""
    ...

def qscores(CO):
    """Computes the qscores (contribution of a vertex to its community modularity)
    for each vertex in the network."""
    ...


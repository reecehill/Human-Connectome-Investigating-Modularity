"""
This type stub file was generated by pyright.
"""

import sys
from configparser import BasicInterpolation, ConfigParser as SafeConfigParser

if sys.version_info >= (3, 2):
       class BasicInterpolationWithName(BasicInterpolation):
              """Decorator to bring __name__ interpolation back.

        Original handling of __name__ was removed because of
        functional deficiencies: http://bugs.python.org/issue10489

        commit v3.2a4-105-g61f2761
        Author: Lukasz Langa <lukasz@langa.pl>
        Date:	Sun Nov 21 13:41:35 2010 +0000

        Issue #10489: removed broken `__name__` support from configparser

        But should be fine to reincarnate for our use case
        """
              ...
       
       
else:
       ...
logSys = ...
__all__ = ['SafeConfigParserWithIncludes']
class SafeConfigParserWithIncludes(SafeConfigParser):
       """
    Class adds functionality to SafeConfigParser to handle included
    other configuration files (or may be urls, whatever in the future)

    File should have section [includes] and only 2 options implemented
    are 'files_before' and 'files_after' where files are listed 1 per
    line.

    Example::

        [INCLUDES]
        before = 1.conf
                 3.conf

        after = 1.conf

    It is a simple implementation, so just basic care is taken about
    recursion. Includes preserve right order, ie new files are
    inserted to the list of read configs before original, and their
    includes correspondingly so the list should follow the leaves of
    the tree.

    I wasn't sure what would be the right way to implement generic (aka c++
    template) so we could base at any `*configparser` class... so I will
    leave it for the future

    """
       SECTION_NAME = ...
       if sys.version_info >= (3, 2):
              def __init__(self, *args, **kwargs) -> None:
                     ...
              
       def getIncludes(resource, seen=...): # -> list[Unknown]:
              """
            Given 1 config resource returns list of included files
            (recursively) with the original one as well
            Simple loops are taken care about
            """
              ...
       
       getIncludes = ...
       def read(self, filenames): # -> list[str]:
              ...
       



"""
This type stub file was generated by pyright.
"""

""" datalad exceptions
"""
class CommandError(RuntimeError):
    """Thrown if a command call fails.
    """
    def __init__(self, cmd=..., msg=..., code=..., stdout=..., stderr=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class MissingExternalDependency(RuntimeError):
    """External dependency is missing error"""
    def __init__(self, name, ver=..., msg=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class BrokenExternalDependency(RuntimeError):
    """Some particular functionality is broken with this dependency."""
    ...


class DeprecatedError(RuntimeError):
    """To raise whenever a deprecated entirely feature is used"""
    def __init__(self, new=..., version=..., msg=...) -> None:
        """

        Parameters
        ----------
        new : str, optional
          What new construct to use
        version : str, optional
          Since which version is deprecated
        kwargs
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class OutdatedExternalDependency(MissingExternalDependency):
    """External dependency is present but outdated"""
    def __init__(self, name, ver=..., ver_present=..., msg=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class AnnexBatchCommandError(CommandError):
    """Thrown if a batched command to annex fails

    """
    ...


class CommandNotAvailableError(CommandError):
    """Thrown if a command is not available due to certain circumstances.
    """
    ...


class FileNotInAnnexError(IOError, CommandError):
    """Thrown if a file is not under control of git-annex.
    """
    def __init__(self, cmd=..., msg=..., code=..., filename=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class FileInGitError(FileNotInAnnexError):
    """Thrown if a file is not under control of git-annex, but git itself.
    """
    ...


class FileNotInRepositoryError(FileNotInAnnexError):
    """Thrown if a file is not under control of the repository at all.
    """
    ...


class InvalidGitReferenceError(ValueError):
    """Thrown if provided git reference is invalid
    """
    def __init__(self, ref, *args, **kwargs) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class GitIgnoreError(CommandError):
    """Thrown if a path was ignored by a git command due to .gitignore file

    Note, that this might be thrown to indicate what was ignored, while the
    actual operation was partially successful (regarding paths, not in .gitignore)

    Note/Todo:
    in case of a directory being ignored, git returns that directory as the
    ignored path, even if a path within that directory was passed to the command.
    That means, that in such cases the returned path might not match an item you
    passed!
    """
    pattern = ...
    def __init__(self, cmd=..., msg=..., code=..., stdout=..., stderr=..., paths=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class PathOutsideRepositoryError(Exception):
    """Thrown if a path points outside the repository that was requested to
    deal with that path."""
    def __init__(self, file_, repo) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class PathKnownToRepositoryError(Exception):
    """Thrown if file/path is under Git control, and attempted operation
    must not be ran"""
    ...


class MissingBranchError(Exception):
    """Thrown if accessing a repository's branch, that is not available"""
    def __init__(self, repo, branch, available_branches=..., msg=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class InsufficientArgumentsError(ValueError):
    """To be raise instead of `ValueError` when use help output is desired"""
    ...


class NoDatasetArgumentFound(InsufficientArgumentsError):
    """To be raised when expecting having a dataset but none was provided"""
    ...


class NoDatasetFound(NoDatasetArgumentFound):
    """Raised whenever a dataset is required, but none could be determined"""
    ...


class OutOfSpaceError(CommandError):
    """To be raised whenever a command fails if we have no sufficient space

    Example is  annex get command
    """
    def __init__(self, sizemore_msg=..., **kwargs) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class RemoteNotAvailableError(CommandError):
    """To be raised whenever a required remote is not available

    Example is "annex get somefile --from=MyRemote",
    where 'MyRemote' doesn't exist.
    """
    def __init__(self, remote, **kwargs) -> None:
        """

        Parameters
        ----------
        remote: str
          name of the remote
        kwargs:
          arguments from CommandError
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class InvalidInstanceRequestError(RuntimeError):
    """Thrown if a request to create a (flyweight) instance is invalid"""
    def __init__(self, id_, msg=...) -> None:
        ...
    


class InvalidAnnexRepositoryError(RuntimeError):
    """Thrown if AnnexRepo was instantiated on a non-annex and
    without init=True"""
    ...


class DirectModeNoLongerSupportedError(NotImplementedError):
    """direct mode is no longer supported"""
    def __init__(self, repo, msg=...) -> None:
        ...
    


class IncompleteResultsError(RuntimeError):
    """Exception to be raised whenever results are incomplete.

    Any results produced nevertheless are to be passed as `results`,
    and become available via the `results` attribute.
    """
    def __init__(self, results=..., failed=..., msg=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class InstallFailedError(CommandError):
    """Generic exception to raise whenever `install` command fails"""
    ...


class ConnectionOpenFailedError(CommandError):
    """Exception to raise whenever opening a network connection fails"""
    ...


class DownloadError(Exception):
    ...


class IncompleteDownloadError(DownloadError):
    ...


class UnaccountedDownloadError(IncompleteDownloadError):
    ...


class TargetFileAbsent(DownloadError):
    ...


class AccessDeniedError(DownloadError):
    def __init__(self, msg=..., supported_types=..., **kwargs) -> None:
        ...
    


class AnonymousAccessDeniedError(AccessDeniedError):
    ...


class AccessFailedError(DownloadError):
    ...


class UnhandledRedirectError(DownloadError):
    def __init__(self, msg=..., url=..., **kwargs) -> None:
        ...
    


class CrawlerError(Exception):
    ...


class PipelineNotSpecifiedError(CrawlerError):
    ...


class DataLadWarning(Warning):
    ...


class OutdatedExternalDependencyWarning(DataLadWarning):
    """Warning "category" to use to report about outdated"""
    ...



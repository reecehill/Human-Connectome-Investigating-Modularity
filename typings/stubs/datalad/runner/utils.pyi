"""
This type stub file was generated by pyright.
"""

from typing import Optional

"""Utilities required by runner-related functionality

All runner-related code imports from here, so this is a comprehensive declaration
of utility dependencies.
"""
__docformat__ = ...
logger = ...
class LineSplitter:
    """
    A line splitter that handles 'streamed content' and is based
    on python's built-in splitlines().
    """
    def __init__(self, separator: Optional[str] = ..., keep_ends: bool = ...) -> None:
        """
        Create a line splitter that will split lines either on a given
        separator, if 'separator' is not None, or on one of the known line
        endings, if 'separator' is None, the line endings are determined by
        python, they include, for example, "\n", and "\r\n".

        Parameters
        ----------
        separator: Optional[str]
            If not None, the provided separator will be used to split lines.
        keep_ends: bool
            If True, the separator will be contained in the returned lines.
        """
        ...
    
    def process(self, data: str) -> list[str]:
        ...
    
    def finish_processing(self) -> Optional[str]:
        ...
    


class AssemblingDecoderMixIn:
    """ Mix in to safely decode data that is delivered in parts

    This class can be used to decode data that is partially delivered.
    It detects partial encodings and stores the non-decoded data to
    combine it with additional data, that is delivered later,  and
    decodes the combined data.

    Any un-decoded data is stored in the 'remaining_data'-attribute.
    """
    def __init__(self) -> None:
        ...
    
    def decode(self, fd: int, data: bytes, encoding: str) -> str:
        ...
    
    def __del__(self) -> None:
        ...
    



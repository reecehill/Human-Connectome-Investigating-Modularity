"""
This type stub file was generated by pyright.
"""

from typing import Optional
from datalad.dochelpers import borrowdoc
from .runner import WitlessRunner

"""Runner for command execution within the context of a Git repo
"""
lgr = ...
GIT_SSH_COMMAND = ...
class GitRunnerBase:
    """
    Mix-in class for Runners to be used to run git and git annex commands

    Overloads the runner class to check & update GIT_DIR and
    GIT_WORK_TREE environment variables set to the absolute path
    if is defined and is relative path
    """
    _GIT_PATH = ...
    @staticmethod
    def get_git_environ_adjusted(env=...): # -> dict[str, str]:
        """
        Replaces GIT_DIR and GIT_WORK_TREE with absolute paths if relative path and defined
        """
        ...
    


class GitWitlessRunner(WitlessRunner, GitRunnerBase):
    """A WitlessRunner for git and git-annex commands.

    See GitRunnerBase it mixes in for more details
    """
    _CFG_PATHSPEC_FROM_FILE = ...
    @borrowdoc(WitlessRunner)
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def run_on_filelist_chunks(self, cmd, files, *, protocol=..., cwd=..., env=..., pathspec_from_file: Optional[bool] = ..., **kwargs): # -> dict[Any, Any] | _ResultGenerator | None:
        """
        Run a git-style command multiple times if `files` is too long,
        using a non-generator protocol, i.e. a protocol that is not
        derived from `datalad.runner.protocol.GeneratorMixIn`.

        Parameters
        ----------
        cmd : list
          Sequence of program arguments.
        files : list
          List of files.
        protocol : WitlessProtocol, optional
          Protocol class handling interaction with the running process
          (e.g. output capture). A number of pre-crafted classes are
          provided (e.g `KillOutput`, `NoCapture`, `GitProgress`).
        cwd : path-like, optional
          If given, commands are executed with this path as PWD,
          the PWD of the parent process is used otherwise. Overrides
          any `cwd` given to the constructor.
        env : dict, optional
          Environment to be used for command execution. If `cwd`
          was given, 'PWD' in the environment is set to its value.
          This must be a complete environment definition, no values
          from the current environment will be inherited. Overrides
          any `env` given to the constructor.
        pathspec_from_file : bool, optional
          Could be set to True for a `git` command which supports
          --pathspec-from-file and --pathspec-file-nul options. Then pathspecs
          would be passed through a temporary file.
        kwargs :
          Passed to the Protocol class constructor.

        Returns
        -------
        dict
          At minimum there will be keys 'stdout', 'stderr' with
          unicode strings of the cumulative standard output and error
          of the process as values.

        Raises
        ------
        CommandError
          On execution failure (non-zero exit code) this exception is
          raised which provides the command (cmd), stdout, stderr,
          exit code (status), and a message identifying the failed
          command, as properties.
        FileNotFoundError
          When a given executable does not exist.
        """
        ...
    
    def run_on_filelist_chunks_items_(self, cmd, files, *, protocol=..., cwd=..., env=..., pathspec_from_file: Optional[bool] = ..., **kwargs): # -> Generator[Any, Any, None]:
        """
        Run a git-style command multiple times if `files` is too long,
        using a generator protocol, i.e. a protocol that is
        derived from `datalad.runner.protocol.GeneratorMixIn`.

        Parameters
        ----------
        see GitWitlessRunner.run_on_filelist_chunks() for a definition
        of parameters

        Returns
        -------
        Generator that yields output of the cmd
        """
        ...
    



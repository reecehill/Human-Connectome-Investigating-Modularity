function [edgeListRemote,edgeListLocal,lpcentroids,rpcentroids,subCoor]=makeEdgeList(pathToFile,downsample)
clear ft_hastoolbox;
restoredefaultpath;
gcp;
addpath('toolboxes/AlongTractStats');
addpath(genpath('toolboxes/SurfStat'));
addpath('toolboxes/FieldTrip');
ft_defaults;
ft_hastoolbox('spm12',1);
ft_hastoolbox('iso2mesh',1);
ft_hastoolbox('gifti',1);

disp('step3: check if there are fibres connected between node pairs')

%% load the data that was output by loadLabels.m
disp('loading labelSRF.mat');
fileToLoad=[pathToFile,'/labelSRF.mat'];
load(fileToLoad, "glpfaces", "glpvertex", "grpfaces", "grpvertex", "nfl", "nfr", "nvl", "nvr", "subCoor"); % not used: "faceROIidL", "faceROIidR", "filenames", "subROIid", "subfilenames" 

%% load the data that was output by conversion.m
disp('loading trsfmTrk.mat');
fileToLoad=[pathToFile,'/trsfmTrk.mat'];
load(fileToLoad, "trk_type", "trkEP"); %"trk_len": not used
%% get lengths of data

nbTracts=length(trkEP);
%% get centres of triangles
disp('computing centroids');
if strcmp(downsample,'no') % method for no downsample
    lpcentroids=meshcentroid(glpvertex,glpfaces);
    rpcentroids=meshcentroid(grpvertex,grpfaces);
    glpfacesLen=length(glpfaces);
    grpFacesLen=length(grpfaces);
    % nbFaces=size(grpfaces,1)+size(glpfaces,1);
else
    lpcentroids=meshcentroid(nvl,nfl);
    rpcentroids=meshcentroid(nvr,nfr);
    nfllen=length(nfl);
    nfrlen=length(nfr);
    % nbFaces=size(nfr,1)+size(nfl,1);
end

%% make edge list for remote connections
edgeListRemote=zeros(nbTracts,5,'single');
% parfor k=1:nbTracts
tic
lpCentroidsFirstCol = lpcentroids(:,1);
lpCentroidsSecCol = lpcentroids(:,2);
lpCentroidsThirdCol = lpcentroids(:,3);
rpCentroidsFirstCol = rpcentroids(:,1);
rpCentroidsSecCol = rpcentroids(:,2);
rpCentroidsThirdCol = rpcentroids(:,3);
subCoorFirstCol = subCoor(:,1);
subCoorSecCol = subCoor(:,2);
subCoorThirdCol = subCoor(:,3);
fprintf('Building Remote connection elist:\n');
fprintf(['\n' repmat('.',1,round(nbTracts/100000)) '\n\n']);



buildRemote = 1;
if(buildRemote == 1)
    milestones = round(nbTracts * (0:0.1:1));
    startps = trkEP(:, 1:3);
    endps = trkEP(:,4:6);
    parfor k=1:nbTracts    
        if ismember(k,milestones)
            disp((k/nbTracts)*100+"%");
        end
        
        if trk_type(k,3) ~=0
            % This moves the start and end points of the tracts to the
            % nearest centroids on the resampled/original mesh (downsampled dependent). 
            startp=startps(k,:);
            endp=endps(k,:);
            dsl=(lpCentroidsFirstCol-startp(1)).^2 + (lpCentroidsSecCol-startp(2)).^2 + (lpCentroidsThirdCol-startp(3)).^2 ;
            dsr=(rpCentroidsFirstCol-startp(1)).^2 + (rpCentroidsSecCol-startp(2)).^2 + (rpCentroidsThirdCol-startp(3)).^2 ;
            del=(lpCentroidsFirstCol-endp(1)).^2 + (lpCentroidsSecCol-endp(2)).^2 + (lpCentroidsThirdCol-endp(3)).^2 ;
            der=(rpCentroidsFirstCol-endp(1)).^2 + (rpCentroidsSecCol-endp(2)).^2 + (rpCentroidsThirdCol-endp(3)).^2 ;
            dss=(subCoorFirstCol-startp(1)).^2 + (subCoorSecCol-startp(2)).^2 + (subCoorThirdCol-startp(3)).^2 ;
            des =(subCoorFirstCol-endp(1)).^2 + (subCoorSecCol-endp(2)).^2 + (subCoorThirdCol-endp(3)).^2 ;
            
            endpoints=[del;der;des];
            startpoints=[dsl;dsr;dss];
            [C,I]=min([endpoints,startpoints]);
            edgeListRemote(k,:)=[I,sqrt(C),k];             
        end      
    end
    disp("Done building remote edge list");
    toc
    edgeListRemote(edgeListRemote(:,5)==0,:)=[];
end
% columns 1:2 are the edges to which they connect, columns 3:4 are the
% distance from the pial surface, column 5 is the track ID.

%% get local connection -- downsample or no downsample

% adj_local=sparse(nbFaces,nbFaces);
% two method pointing to downsample or no downsample
if strcmp(downsample,'no') % method for no downsample
    tic
    disp("Building left hemisphere's local edges.")
    edgeListLocalLH=zeros(glpfacesLen,2*3,'single');
    milestones = round(glpfacesLen * (0:0.1:1));
    parfor k=1:glpfacesLen
        if ismember(k,milestones)
            disp((k/glpfacesLen)*100+"%");
        end
        [faceNode_1,~]=find(glpfaces==glpfaces(k,1));
        [faceNode_2,~]=find(glpfaces==glpfaces(k,2));
        [faceNode_3,~]=find(glpfaces==glpfaces(k,3));
        faceNodes=[faceNode_1;faceNode_2;faceNode_3];
        [~, I] = unique(faceNodes, 'first');
        tmp = 1:length(faceNodes);
        tmp(I) = [];
        
        % Get the face that shares TWO or more nodes. (i.e, adjacent face - as
        % they're triangular).
        % NOTE: a "face" is defined by its three nodes.
        faceNodes=faceNodes(tmp);
        faceNodes(faceNodes==k)=[];
        
        if length(faceNodes) == 3
            edgeListLocalLH(k,:)=[k, faceNodes(1), k, faceNodes(2), k, faceNodes(3);];
        elseif  length(faceNodes) == 2
            edgeListLocalLH(k,:)=[k, faceNodes(1), k, faceNodes(2), k, 0;];
        elseif length(faceNodes) == 1
            edgeListLocalLH(k,:)=[k, faceNodes(1), k, 0, k, 0;];
        elseif isempty(faceNodes)
            edgeListLocalLH(k,:)=[k, 0, k, 0, k, 0;];
        end 
    end
    
    disp("Done building left hemisphere's local edges.")
    toc

    tic
    disp("Building right hemisphere's local edges.")
    edgeListLocalRH=zeros(grpFacesLen,2*3,'single');
    milestones = round(grpFacesLen * (0:0.1:1));

    parfor k=1:grpFacesLen
        if ismember(k,milestones)
            disp((k/grpFacesLen)*100+"%");
        end
        [faceNode_1,~]=find(grpfaces==grpfaces(k,1));
        [faceNode_2,~]=find(grpfaces==grpfaces(k,2));
        [faceNode_3,~]=find(grpfaces==grpfaces(k,3));
        faceNodes=[faceNode_1;faceNode_2;faceNode_3];
        [~, I] = unique(faceNodes, 'first');
        tmp = 1:length(faceNodes);
        tmp(I) = [];
        faceNodes=faceNodes(tmp);
        faceNodes(faceNodes==k)=[];
        if length(faceNodes) == 3
            edgeListLocalRH(k,:)=[k+glpfacesLen, faceNodes(1), k+glpfacesLen, faceNodes(2), k+glpfacesLen, faceNodes(3);];
        elseif length(faceNodes) == 2
            edgeListLocalRH(k,:)=[k+glpfacesLen, faceNodes(1), k+glpfacesLen, faceNodes(2), k+glpfacesLen, 0;];
        elseif length(faceNodes) == 1
            edgeListLocalRH(k,:)=[k+glpfacesLen, faceNodes(1), k+glpfacesLen, 0, k+glpfacesLen, 0;];
        elseif isempty(faceNodes)
            edgeListLocalRH(k,:)=[k+glpfacesLen, 0, k+glpfacesLen, 0, k+glpfacesLen, 0;];   
        end
        %clear faceNode_1 faceNode_2 faceNode_3 faceNodes I tmp
    end
elseif strcmp(downsample,'yes') % method for downsample data
    disp("Building left hemisphere's local edges.")
    tic
    % Loop through each face of the downsample mesh
    % nfl(1) = [nodeId1, nodeId2, nodeId3];
    edgeListLocalLH=zeros(nfllen,2*3,'single');
    parfor k=1:nfllen
        %x = linear indices of all faces containing a node with face ID == i.
        [faceNode_1,~]=find(nfl==nfl(k,1)); % via current face's first node
        [faceNode_2,~]=find(nfl==nfl(k,2)); % via current face's second node
        [faceNode_3,~]=find(nfl==nfl(k,3)); % via current face's third node

        %x = linear indices of all faces containing a node with ID == i.
        faceNodes=[faceNode_1;faceNode_2;faceNode_3];

        %I = indices of x that contain unique values.
        [~, I] = unique(faceNodes, 'first');
        tmp = 1:length(faceNodes);
        tmp(I) = []; % remove indices of values that are unique. tmp is now a vector of indices of nodeIds that are repeated.
        faceNodes=faceNodes(tmp); % get the nodeIds that are repeated
        faceNodes(faceNodes==k)=[]; % where the node ID is from the current face, exclude it.

        edgeListLocalLH(k,:) = [k, faceNodes(1), k, faceNodes(2), k, faceNodes(3)]; % x(1) = nodeIds that connect to the current face via the face's first node.
       
        %clear faceNode_1 faceNode_2 faceNode_3 faceNodes I tmp
    end
    
    disp("Done building left hemisphere's local edges.")
    toc

    disp("Building right hemisphere's local edges.")
    tic
    edgeListLocalRH=zeros(nfrlen,2*3,'single');
    parfor k=1:nfrlen
        [faceNode_1,~]=find(nfr==nfr(k,1));
        [faceNode_2,~]=find(nfr==nfr(k,2));
        [faceNode_3,~]=find(nfr==nfr(k,3));
        faceNodes=[faceNode_1;faceNode_2;faceNode_3];
        [~, I] = unique(faceNodes, 'first');
        tmp = 1:length(faceNodes);
        tmp(I) = [];
        faceNodes=faceNodes(tmp);
        faceNodes(faceNodes==k)=[];

        edgeListLocalRH(k,:) = [k+nfllen, faceNodes(1)+nfllen, k+nfllen, faceNodes(2)+nfllen, k+nfllen, faceNodes(3)+nfllen]; % x(1) = nodeIds that connect to the current face via the face's first node.

        % clear faceNode_1 faceNode_2 faceNode_3 faceNodes I tmp
    end

    disp("Done building right hemisphere's local edges.")
    toc
end

edgeListLocalLH = sort([ ...
        edgeListLocalLH(:,1), edgeListLocalLH(:,2);
        edgeListLocalLH(:,3), edgeListLocalLH(:,4);
        edgeListLocalLH(:,5), edgeListLocalLH(:,6); ]);
edgeListLocalRH = sort([ ...
        edgeListLocalRH(:,1), edgeListLocalRH(:,2);
        edgeListLocalRH(:,3), edgeListLocalRH(:,4);
        edgeListLocalRH(:,5), edgeListLocalRH(:,6); ]);
edgeListLocal=[...
        edgeListLocalLH;
        edgeListLocalRH;
        ];
edgeListLocal(edgeListLocal(:,2)==0,:)=[];

% adj_local=sparse(edgeListLocal(:,1),edgeListLocal(:,2),ones(length(edgeListLocalLH(:,1)),1),nbFaces,nbFaces);
clear edgeListLocalLH edgeListLocalRH 


end
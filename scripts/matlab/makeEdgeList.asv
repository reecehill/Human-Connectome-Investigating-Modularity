function [edgeListRemote,edgeListLocal,lpcentroids,rpcentroids,subCoor]=makeEdgeList(pathToFile,downsample)
disp("------");
disp("Start of edgeList.m")
tic
disp("------");
clear ft_hastoolbox;
restoredefaultpath;
%gcp;
%addpath('toolboxes/AlongTractStats');
%addpath(genpath('toolboxes/SurfStat'));
addpath('toolboxes/FieldTrip');
ft_defaults;
%ft_hastoolbox('spm12',1);
ft_hastoolbox('iso2mesh',1);
%ft_hastoolbox('gifti',1);

disp('step3: check if there are fibres connected between node pairs')

%% load the data that was output by loadLabels.m
disp('loading labelSRF.mat');
fileToLoad=[pathToFile,'/labelSRF.mat'];
load(fileToLoad, "glpfaces", "glpvertex", "grpfaces", "grpvertex", "nfl", "nfr", "nvl", "nvr", "subCoor"); % not used: "faceROIidL", "faceROIidR", "filenames", "subROIid", "subfilenames"

%% load the data that was output by conversion.m
disp('loading trsfmTrk.mat');
fileToLoad=[pathToFile,'/trsfmTrk.mat'];
load(fileToLoad, "trk_type", "trkEP"); %"trk_len": not used
%% get lengths of data

nbTracts=length(trkEP);
%% get centres of triangles
disp('computing centroids');
if strcmp(downsample,'no') % method for no downsample
    lpcentroids=meshcentroid(glpvertex,glpfaces);
    rpcentroids=meshcentroid(grpvertex,grpfaces);
    glpfacesLen=length(glpfaces);
    grpFacesLen=length(grpfaces);
    % nbFaces=size(grpfaces,1)+size(glpfaces,1);
else
    lpcentroids=meshcentroid(nvl,nfl);
    rpcentroids=meshcentroid(nvr,nfr);
    nfllen=length(nfl);
    nfrlen=length(nfr);
    % nbFaces=size(nfr,1)+size(nfl,1);
end

%% make edge list for remote connections
edgeListRemote=zeros(nbTracts,5,'single');
% parfor k=1:nbTracts
tic
lpCentroidsFirstCol = lpcentroids(:,1);
lpCentroidsSecCol = lpcentroids(:,2);
lpCentroidsThirdCol = lpcentroids(:,3);
rpCentroidsFirstCol = rpcentroids(:,1);
rpCentroidsSecCol = rpcentroids(:,2);
rpCentroidsThirdCol = rpcentroids(:,3);
subCoorFirstCol = subCoor(:,1);
subCoorSecCol = subCoor(:,2);
subCoorThirdCol = subCoor(:,3);
disp('Building Remote connection elist:\n');
buildRemote = 1;
if(buildRemote == 1)

    startps = trkEP(:, 1:3);
    endps = trkEP(:,4:6);
    milestones = round(nbTracts * (0:0.1:1));
    parfor k=1:nbTracts
        if ismember(k,milestones)
            disp((k/nbTracts)*100+"%");
        end

        if trk_type(k,3) ~=0
            % This moves the start and end points of the tracts to the
            % nearest centroids on the resampled/original mesh (downsampled dependent).
            startp=startps(k,:);
            endp=endps(k,:);
            dsl=(lpCentroidsFirstCol-startp(1)).^2 + (lpCentroidsSecCol-startp(2)).^2 + (lpCentroidsThirdCol-startp(3)).^2 ;
            dsr=(rpCentroidsFirstCol-startp(1)).^2 + (rpCentroidsSecCol-startp(2)).^2 + (rpCentroidsThirdCol-startp(3)).^2 ;
            del=(lpCentroidsFirstCol-endp(1)).^2 + (lpCentroidsSecCol-endp(2)).^2 + (lpCentroidsThirdCol-endp(3)).^2 ;
            der=(rpCentroidsFirstCol-endp(1)).^2 + (rpCentroidsSecCol-endp(2)).^2 + (rpCentroidsThirdCol-endp(3)).^2 ;
            dss=(subCoorFirstCol-startp(1)).^2 + (subCoorSecCol-startp(2)).^2 + (subCoorThirdCol-startp(3)).^2 ;
            des =(subCoorFirstCol-endp(1)).^2 + (subCoorSecCol-endp(2)).^2 + (subCoorThirdCol-endp(3)).^2 ;

            endpoints=[del;der;des];
            startpoints=[dsl;dsr;dss];
            [C,I]=min([endpoints,startpoints]);
            edgeListRemote(k,:)=[I,sqrt(C),k];
        end
    end
    disp("Done building remote edge list");
    toc
    edgeListRemote(edgeListRemote(:,5)==0,:)=[];
end
% columns 1:2 are the edges to which they connect, columns 3:4 are the
% distance from the pial surface, column 5 is the track ID.

%% get local connection -- downsample or no downsample

% adj_local=sparse(nbFaces,nbFaces);
% two method pointing to downsample or no downsample
if strcmp(downsample,'no') % method for no downsample
    tic
    disp("Building left hemisphere's local edges.")
    [edgeListLocalLH] = getEdgeListLocal(glpfaces);
    disp("Done building left hemisphere's local edges.")
    toc

    tic
    disp("Building right hemisphere's local edges.")
    [edgeListLocalRH] = getEdgeListLocal(grpfaces);
    disp("Done building right hemisphere's local edges.")
    toc
elseif strcmp(downsample,'yes') % method for downsample data
    disp("Building left hemisphere's local edges.")
    tic
    [edgeListLocalLH] = getEdgeListLocal(nfl);
    disp("Done building left hemisphere's local edges.")
    toc

    disp("Building right hemisphere's local edges.")
    tic
    [edgeListLocalRH] = getEdgeListLocal(nfr);
    disp("Done building right hemisphere's local edges.")
    toc
end

edgeListLocal=[...
    edgeListLocalLH;
    edgeListLocalRH;
    ];

% Should boundary faces be removed completely?
%edgeListLocal(edgeListLocal(:,2)==0)=[];

% adj_local=sparse(edgeListLocal(:,1),edgeListLocal(:,2),ones(length(edgeListLocalLH(:,1)),1),nbFaces,nbFaces);
clear edgeListLocalLH edgeListLocalRH

disp("------");
disp("Finished with edgeList.m")
toc
disp("------");
end
function [edgeListLocal_hemisphere] = getEdgeListLocal(faces)
edgeListLocal_hemisphere = edgeneighbors(faces(:,1:3));
facesList = (1:1:length(faces))';
edgeListLocal_hemisphere = sortrows([ ...
    facesList edgeListLocal_hemisphere(:,1); ...
    facesList edgeListLocal(:,2); ...
    facesList edgeListLocal(:,3) ...
    ],1);
edgeListLocal()
end
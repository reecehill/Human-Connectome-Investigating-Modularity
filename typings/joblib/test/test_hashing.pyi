"""
This type stub file was generated by pyright.
"""

import sys
import random
from joblib.testing import fixture, parametrize, skipif
from joblib.test.common import with_numpy

"""
Test the hashing module.
"""
def unicode(s):
    ...

def time_func(func, *args):
    """ Time function func on *args.
    """
    ...

def relative_time(func1, func2, *args):
    """ Return the relative time between func1 and func2 applied on
        *args.
    """
    ...

class Klass:
    def f(self, x):
        ...
    


class KlassWithCachedMethod:
    def __init__(self, cachedir) -> None:
        ...
    
    def f(self, x):
        ...
    


input_list = ...
@parametrize('obj1', input_list)
@parametrize('obj2', input_list)
def test_trivial_hash(obj1, obj2): # -> None:
    """Smoke test hash on various types."""
    ...

def test_hash_methods(): # -> None:
    ...

@fixture(scope='function')
@with_numpy
def three_np_arrays(): # -> tuple[ndarray[Any, dtype[float64]], ndarray[Any, dtype[float64]], ndarray[Any, dtype[float64]]]:
    ...

def test_hash_numpy_arrays(three_np_arrays): # -> None:
    ...

def test_hash_numpy_dict_of_arrays(three_np_arrays): # -> None:
    ...

@with_numpy
@parametrize('dtype', ['datetime64[s]', 'timedelta64[D]'])
def test_numpy_datetime_array(dtype): # -> None:
    ...

@with_numpy
def test_hash_numpy_noncontiguous(): # -> None:
    ...

@with_numpy
@parametrize('coerce_mmap', [True, False])
def test_hash_memmap(tmpdir, coerce_mmap): # -> None:
    """Check that memmap and arrays hash identically if coerce_mmap is True."""
    ...

@with_numpy
@skipif(sys.platform == 'win32', reason='This test is not stable under windows' ' for some reason')
def test_hash_numpy_performance(): # -> None:
    """ Check the performance of hashing numpy arrays:

        In [22]: a = np.random.random(1000000)

        In [23]: %timeit hashlib.md5(a).hexdigest()
        100 loops, best of 3: 20.7 ms per loop

        In [24]: %timeit hashlib.md5(pickle.dumps(a, protocol=2)).hexdigest()
        1 loops, best of 3: 73.1 ms per loop

        In [25]: %timeit hashlib.md5(cPickle.dumps(a, protocol=2)).hexdigest()
        10 loops, best of 3: 53.9 ms per loop

        In [26]: %timeit hash(a)
        100 loops, best of 3: 20.8 ms per loop
    """
    ...

def test_bound_methods_hash(): # -> None:
    """ Make sure that calling the same method on two different instances
    of the same class does resolve to the same hashes.
    """
    ...

def test_bound_cached_methods_hash(tmpdir): # -> None:
    """ Make sure that calling the same _cached_ method on two different
    instances of the same class does resolve to the same hashes.
    """
    ...

@with_numpy
def test_hash_object_dtype(): # -> None:
    """ Make sure that ndarrays with dtype `object' hash correctly."""
    ...

@with_numpy
def test_numpy_scalar(): # -> None:
    ...

def test_dict_hash(tmpdir): # -> None:
    ...

def test_set_hash(tmpdir): # -> None:
    ...

def test_set_decimal_hash(): # -> None:
    ...

def test_string(): # -> None:
    ...

@with_numpy
def test_numpy_dtype_pickling(): # -> None:
    ...

@parametrize('to_hash,expected', [('This is a string to hash', '71b3f47df22cb19431d85d92d0b230b2'), (u"C'est l\xe9t\xe9", '2d8d189e9b2b0b2e384d93c868c0e576'), ((123456, 54321, -98765), 'e205227dd82250871fa25aa0ec690aa3'), ([random.Random(42).random() for _ in range(5)], 'a11ffad81f9682a7d901e6edc3d16c84'), ({ 'abcde': 123,'sadfas': [-9999, 2, 3] }, 'aeda150553d4bb5c69f0e69d51b0e2ef')])
def test_hashes_stay_the_same(to_hash, expected): # -> None:
    ...

@with_numpy
def test_hashes_are_different_between_c_and_fortran_contiguous_arrays(): # -> None:
    ...

@with_numpy
def test_0d_array(): # -> None:
    ...

@with_numpy
def test_0d_and_1d_array_hashing_is_different(): # -> None:
    ...

@with_numpy
def test_hashes_stay_the_same_with_numpy_objects(): # -> None:
    ...

def test_hashing_pickling_error(): # -> None:
    ...

def test_wrong_hash_name(): # -> None:
    ...


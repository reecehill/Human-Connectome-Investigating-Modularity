"""
This type stub file was generated by pyright.
"""

"""Utils to help with docstrings etc.

Largerly borrowed from PyMVPA (as of upstream/2.4.1-23-g170496e).  Copyright of
the same developers as DataLad
"""
lgr = ...
__add_init2doc = ...
__in_ipython = ...
if __in_ipython:
    __rst_mode = ...
else:
    __rst_mode = ...
__rst_conventions = ...
if __rst_conventions == 'epydoc':
    _rst_sep = ...
    _rst_indentstr = ...
else:
    _rst_sep = ...
    _rst_indentstr = ...
def single_or_plural(single, plural, n, include_count=...):
    """Little helper to spit out single or plural version of a word.
    """
    ...

def handle_docstring(text, polite=...): # -> str:
    """Take care of empty and non existing doc strings."""
    ...

__parameters_str_re = ...
__re_params = ...
__re_spliter1 = ...
__re_spliter2 = ...
def get_docstring_split(f): # -> tuple[None, None, None] | tuple[Unknown | str, list[tuple[str | Any, str | Any]], str]:
    """Given a function, break it up into portions

    Parameters
    ----------
    f : function

    Returns
    -------

    (initial doc string, params (as list of tuples), suffix string)
    """
    ...

def borrowdoc(cls, methodname=...): # -> (method: Unknown) -> Unknown:
    """Return a decorator to borrow docstring from another `cls`.`methodname`

    It should not be used for __init__ methods of classes derived from
    ClassWithCollections since __doc__'s of those are handled by the
    AttributeCollector anyways.

    Common use is to borrow a docstring from the class's method for an
    adapter function (e.g. sphere_searchlight borrows from Searchlight)

    Examples
    --------
    To borrow `__repr__` docstring from parent class `Mapper`, do::

       @borrowdoc(Mapper)
       def __repr__(self):
           ...

    Parameters
    ----------
    cls
      Usually a parent class
    methodname : None or str
      Name of the method from which to borrow.  If None, would use
      the same name as of the decorated method
    """
    ...

def borrowkwargs(cls=..., methodname=..., exclude=...): # -> (method: Unknown) -> Unknown:
    """Return  a decorator which would borrow docstring for ``**kwargs``

    Notes
    -----
    TODO: take care about ``*args`` in  a clever way if those are also present

    Examples
    --------
    In the simplest scenario -- just grab all arguments from parent class::

           @borrowkwargs(A)
           def met1(self, bu, **kwargs):
               pass

    Parameters
    ----------
    methodname : None or str
      Name of the method from which to borrow.  If None, would use
      the same name as of the decorated method
    exclude : None or list of arguments to exclude
      If function does not pass all ``**kwargs``, you would need to list
      those here to be excluded from borrowed docstring
    """
    ...

def exc_str(exc=..., limit=...): # -> str:
    """Enhanced str for exceptions.  Should include original location

    Parameters
    ----------
    Exception to
    """
    ...


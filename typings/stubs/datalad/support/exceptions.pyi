"""
This type stub file was generated by pyright.
"""

from datalad.runner.exception import CommandError

""" datalad exceptions
"""
lgr = ...
class CapturedException:
    """This class represents information about an occurred exception (including
    its traceback), while not holding any references to the actual exception
    object or its traceback, frame references, etc.

    Just keep the textual information for logging or whatever other kind of
    reporting.
    """
    def __init__(self, exc, limit=..., capture_locals=..., level=..., logger=...) -> None:
        """Capture an exception and its traceback for logging.

        Clears the exception's traceback frame references afterwards.

        Parameters
        ----------
        exc: Exception
        limit: int
          Note, that this is limiting the capturing of the exception's
          traceback depth. Formatting for output comes with it's own limit.
        capture_locals: bool
          Whether or not to capture the local context of traceback frames.
        """
        ...
    
    def format_oneline_tb(self, limit=..., include_str=...): # -> str:
        """Format an exception traceback as a one-line summary

        Returns a string of the form [filename:contextname:linenumber, ...].
        If include_str is True (default), this is prepended with the string
        representation of the exception.
        """
        ...
    
    def format_standard(self): # -> str:
        """Returns python's standard formatted traceback output

        Returns
        -------
        str
        """
        ...
    
    def format_short(self): # -> str:
        """Returns a short representation of the original exception

        Form: ExceptionName(exception message)

        Returns
        -------
        str
        """
        ...
    
    def format_with_cause(self): # -> str:
        """Returns a representation of the original exception including the
        underlying causes"""
        ...
    
    @property
    def message(self): # -> str:
        """Returns only the message of the original exception

        Returns
        -------
        str
        """
        ...
    
    @property
    def name(self): # -> str:
        """Returns the class name of the original exception

        Returns
        -------
        str
        """
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


def format_oneline_tb(exc, tb=..., limit=..., include_str=...): # -> str:
    """Format an exception traceback as a one-line summary

    Parameters
    ----------
    exc: Exception
    tb: TracebackException, optional
      If not given, it is generated from the given exception.
    limit: int, optional
      Traceback depth limit. If not given, the config setting
      'datalad.exc.str.tblimit' will be used, or all entries
      are reported.
    include_str: bool
      If set, is True (default), the return value is prepended with a string
    representation of the exception.

    Returns
    -------
    str
      Of format [filename:contextname:linenumber, ...].
    """
    ...

def format_exception_with_cause(e): # -> str:
    """Helper to recursively format an exception with all underlying causes

    For each exception in the chain either the str() of it is taken, or the
    class name of the exception, with the aim to generate a simple and
    comprehensible description that can be used in user-facing messages.
    It is explicitly not aiming to provide a detailed/comprehensive source
    of information for in-depth debugging.

    '-caused by-' is used a separator between exceptions to be human-readable
    while being recognizably different from potential exception payload
    messages.
    """
    ...

class MissingExternalDependency(RuntimeError):
    """External dependency is missing error"""
    def __init__(self, name, ver=..., msg=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class BrokenExternalDependency(RuntimeError):
    """Some particular functionality is broken with this dependency."""
    ...


class DeprecatedError(RuntimeError):
    """To raise whenever a deprecated entirely feature is used"""
    def __init__(self, new=..., version=..., msg=...) -> None:
        """

        Parameters
        ----------
        new : str, optional
          What new construct to use
        version : str, optional
          Since which version is deprecated
        kwargs
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class OutdatedExternalDependency(MissingExternalDependency):
    """External dependency is present but outdated"""
    def __init__(self, name, ver=..., ver_present=..., msg=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class AnnexBatchCommandError(CommandError):
    """Thrown if a batched command to annex fails

    """
    ...


class CommandNotAvailableError(CommandError):
    """Thrown if a command is not available due to certain circumstances.
    """
    ...


class FileNotInAnnexError(IOError, CommandError):
    """Thrown if a file is not under control of git-annex.
    """
    def __init__(self, cmd=..., msg=..., code=..., filename=...) -> None:
        ...
    
    def to_str(self, include_output=...): # -> str:
        ...
    


class FileInGitError(FileNotInAnnexError):
    """Thrown if a file is not under control of git-annex, but git itself.
    """
    ...


class FileNotInRepositoryError(FileNotInAnnexError):
    """Thrown if a file is not under control of the repository at all.
    """
    ...


class InvalidGitReferenceError(ValueError):
    """Thrown if provided git reference is invalid
    """
    def __init__(self, ref, *args, **kwargs) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class GitIgnoreError(CommandError):
    """Thrown if a path was ignored by a git command due to .gitignore file

    Note, that this might be thrown to indicate what was ignored, while the
    actual operation was partially successful (regarding paths, not in .gitignore)

    Note/Todo:
    in case of a directory being ignored, git returns that directory as the
    ignored path, even if a path within that directory was passed to the command.
    That means, that in such cases the returned path might not match an item you
    passed!
    """
    pattern = ...
    def __init__(self, cmd=..., msg=..., code=..., stdout=..., stderr=..., paths=...) -> None:
        ...
    
    def to_str(self, include_output=...): # -> str:
        ...
    


class PathOutsideRepositoryError(Exception):
    """Thrown if a path points outside the repository that was requested to
    deal with that path."""
    def __init__(self, file_, repo) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class PathKnownToRepositoryError(Exception):
    """Thrown if file/path is under Git control, and attempted operation
    must not be ran"""
    ...


class GitError(Exception):
    """ Base class for all package exceptions """
    ...


class NoSuchPathError(GitError, OSError):
    """ Thrown if a path could not be access by the system. """
    ...


class MissingBranchError(Exception):
    """Thrown if accessing a repository's branch, that is not available"""
    def __init__(self, repo, branch, available_branches=..., msg=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class InsufficientArgumentsError(ValueError):
    """To be raise instead of `ValueError` when use help output is desired"""
    ...


class NoDatasetArgumentFound(InsufficientArgumentsError):
    """To be raised when expecting having a dataset but none was provided"""
    ...


class NoDatasetFound(NoDatasetArgumentFound):
    """Raised whenever a dataset is required, but none could be determined"""
    ...


class OutOfSpaceError(CommandError):
    """To be raised whenever a command fails if we have no sufficient space

    Example is  annex get command
    """
    def __init__(self, sizemore_msg=..., **kwargs) -> None:
        ...
    
    def to_str(self, include_output=...): # -> str:
        ...
    


class RemoteNotAvailableError(CommandError):
    """To be raised whenever a required remote is not available

    Example is "annex get somefile --from=MyRemote",
    where 'MyRemote' doesn't exist.
    """
    def __init__(self, remote, **kwargs) -> None:
        """

        Parameters
        ----------
        remote: str
          name of the remote
        kwargs:
          arguments from CommandError
        """
        ...
    
    def to_str(self, include_output=...): # -> str:
        ...
    


class InvalidInstanceRequestError(RuntimeError):
    """Thrown if a request to create a (flyweight) instance is invalid"""
    def __init__(self, id_, msg=...) -> None:
        ...
    


class InvalidGitRepositoryError(GitError):
    """ Thrown if the given repository appears to have an invalid format.  """
    ...


class InvalidAnnexRepositoryError(RuntimeError):
    """Thrown if AnnexRepo was instantiated on a non-annex and
    without init=True"""
    ...


class DirectModeNoLongerSupportedError(NotImplementedError):
    """direct mode is no longer supported"""
    def __init__(self, repo, msg=...) -> None:
        ...
    


class IncompleteResultsError(RuntimeError):
    """Exception to be raised whenever results are incomplete.

    Any results produced nevertheless are to be passed as `results`,
    and become available via the `results` attribute.
    """
    def __init__(self, results=..., failed=..., msg=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class InstallFailedError(CommandError):
    """Generic exception to raise whenever `install` command fails"""
    ...


class ConnectionOpenFailedError(CommandError):
    """Exception to raise whenever opening a network connection fails"""
    ...


class DownloadError(Exception):
    def __init__(self, msg=..., status=..., **kwargs) -> None:
        ...
    


class IncompleteDownloadError(DownloadError):
    ...


class UnaccountedDownloadError(IncompleteDownloadError):
    ...


class TargetFileAbsent(DownloadError):
    ...


class AccessDeniedError(DownloadError):
    def __init__(self, msg=..., supported_types=..., **kwargs) -> None:
        ...
    


class AnonymousAccessDeniedError(AccessDeniedError):
    ...


class AccessPermissionExpiredError(AccessDeniedError):
    """To raise when there is a belief that it is due to expiration of a credential

    which we might possibly be able to refresh, like in the case of CompositeCredential
    """
    ...


class AccessFailedError(DownloadError):
    ...


class UnhandledRedirectError(DownloadError):
    def __init__(self, msg=..., url=..., **kwargs) -> None:
        ...
    


class CrawlerError(Exception):
    ...


class PipelineNotSpecifiedError(CrawlerError):
    ...


class DataLadWarning(Warning):
    ...


class OutdatedExternalDependencyWarning(DataLadWarning):
    """Warning "category" to use to report about outdated"""
    ...



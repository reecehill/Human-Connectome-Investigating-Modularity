%%
%  coordsIn3d = zeros(size(allFunctionalData.modules.threeDimensions),3);
%             % Create matrix where each element is a vector of coordinates.
%             coordsIn3d(sub2ind(size(coordsIn3d),xSubsection,ySubsection,zSubsection))=allFunctionalData.nodes.mni152(activeNodes);

%% INSTRUCTIONS
% Anatomical, DWI, fMRI data are used in this script.

ISO2MESH_TEMP='C:\Users\Reece\Documents\tempiso2mesh';
try
    %% Initialise.
    addpath('C:\Users\Reece\AppData\Roaming\MathWorks\MATLAB Add-Ons\Collections\Iso2Mesh');
    addpath(genpath('C:\Users\Reece\AppData\Roaming\MathWorks\MATLAB Add-Ons\Toolboxes\Brain Connectivity Toolbox'));
    addpath(genpath('C:\Users\Reece\AppData\Roaming\MathWorks\MATLAB Add-Ons\Collections\SurfStat'));
    close all;
    clearvars -except pathToParticipants subject allBrainData roiStructuralData optimalGamma;
    pathToParticipants = 'D:\Dissertation\Participants';
    subject = 'sub-002';
    surf = struct('nodes',[],'faces',[],'edges',[],'regions',[],'holes',[]);
    modules = [struct('nodeIds',[],'activeVoxels',0,'surfaceAreas',[],'centreOfMasses',[],'shapes',{},'surf',[surf])];
    nodes = [struct('ids',[],'labels',[],'moduleIds',[],'mni152',[],'threeDimensions',[],'shape',[])];
    baseStruct.adjacencyMatrix = [];
    baseStruct.nodes = nodes;
    baseStruct.modules = modules;
    baseStruct.surf = surf;
    if(exist("allBrainData",'var') && ~isempty(allBrainData.leftHemisphere.surf.faces) && ~isempty(allBrainData.rightHemisphere.surf.faces) && ~isempty(allBrainData.leftHemisphere.optimalGamma) && ~isempty(allBrainData.rightHemisphere.optimalGamma))
        tempStore.leftStructuralModules = allBrainData.leftHemisphere.surf.faces(:,4);
        tempStore.rightStructuralModules = allBrainData.rightHemisphere.surf.faces(:,4);
        tempStore.leftOptimalGamma = allBrainData.leftHemisphere.optimalGamma;
        tempStore.rightOptimalGamma = allBrainData.rightHemisphere.optimalGamma;
    end
    allStructuralData = baseStruct;
    roiStructuralData = baseStruct;
    allFunctionalData = baseStruct;
    roiFunctionalData = baseStruct;
    allBrainData = baseStruct;
    roiBrainData = baseStruct;
    clearvars surf modules nodes baseStruct
    %% Parameters
    roiLabels = ["lh.precentral.label"]; % only supports single values for now.
    showTicksPer = 500;
    viewSliceOfAllFmriModules = 0;

    %% Load external parameters
    adj_matrix = matfile([pathToParticipants '\' subject '\matrices.mat']).adj_matrix;
    load([pathToParticipants '\' subject '\labelSRF.mat'],"nvl","nvr","nfl","nfr","glpfaces","glpvertex","grpfaces","grpvertex","faceROIidL","faceROIidR","subROIid","filenames","subfilenames");
    load([pathToParticipants '\' subject '\edgeList.mat'], "lpcentroids","rpcentroids");
    load([pathToParticipants '\' subject '\MNIcoor.mat'],"Coor_MNI152","Coor_MNI305");
    load([pathToParticipants '\' subject '\1stlevel\fMRIModules_0002.mat']);

    %% TODO: Automate getting transformation matrices.
    % To get tkrRAS coordinates from row,col,slice of fmri data:
    % inv(mri.hdr.tkrvox2ras)*rmmissing(Reg)*[R A S 1]'

    % where tMov is generated by:
    % mri_info --vox2ras-tkr ${SUBJECTS_DIR}/sub-002/data/func/task-HcpMotor_acq-ap_bold.nii
    tMov = [  -1.50000    0.00000    0.00000   96.00000;
        0.00000    0.00000    1.50000  -69.75000;
        0.00000   -1.50000    0.00000   96.00000;
        0.00000    0.00000    0.00000    1.00000;];

    % where REG was obtained by:
    %  tkregister2 --mov "${SUBJECTS_DIR}/sub-002/data/func/sartask-HcpMotor_acq-ap_bold.nii" --s sub-002/data/  --noedit --regheader --reg "${SUBJECTS_DIR}/sub-002/data/func/register6.dat" --targ "${SUBJECTS_DIR}/sub-002/data/bert/mri/orig.mgz"
    Reg = table2array(readtable([pathToParticipants '/' subject ,'/data/func/register6.dat']));
    %Reg = table2array(readtable([pathToParticipants '/' subject ,'/data/func/register.dat']));

    %% Integrate/handle labels into dataset.
    allBrainData.leftHemisphere.labels.ids = faceROIidL;
    allBrainData.rightHemisphere.labels.ids = faceROIidR;
    allBrainData.leftHemisphere.labels.names = filenames(faceROIidL);
    allBrainData.rightHemisphere.labels.names = filenames(faceROIidR+34);
    
    %% All Anatomical data
    allBrainData.surf.nodes_mni152 = Coor_MNI152;
    % Left hemisphere
    allBrainData.leftHemisphere.surf.faces = nfl;
    %allBrainData.leftHemisphere.surf.faces = glpfaces;
    allBrainData.leftHemisphere.surf.nodes = nvl;
    %allBrainData.leftHemisphere.surf.nodes = glpvertex;

    % Right hemisphere
    allBrainData.rightHemisphere.surf.faces = nfr;
    %allBrainData.rightHemisphere.surf.faces = grpfaces;
    allBrainData.rightHemisphere.surf.nodes = nvr;
    %allBrainData.rightHemisphere.surf.nodes = grpvertex;

    % Both hemispheres make a whole.
    allBrainData.surf.faces_mni152 = Coor_MNI152;
    [allBrainData.surf.nodes, allBrainData.surf.faces] = mergesurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces,allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces);
    allBrainData.surf.edges = meshedge(allBrainData.surf.faces);
    
    % Visualise the merged brain.
    figure;
    title("Whole brain");
    subtitle("Left and right hemisphere merged before any computation.");
    plotmesh(allBrainData.surf.nodes, allBrainData.surf.faces);
    clearvars glpfaces grpfaces nvl nvr nfl nfr glpvertex grpvertex
    
    
    %% All Structural data
    % All structure data
    allStructuralData.adjacencyMatrix = adj_matrix;
    clearvars adj_matrix;
    
    %% ROI Anatomical Data
    % Add region of interest data (face IDs and centroids).
    roiStructuralData.leftHemisphere.surf.faceIdsOfAllBrain = find(ismember(allBrainData.leftHemisphere.labels.names,roiLabels));
    roiStructuralData.rightHemisphere.surf.faceIdsOfAllBrain = find(ismember(allBrainData.rightHemisphere.labels.names,roiLabels));
    roiStructuralData.faceIdsOfAllBrain = [roiStructuralData.leftHemisphere.surf.faceIdsOfAllBrain;roiStructuralData.rightHemisphere.surf.faceIdsOfAllBrain];
    roiStructuralData.surf.faces_mni152 = allBrainData.surf.faces_mni152(roiStructuralData.faceIdsOfAllBrain,:);
    roiStructuralData.leftHemisphere.surf.centroids = lpcentroids(roiStructuralData.leftHemisphere.surf.faceIdsOfAllBrain,:);
    roiStructuralData.rightHemisphere.surf.centroids = rpcentroids(roiStructuralData.rightHemisphere.surf.faceIdsOfAllBrain,:);
    roiStructuralData.leftHemisphere.adjacencyMatrix = allStructuralData.adjacencyMatrix(roiStructuralData.leftHemisphere.surf.faceIdsOfAllBrain,roiStructuralData.leftHemisphere.surf.faceIdsOfAllBrain);
    roiStructuralData.rightHemisphere.adjacencyMatrix = allStructuralData.adjacencyMatrix(roiStructuralData.rightHemisphere.surf.faceIdsOfAllBrain,roiStructuralData.rightHemisphere.surf.faceIdsOfAllBrain);
    clearvars rpcentroids lpcentroids Coor_MNI305 Coor_MNI152;
    % --------
    % ----
    % --------
    


    %% ROI Structural Data
    if(exist('tempStore','var'))
        if(~isempty(tempStore.leftStructuralModules) && ~isempty(tempStore.rightStructuralModules) && ~isempty(tempStore.leftOptimalGamma) && ~isempty(tempStore.rightOptimalGamma))
        allBrainData.leftHemisphere.surf.faces(roiStructuralData.leftHemisphere.surf.faceIdsOfAllBrain,4) = tempStore.leftStructuralModules;
        allBrainData.rightHemisphere.surf.faces(roiStructuralData.rightHemisphere.surf.faceIdsOfAllBrain,4) = tempStore.rightStructuralModules;
        allBrainData.leftHemisphere.optimalGamma = tempStore.leftOptimalGamma;
        allBrainData.rightHemisphere.optimalGamma = tempStore.rightOptimalGamma;
        else
            disp('Please clear workspace and try again.')
        end

    else
        disp('Sorting DWI data into modules...');
        if(size(roiStructuralData.leftHemisphere.adjacencyMatrix,1) > 0)
        [allBrainData.leftHemisphere.surf.faces(roiStructuralData.leftHemisphere.surf.faceIdsOfAllBrain,4), allBrainData.leftHemisphere.optimalGamma, ~] = sortIntoModules(roiStructuralData.leftHemisphere.adjacencyMatrix, 0.78, 0.78);
        else
            allBrainData.leftHemisphere.optimalGamma = [];
        end
        if(size(roiStructuralData.rightHemisphere.adjacencyMatrix,1) > 0)
        [allBrainData.rightHemisphere.surf.faces(roiStructuralData.rightHemisphere.surf.faceIdsOfAllBrain,4), allBrainData.rightHemisphere.optimalGamma, ~] = sortIntoModules(roiStructuralData.rightHemisphere.adjacencyMatrix, 0.78, 0.78);
                else
            allBrainData.rightHemisphere.optimalGamma = [];
        end
    end

    %% All fMRI data
    % Note: the nodes of the fMRI are NOT in the same space, so we cannot
    % just reassign a colour as seen for structural. Instead, we build a
    % surface (for 3D visualisation) and also project each point onto the anatomical surface.
    allFunctionalData.surf.faces_mni152 = funcXyzCoordinatesmm;
    allFunctionalData.moduleIds = fmriModules(:); % for each node, list its module id.
    xSubsection = 1:1:size(fmriModules,1);
    ySubsection = 1:1:size(fmriModules,2);
    zSubsection = 1:1:size(fmriModules,3);
    opt.keepratio = 1;
    opt.radbound = 10;
    opt.distbound = 0.2;

    %% Convert all fMRI activations into surfaces.
    % Note that fMRI data is not split into hemispheres.
    [allFunctionalData.surf.nodes,allFunctionalData.surf.faces,allFunctionalData.surf.regions,allFunctionalData.surf.holes]= ...
        vol2surf(fmriModules,xSubsection,ySubsection,zSubsection,opt,0,'simplify',1);
    
    % Transform allFmriNodes CRS (column-row-slice) coordinates to tkRAS coordinates: https://surfer.nmr.mgh.harvard.edu/fswiki/CoordinateSystems.
    colOfOnes = ones(size(allFunctionalData.surf.nodes,1),1);
    allFunctionalData.surf.nodes = [allFunctionalData.surf.nodes colOfOnes];
    allFunctionalData.surf.nodes = transpose(inv(rmmissing(Reg)) * tMov * allFunctionalData.surf.nodes'); %allFmriNodes are now represented in mm rather than indice.
    allFunctionalData.surf.nodes(:,4) = []; %remove column of ones;
    figure;
    title('fMRI modules determined by meshing all surfaces at once.');
    hold on;
    plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces,'FaceAlpha',0.1,'FaceColor',[0.2 0.2 0.2],'EdgeColor','none');
    plotsurf(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces,'FaceAlpha',0.1,'FaceColor',[0.2 0.2 0.2],'EdgeColor','none');
    plotsurf(allFunctionalData.surf.nodes,allFunctionalData.surf.faces);
    

    %% Now, mesh individual fMRI modules.
    figure(99);
    hold on;
    title('fMRI modules determined by meshing surfaces one at a time.');
    plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces,'FaceAlpha',0.1,'FaceColor',[0.2 0.2 0.2],'EdgeColor','none');
    plotsurf(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces,'FaceAlpha',0.1,'FaceColor',[0.2 0.2 0.2],'EdgeColor','none');
    
    for moduleIndex=1:1:max(fmriModules,[],'all')
        % Get nodeIds that belong to current module (starting from 1, not 0).
        allFunctionalData.modules(moduleIndex).nodeIds = find(allFunctionalData.moduleIds == moduleIndex); % the ids of all nodes with a module.

        % Build a binary volume for this module.
        % The threeDimensions variable is a MxNxP matrix of modules, its
        % not binary.
        allFunctionalData.modules(moduleIndex).volume = fmriModules==moduleIndex;

        % View slice of each fMRI module.
        if(viewSliceOfAllFmriModules ==1)
            figure;
            title(['fMRI Module: ' num2str(moduleIndex)]);
            subtitle("Note that this is pre-transformation into tkRAS coordinates.");
            sliceViewer(allFunctionalData.modules(moduleIndex).volume);
        end

        % Volume to surface.
        [allFunctionalData.modules(moduleIndex).surf.nodes,allFunctionalData.modules(moduleIndex).surf.faces,allFunctionalData.modules(moduleIndex).surf.regions,allFunctionalData.modules(moduleIndex).surf.holes]= ...
            vol2surf(allFunctionalData.modules(moduleIndex).volume,xSubsection,ySubsection,zSubsection,opt,0,'simplify',1);

        % Transform fMRI coordinates into tkRAS coordinates (in aparc+aseg space).
        % As the surface works on CRS (column-row-slice) indices,
        % we transform each surface independently.
        colOfOnes = ones(size(allFunctionalData.modules(moduleIndex).surf.nodes,1),1);
        allFunctionalData.modules(moduleIndex).surf.nodes = [allFunctionalData.modules(moduleIndex).surf.nodes colOfOnes];
        allFunctionalData.modules(moduleIndex).surf.nodes = transpose(inv(rmmissing(Reg)) * tMov * allFunctionalData.modules(moduleIndex).surf.nodes'); %nodes are now represented in mm rather than indice.
        allFunctionalData.modules(moduleIndex).surf.nodes(:,4) = moduleIndex; %remove column of ones, replace with moduleIndex for colouring.;

        % For the whole-fMRI mesh, change colour of module.
        %allFunctionalData.surf.faces(allFunctionalData.modules(moduleIndex).nodeIds,4) = moduleIndex;

        % View generated surface for each fMRI module.
        figure(99)
        plotsurf(allFunctionalData.modules(moduleIndex).surf.nodes,allFunctionalData.modules(moduleIndex).surf.faces);
    end
    clearvars fmriModules intensitiesPerVoxel xyzCoordinatesmm colOfOnes;

    %% Map fMRI activation clusters surface to combined anatomical surface.
    allBrainData.leftHemisphere.surfaceNorm = nodesurfnorm(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces(:,1:3));
    allBrainData.rightHemisphere.surfaceNorm = nodesurfnorm(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces(:,1:3));

    % Compute a vector that maps nodes to adjacent faces
    [allBrainData.leftHemisphere.nodesToFaces,~,~]=neighborelem(allBrainData.leftHemisphere.surf.faces(:,1:3),length(allBrainData.leftHemisphere.surf.nodes));
    [allBrainData.rightHemisphere.nodesToFaces,~,~]=neighborelem(allBrainData.rightHemisphere.surf.faces(:,1:3),length(allBrainData.rightHemisphere.surf.nodes));

    % Independently map each cluster to the surface.
    for moduleIndex=1:1:size(allFunctionalData.modules,2)
        % Generate point cloud of fMRI nodes to find closest DWI nodes.
        pointCloudVar = pointCloud(allFunctionalData.modules(moduleIndex).surf.nodes(:,1:3));

        % For each of the fMRI points, find the nearest node in the left
        % and right hemisphere. Whichever is closest, project it to that one.
        [distanceToLeftSurface,closestLeftSurfaceNodeIds] = dist2surf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surfaceNorm,pointCloudVar.Location);
        [distanceToRightSurface,closestRightSurfaceNodeIds] = dist2surf(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surfaceNorm,pointCloudVar.Location);

        for fmriPoint=1:size(pointCloudVar.Location,1)
            if(distanceToLeftSurface(fmriPoint)<distanceToRightSurface(fmriPoint))
                % Find face IDs that are closest to activate nodes.
                neighbouringFacesOfNode = allBrainData.leftHemisphere.nodesToFaces(closestLeftSurfaceNodeIds(fmriPoint));
                allNeighbouringFaces = unique(cat(2,neighbouringFacesOfNode{:}));

                % Change colour of neighbouring faces.
                allBrainData.leftHemisphere.surf.faces(allNeighbouringFaces,5) = moduleIndex;
            elseif(distanceToLeftSurface(fmriPoint)>distanceToRightSurface(fmriPoint))
                % Find face IDs that are closest to activate nodes.
                neighbouringFacesOfNode = allBrainData.rightHemisphere.nodesToFaces(closestRightSurfaceNodeIds(fmriPoint));
                allNeighbouringFaces = unique(cat(2,neighbouringFacesOfNode{:}));

                % Change colour of neighbouring faces.
                allBrainData.rightHemisphere.surf.faces(allNeighbouringFaces,5) = moduleIndex;
            else
                input('There was an fmri point that was equidistant to both left and right hemispheres...');
                exit;
            end
        end
        
    end
    
    % To illustrate faces that have overlap with DWI and fMRI, we add a 6th
    % column of ones where there is overlap.
    leftFacesWithOverlap = intersect(find(~allBrainData.leftHemisphere.surf.faces(:,4) == 0),find(~allBrainData.leftHemisphere.surf.faces(:,5) == 0));
    allBrainData.leftHemisphere.surf.faces(leftFacesWithOverlap,6) = 1;

    rightFacesWithOverlap = intersect(find(~allBrainData.rightHemisphere.surf.faces(:,4) == 0),find(~allBrainData.rightHemisphere.surf.faces(:,5) == 0));
    allBrainData.rightHemisphere.surf.faces(rightFacesWithOverlap,6) = 1;

    %% VISUALISATIONS
    % Visualise fMRI activations on the anatomical surface.
    figure;
    hold on;
    title('fMRI activations projected to nearest surface triangle.');
    plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces(find(allBrainData.leftHemisphere.surf.faces(:,5)==0),[1:3,5]),'FaceAlpha',0.7,'FaceColor',[0.9 0.9 0.9],'EdgeAlpha',0.2,'EdgeColor',[0.5 0.5 0.5],'DisplayName','Left hemisphere');    
    plotsurf(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces(find(allBrainData.rightHemisphere.surf.faces(:,5)==0),[1:3,5]),'FaceAlpha',0.7,'FaceColor',[0.9 0.9 0.9],'EdgeAlpha',0.2,'EdgeColor',[0.5 0.5 0.5],'DisplayName','Right hemisphere');    
    
    plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces(find(allBrainData.leftHemisphere.surf.faces(:,5)>0),[1:3,5]),'FaceAlpha',0.8,'EdgeAlpha',0.7,'FaceColor','interp','DisplayName','fMRI Activations/Modules');
    plotsurf(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces(find(allBrainData.rightHemisphere.surf.faces(:,5)>0),[1:3,5]),'FaceAlpha',0.8,'EdgeAlpha',0.7,'FaceColor','interp','DisplayName','fMRI Activations/Modules');
    
    lightangle(100,0);
    lightangle(0,0);
    lightangle(100,100);
    view(0,90);
    legend;
   
   
    figure;
    title("Structural modules of the left precentral gyrus");
    hold on;
    camlight;
    lightangle(-45,30);
    lightangle(100,0);
    lightangle(0,0);
    lightangle(100,100);
    plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces(find(allBrainData.leftHemisphere.surf.faces(:,4) == 0),1:4),'DisplayName','Left hemisphere');
    plotsurf(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces(find(allBrainData.leftHemisphere.surf.faces(:,4) == 0),1:4),'DisplayName','Right hemisphere');
    plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces(find(allBrainData.leftHemisphere.surf.faces(:,4) > 0),1:4),'DisplayName',['Structural module']);
    plotsurf(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces(find(allBrainData.rightHemisphere.surf.faces(:,4) > 0),1:4),'DisplayName',['Structural module']);
    legend;
    view(190,25);
    clearvars tempStoreOfOptimalGamma tempStoreOfStrucModuleIds;

        figure;
    title("Faces of overlap between function and structure");
    hold on;
    plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces(find(allBrainData.leftHemisphere.surf.faces(:,6) == 0),1:6),'DisplayName','Left hemisphere');
    plotsurf(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces(find(allBrainData.leftHemisphere.surf.faces(:,6) == 0),1:6),'DisplayName','Right hemisphere');
    plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces(find(allBrainData.leftHemisphere.surf.faces(:,6) > 0),1:6),'DisplayName',['fMRI + Structure']);
    plotsurf(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces(find(allBrainData.rightHemisphere.surf.faces(:,6) > 0),1:4),'DisplayName',['fMRI + Structure']);
    legend;
    view(190,25);
    clearvars tempStoreOfOptimalGamma tempStoreOfStrucModuleIds;


    % Visualise ROIs
    figure;
    title("ROI centroids plotted on left and right hemisphere");
    hold on;
    plotsurf(roiStructuralData.leftHemisphere.surf.nodes,roiStructuralData.leftHemisphere.surf.faces,'FaceAlpha',0.5,'EdgeAlpha',0.5,'DisplayName','Left hemisphere');
    plotsurf(roiStructuralData.rightHemisphere.surf.nodes,roiStructuralData.rightHemisphere.surf.faces,'FaceAlpha',0.5,'EdgeAlpha',0.5,'DisplayName','Right hemisphere');
    plot3(roiBrainData.leftHemisphere.surf.centroids(:,1),roiBrainData.leftHemisphere.surf.centroids(:,2),roiBrainData.leftHemisphere.surf.centroids(:,3),'r.','DisplayName','Left ROI nodes');
    plot3(roiBrainData.rightHemisphere.surf.centroids(:,1),roiBrainData.rightHemisphere.surf.centroids(:,2),roiBrainData.rightHemisphere.surf.centroids(:,3),'r.','DisplayName','Right ROI nodes');

    %% COARSE PLOTTING OF ROI
    figure;
    hold on;
    title('Entire brain surface with nodes of ROI')
    plotsurf(allBrainData.leftHemisphere.surf.nodes,allBrainData.leftHemisphere.surf.faces,'FaceAlpha',0.5,'EdgeAlpha',0.5,'DisplayName','Left hemisphere');
    plotsurf(allBrainData.rightHemisphere.surf.nodes,allBrainData.rightHemisphere.surf.faces,'FaceAlpha',0.5,'EdgeAlpha',0.5,'DisplayName','Right hemisphere');
    plot3(allBrainData.leftHemisphere.roi.centroids(:,1),allBrainData.leftHemisphere.roi.centroids(:,2),allBrainData.leftHemisphere.roi.centroids(:,3),'Color','#d1d1d1','LineStyle','none','Marker','.','DisplayName','Left ROI nodes (inherited)');
    plot3(allBrainData.rightHemisphere.roi.centroids(:,1),allBrainData.rightHemisphere.roi.centroids(:,2),allBrainData.rightHemisphere.roi.centroids(:,3),'Color','#d1d1d1','LineStyle','none','Marker','.','DisplayName','Left ROI nodes (inherited)');


    figure2 = figure;
    plottedLabels = allStructuralData.nodes.labels(1:showTicksPer:end);
    spy(adj_matrix);
    rectangle('Position',[min(roiStructuralData.nodes.ids) min(roiStructuralData.nodes.ids) length(roiStructuralData.nodes.ids) length(roiStructuralData.nodes.ids)], 'EdgeColor','red')
    xticks(1:showTicksPer:length(allStructuralData.nodes.labels));
    yticks(1:showTicksPer:length(allStructuralData.nodes.labels));
    xticklabels(plottedLabels);
    yticklabels(plottedLabels);
    title('Global network - connectivity matrix')
    subtitle('Square shows local connectivity (figure 2)')

    figure;
    plottedLabels = roiStructuralData.nodes.labels(1:showTicksPer:end);
    spy(roiStructuralData.adjacencyMatrix);
    xticks(1:showTicksPer:length(roiStructuralData.nodes.labels));
    yticks(1:showTicksPer:length(roiStructuralData.nodes.labels));
    xticklabels(plottedLabels);
    yticklabels(plottedLabels);
    title('Local network (lSF-lSP) - connectivity matrix')



    nStrucModulesToPlot = max(roiStructuralData.nodes.moduleIds,[],'all') - unique(roiStructuralData.nodes.moduleIds);
    nFuncModulesToPlot = max(allFunctionalData.moduleIds,[],'all') - unique(allFunctionalData.moduleIds);
    nThingsToPlot = length(nStrucModulesToPlot)+length(nFuncModulesToPlot);
    strucColorMap = colormap(jet(nThingsToPlot));
    funcColorMap = flipud(strucColorMap);


    figure('Name',"Shape Map");
    subtitle('DWI- and fMRI-derived "modules" in MNI152 space');
    title(['Single subject (#02) | (fMRI: FWE<0.05, k=0) | gamma=' num2str(optimalGamma) ' | % cover: ' num2str(percentageCover) '%']);
    xlabel('Right->Left');
    ylabel('Inferior->Superior');
    zlabel('Anterior-Posterior');
    legend on;
    hold on;

    %plot(allBrainData.nodes.shape,'FaceColor',[0.8 0.15 0.15],'FaceAlpha',0.6,'BackFaceLighting','lit','FaceLighting','gouraud','EdgeColor','none','DisplayName','Brain from mask');
    %plot(allStructuralData.modules.shape,'FaceColor',[0.1 0.8 0.1],'FaceAlpha',0.6,'EdgeColor','none','DisplayName','Brain from structural nodes','AmbientStrength',0.5,'AlignVertexCenters','on','FaceLighting','flat');
    plot(roiBrainData.modules.shape,'FaceColor',[0.1 0.8 0.8],'FaceAlpha',0.6,'EdgeColor','none','DisplayName','ROI from mask','AmbientStrength',0.5,'AlignVertexCenters','on','FaceLighting','flat');
    plot3(roiStructuralData.modules.centreOfMasses(:,1),roiStructuralData.modules.centreOfMasses(:,2),roiStructuralData.modules.centreOfMasses(:,3),'*','MarkerSize',10,'Color','g','DisplayName','Struc COM');

    plot3(roiBrainData.modules.centreOfMasses(:,1),roiBrainData.modules.centreOfMasses(:,2),roiBrainData.modules.centreOfMasses(:,3),'*','MarkerSize',10,'Color','r','DisplayName','ROIMask COM');


    %% Visualise overlap
    figure(6);
    subtitle(['DWI- and fMRI-derived "modules" in MNI152 space']);
    title(['Single subject (#02) | (fMRI: FWE<0.05, k=0) | gamma=' num2str(optimalGamma)]);
    xlabel('Right->Left');
    ylabel('Inferior->Superior');
    zlabel('Anterior-Posterior');
    legend on;
    hold on;


 sound(sin(1:1000)); pause(0.2); sound(sin(1:1000));

catch ME
    sound(tan(1:1000)); pause(0.2); sound(tan(1:1000));
    rethrow(ME);
end

"""
This type stub file was generated by pyright.
"""

"""

"""
lgr = ...
class GitCredentialInterface:
    """Frontend to `git credential`
    """
    def __init__(self, protocol=..., host=..., path=..., username=..., password=..., url=..., repo=...) -> None:
        """
        protocol: str, optional
          The protocol over which the credential will be used (e.g., https).
        host: str, optional
          The remote hostname for a network credential. This includes the port
          number if one was specified (e.g., "example.com:8088").
        path: str, optional
          The path with which the credential will be used. E.g., for accessing
          a remote https repository, this will be the repository’s path on the
          server.
        username: str, optional
          The credential’s username, if we already have one (e.g., from a URL,
          the configuration, the user, or from a previously run helper).
        password: str, optional
          The credential’s password, if we are asking it to be stored.
        url: str, optional
          When this special attribute is read by git credential as 'url', the
          value is parsed as a URL and treated as if its constituent parts were
          read (e.g., url=https://example.com would behave as if
          protocol=https and host=example.com had been provided).
          This can help callers avoid parsing URLs themselves.

          Note that specifying a protocol is mandatory and if the URL doesn’t
          specify a hostname (e.g., "cert:///path/to/file") the credential will
          contain a hostname attribute whose value is an empty string.

          Components which are missing from the URL (e.g., there is no username
          in the example above) will be left unset.
        repo : GitRepo, optional
            Specify to process credentials in the context of a particular
            repository (e.g. to consider a repository-local credential helper
            configuration).
        """
        ...
    
    def __getitem__(self, key):
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def fill(self): # -> Self:
        ...
    
    def approve(self): # -> None:
        ...
    
    def reject(self): # -> None:
        ...
    



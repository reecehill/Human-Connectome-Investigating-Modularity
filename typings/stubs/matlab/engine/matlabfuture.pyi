"""
This type stub file was generated by pyright.
"""

from matlab.engine import BaseFuture

"""
MatlabFuture: The class name of a future handle returned by starting MATLAB
asynchronously.

An instance of MatlabFuture is returned from the invocation of starting MATLAB
asyncronously.  The future handle serves as a placeholder of the actual MATLAB
instance, the the future handle can be returned immediately.  The future handle
can be used to interrupt the launch of MATLAB, check the completion status and
get the real MATLAB Engine object.

"""
class MatlabFuture(BaseFuture):
    """
    A MatlabFuture object is used to hold the future handle of a MATLAB
    instance.  The MatlabFuture object should be only created by calling
    start_matlab or connect_matlab asynchronously.
    """
    def __init__(self, **kargs) -> None:
        ...
    
    def result(self, timeout=...):
        """
        Get the MatlabEngine instance.

        Parameter
            timeout: Number of seconds to wait before returning.  By default,
            this function will wait until the MatlabEngine instance is ready.

        Returns
            An object of MatlabEngine class.

        Raises
            CancelledError - if the launch or connection of MATLAB is cancelled already.
            TimeoutError - if the MATLAB instance is not ready in timeout seconds.
        """
        ...
    
    def cancel(self): # -> bool:
        """
        Cancel the launch of or connection to a MATLAB instance.

        Returns
            bool - True if the action can be cancelled; False otherwise.
        """
        ...
    
    def cancelled(self): # -> bool:
        """
        Obtain the cancellation status of the asynchronous launch or connection
         to a MATLAB instance.

        Returns
            bool - True if the execution was cancelled; False otherwise.
        """
        ...
    
    def done(self): # -> Any | Literal[True]:
        """
        Obtain the completion status of the asynchronous launch or connection
         to a MATLAB instance.

        Returns
            bool - True if the action is finished; False otherwise.
        """
        ...
    
    def __del__(self): # -> None:
        ...
    



"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping
from platformdirs import AppDirs

"""Common configuration options

"""
__docformat__ = ...
lgr = ...
dirs = AppDirs("datalad", "datalad.org")
class _NotGiven:
    ...


class _ConfigDefinitions(Mapping):
    """A container for configuration definitions

    This class implements the parts of the dictionary interface
    required to work as a drop-in replacement for the legacy
    data structure used for configuration definitions prior
    DataLad 0.16.

    .. note::

      This is an internal helper that may change at any time without
      prior notice.
    """
    def __init__(self) -> None:
        ...
    
    def get(self, *args): # -> _ConfigDefinition | None:
        ...
    
    def keys(self): # -> dict_keys[str, _ConfigDefinition]:
        ...
    
    def items(self): # -> dict_items[str, _ConfigDefinition]:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __getitem__(self, key): # -> _ConfigDefinition:
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __iter__(self): # -> Iterator[str]:
        ...
    
    def __len__(self): # -> int:
        ...
    


class _ConfigDefinition(Mapping):
    """A single configuration definition

    This class implements the parts of the dictionary interface
    required to work as a drop-in replacement for the legacy
    data structure used for a configuration definition prior
    DataLad 0.16.

    Moreover, it implement lazy evaluation of default values,
    when a 'default_fn' property is given.

    .. note::

      This is an internal helper that may change at any time without
      prior notice.
    """
    def __init__(self, **kwargs) -> None:
        ...
    
    def __getitem__(self, prop):
        ...
    
    def __setitem__(self, key, val): # -> None:
        ...
    
    def get(self, prop, default=...): # -> None:
        ...
    
    def __contains__(self, prop): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __iter__(self): # -> Iterator[str]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def update(self, *args, **kwargs): # -> None:
        ...
    


def get_default_ssh(): # -> str:
    ...

subst_rule_docs = ...
_definitions = ...
definitions = ...

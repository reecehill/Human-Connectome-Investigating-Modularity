"""
This type stub file was generated by pyright.
"""

from ..base import File, InputMultiPath, OutputMultiPath, TraitedSpec, traits
from .base import FSCommand, FSCommandOpenMP, FSTraitedSpec, FSTraitedSpecOpenMP

"""Provides interfaces to various longitudinal commands provided by freesurfer
"""
__docformat__ = ...
iflogger = ...
class RobustTemplateInputSpec(FSTraitedSpecOpenMP):
    in_files = InputMultiPath(File(exists=True), mandatory=True, argstr="--mov %s", desc="input movable volumes to be aligned to common mean/median " "template")
    out_file = ...
    auto_detect_sensitivity = ...
    outlier_sensitivity = ...
    transform_outputs = ...
    intensity_scaling = ...
    scaled_intensity_outputs = ...
    subsample_threshold = ...
    average_metric = ...
    initial_timepoint = ...
    fixed_timepoint = ...
    no_iteration = ...
    initial_transforms = InputMultiPath(File(exists=True), argstr="--ixforms %s", desc="use initial transforms (lta) on source")
    in_intensity_scales = InputMultiPath(File(exists=True), argstr="--iscalein %s", desc="use initial intensity scales")


class RobustTemplateOutputSpec(TraitedSpec):
    out_file = ...
    transform_outputs = OutputMultiPath(File(exists=True), desc="output xform files from moving to template")
    scaled_intensity_outputs = OutputMultiPath(File(exists=True), desc="output final intensity scales")


class RobustTemplate(FSCommandOpenMP):
    """construct an unbiased robust template for longitudinal volumes

    Examples
    --------
    >>> from nipype.interfaces.freesurfer import RobustTemplate
    >>> template = RobustTemplate()
    >>> template.inputs.in_files = ['structural.nii', 'functional.nii']
    >>> template.inputs.auto_detect_sensitivity = True
    >>> template.inputs.average_metric = 'mean'
    >>> template.inputs.initial_timepoint = 1
    >>> template.inputs.fixed_timepoint = True
    >>> template.inputs.no_iteration = True
    >>> template.inputs.subsample_threshold = 200
    >>> template.cmdline  #doctest:
    'mri_robust_template --satit --average 0 --fixtp --mov structural.nii functional.nii --inittp 1 --noit --template mri_robust_template_out.mgz --subsample 200'
    >>> template.inputs.out_file = 'T1.nii'
    >>> template.cmdline  #doctest:
    'mri_robust_template --satit --average 0 --fixtp --mov structural.nii functional.nii --inittp 1 --noit --template T1.nii --subsample 200'

    >>> template.inputs.transform_outputs = ['structural.lta',
    ...                                      'functional.lta']
    >>> template.inputs.scaled_intensity_outputs = ['structural-iscale.txt',
    ...                                             'functional-iscale.txt']
    >>> template.cmdline    #doctest: +ELLIPSIS
    'mri_robust_template --satit --average 0 --fixtp --mov structural.nii functional.nii --inittp 1 --noit --template T1.nii --iscaleout .../structural-iscale.txt .../functional-iscale.txt --subsample 200 --lta .../structural.lta .../functional.lta'

    >>> template.inputs.transform_outputs = True
    >>> template.inputs.scaled_intensity_outputs = True
    >>> template.cmdline    #doctest: +ELLIPSIS
    'mri_robust_template --satit --average 0 --fixtp --mov structural.nii functional.nii --inittp 1 --noit --template T1.nii --iscaleout .../is1.txt .../is2.txt --subsample 200 --lta .../tp1.lta .../tp2.lta'

    >>> template.run()  #doctest: +SKIP

    References
    ----------
    [https://surfer.nmr.mgh.harvard.edu/fswiki/mri_robust_template]

    """
    _cmd = ...
    input_spec = RobustTemplateInputSpec
    output_spec = RobustTemplateOutputSpec


class FuseSegmentationsInputSpec(FSTraitedSpec):
    subject_id = ...
    timepoints = InputMultiPath(traits.String(), mandatory=True, argstr="%s", position=-2, desc="subject_ids or timepoints to be processed")
    out_file = ...
    in_segmentations = InputMultiPath(File(exists=True), argstr="-a %s", mandatory=True, desc="name of aseg file to use (default: aseg.mgz) \
        must include the aseg files for all the given timepoints")
    in_segmentations_noCC = InputMultiPath(File(exists=True), argstr="-c %s", mandatory=True, desc="name of aseg file w/o CC labels (default: aseg.auto_noCCseg.mgz) \
        must include the corresponding file for all the given timepoints")
    in_norms = InputMultiPath(File(exists=True), argstr="-n %s", mandatory=True, desc="-n <filename>  - name of norm file to use (default: norm.mgs) \
        must include the corresponding norm file for all given timepoints \
        as well as for the current subject")


class FuseSegmentationsOutputSpec(TraitedSpec):
    out_file = ...


class FuseSegmentations(FSCommand):
    """fuse segmentations together from multiple timepoints

    Examples
    --------
    >>> from nipype.interfaces.freesurfer import FuseSegmentations
    >>> fuse = FuseSegmentations()
    >>> fuse.inputs.subject_id = 'tp.long.A.template'
    >>> fuse.inputs.timepoints = ['tp1', 'tp2']
    >>> fuse.inputs.out_file = 'aseg.fused.mgz'
    >>> fuse.inputs.in_segmentations = ['aseg.mgz', 'aseg.mgz']
    >>> fuse.inputs.in_segmentations_noCC = ['aseg.mgz', 'aseg.mgz']
    >>> fuse.inputs.in_norms = ['norm.mgz', 'norm.mgz', 'norm.mgz']
    >>> fuse.cmdline
    'mri_fuse_segmentations -n norm.mgz -a aseg.mgz -c aseg.mgz tp.long.A.template tp1 tp2'
    """
    _cmd = ...
    input_spec = FuseSegmentationsInputSpec
    output_spec = FuseSegmentationsOutputSpec



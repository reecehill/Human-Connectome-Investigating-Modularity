"""
This type stub file was generated by pyright.
"""

import threading

"""
Utilities to keep track of performance
"""
proflogger = ...
resource_monitor = ...
_MB = ...
class ResourceMonitorMock:
    """A mock class to use when the monitor is disabled."""
    @property
    def fname(self): # -> None:
        """Get/set the internal filename"""
        ...
    
    def __init__(self, pid, freq=..., fname=..., python=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> dict[Unknown, Unknown]:
        ...
    


class ResourceMonitor(threading.Thread):
    """
    A ``Thread`` to monitor a specific PID with a certain frequence
    to a file
    """
    def __init__(self, pid, freq=..., fname=..., python=...) -> None:
        ...
    
    @property
    def fname(self): # -> str:
        """Get/set the internal filename"""
        ...
    
    def stop(self): # -> dict[str, None]:
        """Stop monitoring."""
        ...
    
    def run(self): # -> None:
        """Core monitoring function, called by start()"""
        ...
    


def log_nodes_cb(node, status): # -> None:
    """Function to record node run statistics to a log file as json
    dictionaries

    Parameters
    ----------
    node : nipype.pipeline.engine.Node
        the node being logged
    status : string
        acceptable values are 'start', 'end'; otherwise it is
        considered and error

    Returns
    -------
    None
        this function does not return any values, it logs the node
        status info to the callback logger
    """
    ...

def get_system_total_memory_gb(): # -> float:
    """
    Function to get the total RAM of the running system in GB
    """
    ...

def get_max_resources_used(pid, mem_mb, num_threads, pyfunc=...): # -> tuple[Unknown, Unknown]:
    """
    Function to get the RAM and threads utilized by a given process

    Parameters
    ----------
    pid : integer
        the process ID of process to profile
    mem_mb : float
        the high memory watermark so far during process execution (in MB)
    num_threads: int
        the high thread watermark so far during process execution

    Returns
    -------
    mem_mb : float
        the new high memory watermark of process (MB)
    num_threads : float
        the new high thread watermark of process
    """
    ...


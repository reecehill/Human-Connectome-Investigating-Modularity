"""
This type stub file was generated by pyright.
"""

from . import base
from .base import with_phil

"""
    Implements high-level operations for attributes.

    Provides the AttributeManager class, available on high-level objects
    as <obj>.attrs.
"""
class AttributeManager(base.MutableMappingHDF5, base.CommonStateObject):
    """
        Allows dictionary-style access to an HDF5 object's attributes.

        These are created exclusively by the library and are available as
        a Python attribute at <object>.attrs

        Like Group objects, attributes provide a minimal dictionary-
        style interface.  Anything which can be reasonably converted to a
        Numpy array or Numpy scalar can be stored.

        Attributes are automatically created on assignment with the
        syntax <obj>.attrs[name] = value, with the HDF5 type automatically
        deduced from the value.  Existing attributes are overwritten.

        To modify an existing attribute while preserving its type, use the
        method modify().  To specify an attribute of a particular type and
        shape, use create().
    """
    def __init__(self, parent) -> None:
        """ Private constructor.
        """
        ...
    
    @with_phil
    def __getitem__(self, name): # -> Empty | ndarray[Any, dtype[Any]] | ndarray[Any, dtype[float64]]:
        """ Read the value of an attribute.
        """
        ...
    
    def get_id(self, name):
        """Get a low-level AttrID object for the named attribute.
        """
        ...
    
    @with_phil
    def __setitem__(self, name, value): # -> None:
        """ Set a new attribute, overwriting any existing attribute.

        The type and shape of the attribute are determined from the data.  To
        use a specific type or shape, or to preserve the type of an attribute,
        use the methods create() and modify().
        """
        ...
    
    @with_phil
    def __delitem__(self, name): # -> None:
        """ Delete an attribute (which must already exist). """
        ...
    
    def create(self, name, data, shape=..., dtype=...): # -> None:
        """ Create a new attribute, overwriting any existing attribute.

        name
            Name of the new attribute (required)
        data
            An array to initialize the attribute (required)
        shape
            Shape of the attribute.  Overrides data.shape if both are
            given, in which case the total number of points must be unchanged.
        dtype
            Data type of the attribute.  Overrides data.dtype if both
            are given.
        """
        ...
    
    def modify(self, name, value): # -> None:
        """ Change the value of an attribute while preserving its type.

        Differs from __setitem__ in that if the attribute already exists, its
        type is preserved.  This can be very useful for interacting with
        externally generated files.

        If the attribute doesn't exist, it will be automatically created.
        """
        ...
    
    @with_phil
    def __len__(self):
        """ Number of attributes attached to the object. """
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        """ Iterate over the names of attributes. """
        ...
    
    @with_phil
    def __contains__(self, name):
        """ Determine if an attribute exists, by name. """
        ...
    
    @with_phil
    def __repr__(self): # -> str:
        ...
    



"""
This type stub file was generated by pyright.
"""

import logging
from .utils import optional_args

__all__ = ['ColorFormatter']
def mbasename(s):
    """Custom function to include directory name if filename is too common

    Also strip .py at the end
    """
    ...

class TraceBack:
    """Customized traceback to be included in debug messages
    """
    def __init__(self, limit=..., collide=...) -> None:
        """Initialize TraceBack metric

        Parameters
        ----------
        collide : bool
          if True then prefix common with previous invocation gets
          replaced with ...
        """
        ...
    
    def __call__(self): # -> str:
        ...
    


class MemoryInfo:
    def __init__(self) -> None:
        ...
    
    def __call__(self): # -> LiteralString | str:
        """Return utilization of virtual memory

        Generic implementation using psutil
        """
        ...
    


class ColorFormatter(logging.Formatter):
    def __init__(self, use_color=..., log_name=..., log_pid=...) -> None:
        ...
    
    def format(self, record): # -> str | Any:
        ...
    


class ProgressHandler(logging.Handler):
    def __init__(self) -> None:
        ...
    
    def emit(self, record): # -> None:
        ...
    


class NoProgressLog(logging.Filter):
    def filter(self, record): # -> bool:
        ...
    


class OnlyProgressLog(logging.Filter):
    def filter(self, record): # -> bool:
        ...
    


def log_progress(lgrcall, pid, *args, **kwargs): # -> None:
    """Helper to emit a log message on the progress of some process

    Note: Whereas this helper reports on interim progress and is to be used
    programmatically, :class:`~datalad.ui.progressbars.LogProgressBar` replaces
    a progress bar with a single log message upon completion and can be chosen
    by the user (config 'datalad.ui.progressbar' set to 'log').

    Parameters
    ----------
    lgrcall : callable
      Something like lgr.debug or lgr.info
    pid : str
      Some kind of ID for the process the progress is reported on.
    *args : str
      Log message, and potential arguments
    total : int
      Max progress quantity of the process.
    label : str
      Process description. Should be very brief, goes in front of progress bar
      on the same line.
    unit : str
      Progress report unit. Should be very brief, goes after the progress bar
      on the same line.
    update : int
      To which quantity to advance the progress.
    increment : bool
      If set, `update` is interpreted as an incremental value, not absolute.
    """
    ...

@optional_args
def with_result_progress(fn, label=..., unit=...): # -> (items: Unknown, **kwargs: Unknown) -> list[Unknown]:
    """Wrap a progress bar, with status counts, around a function.

    Parameters
    ----------
    fn : generator function
        This function should accept a collection of items as a
        positional argument and any number of keyword arguments.  After
        processing each item in the collection, it should yield a status
        dict.
    label, unit : str
        Passed to log.log_progress.

    Returns
    -------
    A variant of `fn` that shows a progress bar.  Note that the wrapped
    function is not a generator function; the status dicts will be
    returned as a list.
    """
    ...

class LoggerHelper:
    """Helper to establish and control a Logger"""
    def __init__(self, name=..., logtarget=...) -> None:
        """

        Parameters
        ----------
        name :
        logtarget : string, optional
          If we want to use our logger for other log targets, while having
          a uniform control over them
        """
        ...
    
    def set_level(self, level=..., default=...): # -> None:
        """Helper to set loglevel for an arbitrary logger

        By default operates for 'datalad'.
        TODO: deduce name from upper module name so it could be reused without changes
        """
        ...
    
    def get_initialized_logger(self, logtarget=...): # -> Logger:
        """Initialize and return the logger

        Parameters
        ----------
        target: string, optional
          Which log target to request logger for
        logtarget: { 'stdout', 'stderr', str }, optional
          Where to direct the logs.  stdout and stderr stand for standard streams.
          Any other string is considered a filename.  Multiple entries could be
          specified comma-separated

        Returns
        -------
        logging.Logger
        """
        ...
    


lgr = ...

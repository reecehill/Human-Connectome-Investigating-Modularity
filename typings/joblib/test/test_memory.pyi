"""
This type stub file was generated by pyright.
"""

import pytest
from joblib._store_backends import StoreBackendBase
from joblib.test.common import with_multiprocessing, with_numpy
from joblib.testing import parametrize

"""
Test the memory module.
"""
def f(x, y=...):
    """ A module-level function for testing purposes.
    """
    ...

def check_identity_lazy(func, accumulator, location): # -> None:
    """ Given a function and an accumulator (a list that grows every
        time the function is called), check that the function can be
        decorated by memory to be a lazy identity.
    """
    ...

def corrupt_single_cache_item(memory): # -> None:
    ...

def monkeypatch_cached_func_warn(func, monkeypatch_fixture): # -> list[Unknown]:
    ...

def test_memory_integration(tmpdir): # -> None:
    """ Simple test of memory lazy evaluation.
    """
    ...

@parametrize("call_before_reducing", [True, False])
def test_parallel_call_cached_function_defined_in_jupyter(tmpdir, call_before_reducing): # -> None:
    ...

def test_no_memory(): # -> None:
    """ Test memory with location=None: no memoize """
    ...

def test_memory_kwarg(tmpdir): # -> None:
    " Test memory with a function with keyword arguments."
    ...

def test_memory_lambda(tmpdir): # -> None:
    " Test memory with a function with a lambda."
    ...

def test_memory_name_collision(tmpdir): # -> None:
    " Check that name collisions with functions will raise warnings"
    ...

def test_memory_warning_lambda_collisions(tmpdir): # -> None:
    ...

def test_memory_warning_collision_detection(tmpdir): # -> None:
    ...

def test_memory_partial(tmpdir): # -> None:
    " Test memory with functools.partial."
    ...

def test_memory_eval(tmpdir): # -> None:
    " Smoke test memory with a function with a function defined in an eval."
    ...

def count_and_append(x=...): # -> int:
    """ A function with a side effect in its arguments.

        Return the length of its argument and append one element.
    """
    ...

def test_argument_change(tmpdir): # -> None:
    """ Check that if a function has a side effect in its arguments, it
        should use the hash of changing arguments.
    """
    ...

@with_numpy
@parametrize('mmap_mode', [None, 'r'])
def test_memory_numpy(tmpdir, mmap_mode): # -> None:
    " Test memory with a function with numpy arrays."
    ...

@with_numpy
def test_memory_numpy_check_mmap_mode(tmpdir, monkeypatch): # -> None:
    """Check that mmap_mode is respected even at the first call"""
    ...

def test_memory_exception(tmpdir): # -> None:
    """ Smoketest the exception handling of Memory.
    """
    class MyException(Exception):
        ...
    
    

def test_memory_ignore(tmpdir): # -> None:
    " Test the ignore feature of memory "
    ...

def test_memory_ignore_decorated(tmpdir): # -> None:
    " Test the ignore feature of memory on a decorated function "
    ...

def test_memory_args_as_kwargs(tmpdir): # -> None:
    """Non-regression test against 0.12.0 changes.

    https://github.com/joblib/joblib/pull/751
    """
    ...

@parametrize('ignore, verbose, mmap_mode', [(['x'], 100, 'r'), ([], 10, None)])
def test_partial_decoration(tmpdir, ignore, verbose, mmap_mode): # -> None:
    "Check cache may be called with kwargs before decorating"
    ...

def test_func_dir(tmpdir): # -> None:
    ...

def test_persistence(tmpdir): # -> None:
    ...

def test_check_call_in_cache(tmpdir): # -> None:
    ...

def test_call_and_shelve(tmpdir): # -> None:
    ...

def test_call_and_shelve_argument_hash(tmpdir): # -> None:
    ...

def test_call_and_shelve_lazily_load_stored_result(tmpdir): # -> None:
    """Check call_and_shelve only load stored data if needed."""
    ...

def test_memorized_pickling(tmpdir): # -> None:
    ...

def test_memorized_repr(tmpdir): # -> None:
    ...

def test_memory_file_modification(capsys, tmpdir, monkeypatch): # -> None:
    ...

def test_memory_in_memory_function_code_change(tmpdir): # -> None:
    ...

def test_clear_memory_with_none_location(): # -> None:
    ...

def func_with_kwonly_args(a, b, *, kw1=..., kw2=...): # -> tuple[Unknown, Unknown, str, str]:
    ...

def func_with_signature(a: int, b: float) -> float:
    ...

def test_memory_func_with_kwonly_args(tmpdir): # -> None:
    ...

def test_memory_func_with_signature(tmpdir): # -> None:
    ...

def test__get_items(tmpdir): # -> None:
    ...

def test__get_items_to_delete(tmpdir): # -> None:
    ...

def test_memory_reduce_size(tmpdir): # -> None:
    ...

def test_memory_clear(tmpdir): # -> None:
    ...

def fast_func_with_complex_output(): # -> list[str]:
    ...

def fast_func_with_conditional_complex_output(complex_output=...): # -> dict[str, int] | Literal['simple output']:
    ...

@with_multiprocessing
def test_cached_function_race_condition_when_persisting_output(tmpdir, capfd): # -> None:
    ...

@with_multiprocessing
def test_cached_function_race_condition_when_persisting_output_2(tmpdir, capfd): # -> None:
    ...

def test_memory_recomputes_after_an_error_while_loading_results(tmpdir, monkeypatch): # -> None:
    ...

class IncompleteStoreBackend(StoreBackendBase):
    """This backend cannot be instantiated and should raise a TypeError."""
    ...


class DummyStoreBackend(StoreBackendBase):
    """A dummy store backend that does nothing."""
    def create_location(self, location): # -> None:
        """Create location on store."""
        ...
    
    def exists(self, obj): # -> Literal[False]:
        """Check if an object exists in the store"""
        ...
    
    def clear_location(self, obj): # -> None:
        """Clear object on store"""
        ...
    
    def get_items(self): # -> list[Unknown]:
        """Returns the whole list of items available in cache."""
        ...
    
    def configure(self, location, *args, **kwargs): # -> None:
        """Configure the store"""
        ...
    


@parametrize("invalid_prefix", [None, dict(), list()])
def test_register_invalid_store_backends_key(invalid_prefix): # -> None:
    ...

def test_register_invalid_store_backends_object(): # -> None:
    ...

def test_memory_default_store_backend(): # -> None:
    ...

def test_warning_on_unknown_location_type(): # -> None:
    class NonSupportedLocationClass:
        ...
    
    

def test_instanciate_incomplete_store_backend(): # -> None:
    ...

def test_dummy_store_backend(): # -> None:
    ...

def test_instanciate_store_backend_with_pathlib_path(): # -> None:
    ...

def test_filesystem_store_backend_repr(tmpdir): # -> None:
    ...

def test_memory_objects_repr(tmpdir): # -> None:
    ...

def test_memorized_result_pickle(tmpdir): # -> None:
    ...

def compare(left, right, ignored_attrs=...): # -> None:
    ...

@pytest.mark.parametrize('memory_kwargs', [{ 'compress': 3,'verbose': 2 }, { 'mmap_mode': 'r','verbose': 5,'bytes_limit': 1000000,'backend_options': { 'parameter': 'unused' } }])
def test_memory_pickle_dump_load(tmpdir, memory_kwargs): # -> None:
    ...


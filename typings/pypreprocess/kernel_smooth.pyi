"""
This type stub file was generated by pyright.
"""

import numpy as np

"""
:Module: kernel_smooth
:Synopsis: assorted utilities for smoothing images (to absorb noise before
computing a gradient, etc.). A good starting point for understanding this code
is the smooth_image(..) wrapper function
:Author: DOHMATOB Elvis Dopgima, adapted from nipy source code. Credits
to nipy dev.

"""
EPS = np.finfo(float).eps
def fwhm2sigma(fwhm): # -> Any:
    """Convert a FWHM value to sigma in a Gaussian kernel.

    Parameters
    ----------
    fwhm: array-like
       FWHM value or values

    Returns
    -------
    sigma: array or float
       sigma values corresponding to `fwhm` values

    Examples
    --------
    >>> sigma = fwhm2sigma(6)
    >>> sigmae = fwhm2sigma([6, 7, 8])
    >>> sigma == sigmae[0]
    True

    """
    ...

def sigma2fwhm(sigma): # -> Any:
    """Convert a sigma in a Gaussian kernel to a FWHM value.

    Parameters
    ----------
    sigma: array-like
       sigma value or values

    Returns
    -------
    fwhm: array or float
       fwhm values corresponding to `sigma` values

    Examples
    --------
    >>> fwhm = sigma2fwhm(3)
    >>> fwhms = sigma2fwhm([3, 4, 5])
    >>> fwhm == fwhms[0]
    True

    """
    ...

class LinearFilter:
    """A class to implement some FFT smoothers for Image objects.
    By default, this does a Gaussian kernel smooth. More choices
    would be better.

    """
    def __init__(self, affine, shape, fwhm=..., scale=..., location=..., cov=..., normalization=...) -> None:
        """Default constructor.

        Parameters
        ----------
        affine: 2D array of shape (4, 4)
        shape: sequence
        fwhm: float, optional
           fwhm for Gaussian kernel, default is 6.0
        scale: float, optional
           scaling to apply to data after smooth, default 1.0
        location: float
           offset to apply to data after smooth and scaling, default 0
        cov: None or array, optional
           Covariance matrix
        normalization: string

        """
        ...
    
    def __call__(self, X, axis=...): # -> Any:
        """Compute kernel from points

        Parameters
        ----------
        X: array
           array of points
        axis: int, optional
           axis containing coordinates.  Default -1

        """
        ...
    
    def smooth(self, in_data, clean=..., is_fft=...):
        """Apply smoothing to `in_data`

        Parameters
        ----------
        in_data: array_like
           The array to be smoothed. should be same shape as the
           shape provided during instantiation of this object
        clean: bool, optional
           Should we call ``nan_to_num`` on the data before smoothing?
        is_fft: bool, optional
           Has the data already been fft'd?

        Returns
        -------
        _out: array of same shape as input nin_data
           smoothed in_data

        Notes
        -----
        XXX: is the manual garbage collection --via calls to gc.collect()--
        actually necessary ? Is it dangerous ?

        """
        ...
    


def smooth_image(img, fwhm, **kwargs): # -> list[Unknown] | FileBasedImage | Nifti1Image:
    """Function wrapper LinearFilter class. Spatially smoothens img with
    kernel of size fwhm.

    Parameters
    ----------
    img: ``ni.Nifti1Image``
        image to be smoothen
    fwhm: 1D array like of size as big as there are spatial dimensions
    in the image
        FWHM of smoothing kernel
    **kwargs: dict-like
        key-word arguments passed to LinearFilter constructor.

    Returns
    -------
    Smoothened image, same type and size as the input img.

    """
    ...

def centered_smoothing_kernel(fwhm, x):
    """
    Creates a gaussian kernel centered at x, and with given fwhm.

    """
    ...


"""
This type stub file was generated by pyright.
"""

import plotly.graph_objects as go
from cdlib import LifeCycle

__all__ = ["plot_flow", "plot_event_radar", "plot_event_radars", "typicality_distribution"]
def plot_flow(lc: LifeCycle, node_focus: str = ..., slice: tuple = ...) -> go.Figure:
    """
    Plot the flow of a lifecycle

    :param lc: the lifecycle object
    :param node_focus: plot only the flows involving this group. Defaults to None.
    :param slice: plot only a slice of the lifecycle. Defaults to all.
    :return: a plotly figure

    :Example:

    >>> from cdlib import TemporalClustering, LifeCycle
    >>> from cdlib import algorithms
    >>> from cdlib.viz import plot_flow
    >>> from networkx.generators.community import LFR_benchmark_graph
    >>> tc = TemporalClustering()
    >>> for t in range(0, 10):
    >>>     g = LFR_benchmark_graph(
    >>>         n=250,
    >>>         tau1=3,
    >>>         tau2=1.5,
    >>>         mu=0.1,
    >>>         average_degree=5,
    >>>         min_community=20,
    >>>         seed=10,
    >>>     )
    >>>     coms = algorithms.louvain(g)  # here any CDlib algorithm can be applied
    >>>     tc.add_clustering(coms, t)
    >>> events = LifeCycle(tc)
    >>> events.compute_events("facets")
    >>> fig = plot_flow(events)
    >>> fig.show()
    """
    ...

def plot_event_radar(lc: LifeCycle, set_name: str, direction: str, min_branch_size: int = ..., rescale: bool = ..., color: str = ..., ax: object = ...): # -> Axes | object:
    """
    Plot the radar of event weights for a given event set.

    :param lc: the lifecycle object
    :param set_name: the event set name, e.g. "0_2"
    :param direction: the direction of the event set, either "+" or "-"
    :param min_branch_size: the minimum size of a branch to be considered, defaults to 1
    :param rescale: rescale the radar to the maximum value, defaults to True
    :param color: the color of the radar, defaults to "green"
    :param ax: the matplotlib axis, defaults to None
    :return: the matplotlib axis

    :Example:

    >>> from cdlib import TemporalClustering, LifeCycle
    >>> from cdlib import algorithms
    >>> from cdlib.viz import plot_flow
    >>> from networkx.generators.community import LFR_benchmark_graph
    >>> tc = TemporalClustering()
    >>> for t in range(0, 10):
    >>>     g = LFR_benchmark_graph(
    >>>         n=250,
    >>>         tau1=3,
    >>>         tau2=1.5,
    >>>         mu=0.1,
    >>>         average_degree=5,
    >>>         min_community=20,
    >>>         seed=10,
    >>>     )
    >>>     coms = algorithms.louvain(g)  # here any CDlib algorithm can be applied
    >>>     tc.add_clustering(coms, t)
    >>> events = LifeCycle(tc)
    >>> events.compute_events("facets")
    >>> fig = plot_event_radar(events, "0_2", "+")
    >>> fig.show()

    """
    ...

def plot_event_radars(lc: LifeCycle, set_name: str, min_branch_size: int = ..., colors: object = ...): # -> None:
    """
    Plot the radar of event weights for a given event set in both directions.

    :param lc: the lifecycle object
    :param set_name: the event set name, e.g. "0_2"
    :param min_branch_size: the minimum size of a branch to be considered, defaults to 1
    :param colors: the colors of the radar, defaults to None
    :return: None

    :Example:

    >>> from cdlib import TemporalClustering, LifeCycle
    >>> from cdlib import algorithms
    >>> from cdlib.viz import plot_flow
    >>> import matplotlib.pyplot as plt
    >>> from networkx.generators.community import LFR_benchmark_graph
    >>> tc = TemporalClustering()
    >>> for t in range(0, 10):
    >>>     g = LFR_benchmark_graph(
    >>>         n=250,
    >>>         tau1=3,
    >>>         tau2=1.5,
    >>>         mu=0.1,
    >>>         average_degree=5,
    >>>         min_community=20,
    >>>         seed=10,
    >>>     )
    >>>     coms = algorithms.louvain(g)  # here any CDlib algorithm can be applied
    >>>     tc.add_clustering(coms, t)
    >>> events = LifeCycle(tc)
    >>> events.compute_events("facets")
    >>> plot_event_radars(events, "0_2")
    >>> plt.show()


    """
    ...

def typicality_distribution(lc: LifeCycle, direction: str, width: int = ..., height: int = ..., showlegend: bool = ...): # -> Figure:
    """
    Plot the distribution of typicality of events in a given direction.

    :param lc: the lifecycle object
    :param direction: the direction of the events, either "+" or "-"
    :param width: the width of the figure, defaults to 800
    :param height: the height of the figure, defaults to 500
    :param showlegend: show the legend, defaults to True
    :return: a matplotlib figure

    :Example:

    >>> from cdlib import TemporalClustering, LifeCycle
    >>> from cdlib import algorithms
    >>> from cdlib.viz import plot_flow
    >>> from networkx.generators.community import LFR_benchmark_graph
    >>> tc = TemporalClustering()
    >>> for t in range(0, 10):
    >>>     g = LFR_benchmark_graph(
    >>>         n=250,
    >>>         tau1=3,
    >>>         tau2=1.5,
    >>>         mu=0.1,
    >>>         average_degree=5,
    >>>         min_community=20,
    >>>         seed=10,
    >>>     )
    >>>     coms = algorithms.louvain(g)  # here any CDlib algorithm can be applied
    >>>     tc.add_clustering(coms, t)
    >>> events = LifeCycle(tc)
    >>> events.compute_events("facets")
    >>> fig = typicality_distribution(events, "+")
    >>> fig.show()

    """
    ...


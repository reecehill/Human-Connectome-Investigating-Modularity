"""
This type stub file was generated by pyright.
"""

"""Variety of helpers to deal with AWS S3

Use as a script to generate test buckets via e.g.

    python -m datalad.support.s3 generate test1_dirs
"""
__docformat__ = ...
lgr = ...
S3_ADMIN_CREDENTIAL = ...
S3_TEST_CREDENTIAL = ...
def get_bucket(conn, bucket_name): # -> None:
    """A helper to get a bucket

    Parameters
    ----------
    bucket_name: str
        Name of the bucket to connect to
    """
    ...

class VersionedFilesPool:
    """Just a helper which would help to create versioned files in the bucket"""
    def __init__(self, bucket) -> None:
        ...
    
    @property
    def bucket(self): # -> Unknown:
        ...
    
    def __call__(self, filename, prefix=..., load=...): # -> Key:
        ...
    
    def reset_version(self, filename): # -> None:
        ...
    


def get_key_url(e, schema=..., versioned=...): # -> str:
    """Generate an s3:// or http:// url given a key

    if versioned url is requested but version_id is None, no versionId suffix
    will be added
    """
    ...

def prune_and_delete_bucket(bucket): # -> None:
    """Deletes all the content and then deletes bucket

    Should be used with care -- no confirmation requested
    """
    ...

def set_bucket_public_access_policy(bucket): # -> None:
    ...

def gen_test_bucket(bucket_name):
    ...

def gen_bucket_test0_versioned():
    ...

def gen_bucket_test0_nonversioned():
    ...

def gen_bucket_test1_dirs(): # -> None:
    ...

def gen_bucket_test2_obscurenames_versioned(): # -> None:
    ...

def gen_bucket_test1_manydirs(): # -> None:
    ...

def add_version_to_url(url, version, replace=...): # -> AnyStr@_ParseResultBase:
    """Add a version ID to `url`.

    Parameters
    ----------
    url : datalad.support.network.URL
        A URL.
    version : str
        The value of 'versionId='.
    replace : boolean, optional
        If a versionID is already present in `url`, replace it.

    Returns
    -------
    A versioned URL (str)
    """
    ...

def get_versioned_url(url, guarantee_versioned=..., return_all=..., verify=..., s3conn=..., update=...): # -> list[AnyStr@_ParseResultBase] | AnyStr@_ParseResultBase:
    """Given a url return a versioned URL

    Originally targeting AWS S3 buckets with versioning enabled

    Parameters
    ----------
    url : string
    guarantee_versioned : bool, optional
      Would fail if buckets is determined to have no versioning enabled.
      It will not fail if we fail to determine if bucket is versioned or
      not
    return_all: bool, optional
      If True, would return a list with URLs for all the versions of this
      file, sorted chronologically with latest first (when possible, e.g.
      for S3).  Remove markers get ignored
    verify: bool, optional
      Verify that URL is accessible. As discovered some versioned keys might
      be denied access to
    update : bool, optional
      If the URL already contains a version ID, update it to the latest version
      ID.  This option has no effect if return_all is true.

    Returns
    -------
    string or list of string
    """
    ...

if __name__ == '__main__':
    ...

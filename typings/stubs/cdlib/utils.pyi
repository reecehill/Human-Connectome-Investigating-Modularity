"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager

@contextmanager
def suppress_stdout(): # -> Generator[None, Any, None]:
    """
    Suppress the standard out messages.
    """
    ...

def convert_graph_formats(graph: object, desired_format: object, directed: bool = ...) -> object:
    """Converts from/to networkx/igraph


    :param graph: original graph object
    :param desired_format: desired final type. Either nx.Graph or ig.Graph
    :param directed: boolean, default **False**
    :return: the converted graph
    :raises TypeError: if input graph is neither an instance of nx.Graph nor ig.Graph
    """
    ...

def nx_node_integer_mapping(graph: object) -> tuple:
    """Maps node labels from strings to integers.

    :param graph: networkx graph
    :return: if the node labels are string: networkx graph, dictionary <numeric_id, original_node_label>, false otherwise
    """
    ...

def remap_node_communities(communities: object, node_map: dict) -> list:
    """Apply a map to the obtained communities to retrive the original node labels

    :param communities: NodeClustering object
    :param node_map: dictionary <numeric_id, node_label>
    :return: remapped communities
    """
    ...

def affiliations2nodesets(affiliations: dict) -> dict:
    """
    Transform community format to nodesets

    Representation expected in input: dictionary, key=node, value=list/set of snapshot_affiliations ID
    Representation in output: bidict, key=community ID , value=set of nodes

    :param affiliations:bidict, key=community ID , value=set of nodes
    :return: dict, key=community ID , value=set of nodes
    """
    ...


"""
This type stub file was generated by pyright.
"""

from ..base import BaseInterfaceInputSpec, DynamicTraitedSpec
from ..io import IOBase

"""
# changing to temporary directories
    >>> tmp = getfixture('tmpdir')
    >>> old = tmp.chdir()
"""
iflogger = ...
class FunctionInputSpec(DynamicTraitedSpec, BaseInterfaceInputSpec):
    function_str = ...


class Function(IOBase):
    """Runs arbitrary function as an interface

    Examples
    --------

    >>> func = 'def func(arg1, arg2=5): return arg1 + arg2'
    >>> fi = Function(input_names=['arg1', 'arg2'], output_names=['out'])
    >>> fi.inputs.function_str = func
    >>> res = fi.run(arg1=1)
    >>> res.outputs.out
    6

    """
    input_spec = FunctionInputSpec
    output_spec = DynamicTraitedSpec
    def __init__(self, input_names=..., output_names=..., function=..., imports=..., **inputs) -> None:
        """

        Parameters
        ----------

        input_names: single str or list or None
            names corresponding to function inputs
            if ``None``, derive input names from function argument names
        output_names: single str or list
            names corresponding to function outputs (default: 'out').
            if list of length > 1, has to match the number of outputs
        function : callable
            callable python object. must be able to execute in an
            isolated namespace (possibly in concert with the ``imports``
            parameter)
        imports : list of strings
            list of import statements that allow the function to execute
            in an otherwise empty namespace
        """
        ...
    



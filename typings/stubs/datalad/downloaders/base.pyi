"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod
from ..utils import auto_repr

"""Provide access to stuff (html, data files) via HTTP and HTTPS

"""
__docformat__ = ...
lgr = ...
@auto_repr
class DownloaderSession:
    """Base class to encapsulate information and possibly a session to download the content

    The idea is that corresponding downloader provides all necessary
    information and if necessary some kind of session to facilitate
    .download method
    """
    def __init__(self, size=..., filename=..., url=..., headers=...) -> None:
        ...
    
    def download(self, f=..., pbar=..., size=...):
        ...
    


@auto_repr
class BaseDownloader(metaclass=ABCMeta):
    """Base class for the downloaders"""
    _DEFAULT_AUTHENTICATOR = ...
    _DOWNLOAD_SIZE_TO_VERIFY_AUTH = ...
    def __init__(self, credential=..., authenticator=...) -> None:
        """

        Parameters
        ----------
        credential: Credential, optional
          Provides necessary credential fields to be used by authenticator
        authenticator: Authenticator, optional
          Authenticator to use for authentication.
        """
        ...
    
    def access(self, method, url, allow_old_session=..., **kwargs):
        """Generic decorator to manage access to the URL via some method

        Parameters
        ----------
        method : callable
          A callable, usually a method of the same class, which we decorate
          with access handling, and pass url as the first argument
        url : string
          URL to access
        *args, **kwargs
          Passed into the method call

        Returns
        -------
        None or bytes
        """
        ...
    
    @abstractmethod
    def get_downloader_session(self, url):
        """

        Parameters
        ----------
        url : str

        Returns
        -------
        downloader_into_fp: callable
           Which takes two parameters: file, pbar
        target_size: int or None (if unknown)
        url: str
           Possibly redirected url
        url_filename: str or None
           Filename as decided from the (redirected) url
        headers : dict or None
        """
        ...
    
    def download(self, url, path=..., **kwargs):
        """Fetch content as pointed by the URL optionally into a file

        Parameters
        ----------
        url : string
          URL to access
        path : string, optional
          Filename or existing directory to store downloaded content under.
          If not provided -- deduced from the url

        Returns
        -------
        string
          file path
        """
        ...
    
    @property
    def cache(self): # -> _Database:
        ...
    
    def fetch(self, url, **kwargs):
        """Fetch and return content (not decoded) as pointed by the URL

        Parameters
        ----------
        url : string
          URL to access

        Returns
        -------
        bytes
          content
        """
        ...
    
    def get_status(self, url, old_status=..., **kwargs):
        """Return status of the url as a dict, None if N/A

        Parameters
        ----------
        url : string
          URL to access
        old_status : FileStatus, optional
          Previous status record.  If provided, might serve as a shortcut
          to assess if status has changed, and if not -- return the same
          record

        Returns
        -------
        dict
          dict-like beast depicting the status of the URL if accessible.
          Returned value should be sufficient to tell if the URL content
          has changed by comparing to previously obtained value.
          If URL is not reachable, None would be returned
        """
        ...
    
    @classmethod
    @abstractmethod
    def get_status_from_headers(cls, headers):
        ...
    
    def get_target_url(self, url):
        """Return url after possible redirections

        Parameters
        ----------
        url : string
          URL to access

        Returns
        -------
        str
        """
        ...
    


class Authenticator:
    """Abstract common class for different types of authentication

    Derived classes should get parameterized with options from the config files
    from "provider:" sections
    """
    requires_authentication = ...
    allows_anonymous = ...
    DEFAULT_CREDENTIAL_TYPE = ...
    def authenticate(self, *args, **kwargs): # -> None:
        """Derived classes will provide specific implementation
        """
        ...
    


class NotImplementedAuthenticator(Authenticator):
    ...


class NoneAuthenticator(Authenticator):
    """Whenever no authentication is necessary and that is stated explicitly"""
    requires_authentication = ...



"""
This type stub file was generated by pyright.
"""

PYPREPROCESS_URL = ...
DARTEL_URL = ...
HTML_TEMPLATE_ROOT_PATH = ...
SPM_DIR = ...
def embed_in_HTML(html_template_file, components_to_embed): # -> str:
    """ 
    Embeds components in a given HTML template.

    Parameters
    ----------
    html_template_file: .html template file 
        containing variables which would be sustituted with given components

    components_to_embed: string
        values to be substituted into the given HTML file

    """
    ...

def initialize_report(output_dir, subject_name=..., log=..., filename=..., prepreproc_undergone=..., dcm2nii=..., deleteorient=..., fwhm=..., anat_fwhm=..., slice_timing=..., realign=..., coregister=..., coreg_func_to_anat=..., segment=..., normalize=..., dartel=..., command_line=..., has_func=...): # -> tuple[str, str] | tuple[str, None]:
    """ 
    Initializes an HTML report containing the description of the 
    preprocessing steps to be implemented and the processing start time
    to be populated with visualisations for each steps.

    Parameters
    ----------
    output_dir: string
        directory to save the initialized HTML report

    log: bool, optional (default True)
        whether to initialize a log report or not

    """
    ...

def add_component(to_add_report, html_report_path, to_add_log=..., html_log_path=...): # -> None:
    """ 
    Appends components to the end of a given HTML report file.

    Parameters
    ----------
    to_add_report: string
        a component to be appended to a given report HTML file.
    
    html_report_path: stringlog=True
        location of the HTML report file to which the component would be
        appended.

    to_add_log: string, optional (default None)
        a log component to be added to the log report HTML file, only
        specified if a log report has been initialized.

    html_log_path: string, optional (default None)
        location of the HTML log report file to which the log component 
        would be appended, only specified if a log report has been 
        initialized.

    """
    ...

def finalize_report(html_report_path, html_log_path=...): # -> None:
    """ 
    Finalizes the report files created. Involves - adding the processing
    end time, disabling automatic page refreshing, adding closing tags at
    the bottom of the html reports and printing out report path.

    Parameters
    ----------
    html_report_path: string
        location of the HTML report file to be finalized.

    html_log_path: string, optional (default None)
        location of the HTML log report file to be finalized,
        only specified if a log report has been initialized.

    """
    ...

def generate_realignment_report(subject_data, estimated_motion, output_dir, tooltip=..., log=..., report_path=...): # -> tuple[str, str | None]:
    """ 
    Creates visualization associated with realignment 
    and returns it as an SVG url. 

    Parameters
    ----------
    subject_data: `SubjectData` instance
       object that encapsulates the date for the subject (should have fields
       like func, anat, output_dir, etc.)

    estimated_motion: string
        location of the file containing estimated motion parameters

    output_dir: string
        directory containing all the output files
    """
    ...

def generate_registration_report(target, source, output_dir, for_substitution, report_path=...): # -> LiteralString:
    """ 
    Plots target's outline on source image and returns them 
    as SVG url embedded in HTML.

    Parameters
    ----------
    target: string
        location of the .nii file for the target image

    source: string
        location of the .nii file for the target image

    output_dir: string
        directory containing all the output files

    for_substitution: dict
        a dictionary containing all the components concerning registration
        to be embedded in the report HTML files
    
    report_path: string, optional (default None)
        path to the report HTML file

    """
    ...

def generate_corregistration_report(subject_data, output_dir, coreg_func_to_anat=..., log=..., tooltip=..., report_path=...): # -> tuple[LiteralString, str | None] | None:
    """ 
    Creates plots associated with corregistration 
    and returns them as SVG url embedded in HTML.
    Calls generate_registration_plot. 
    
    Parameters
    ----------
     subject_data: `SubjectData` instance
       object that encapsulates the date for the subject (should have fields
       like func, anat, output_dir, etc.)

    output_dir: string
        directory containing all the output files
    
    report_path: string, optional (default None)
        path to the report HTML file

    """
    ...

def generate_segmentation_report(subject_data, output_dir, subject_gm_file=..., subject_wm_file=..., subject_csf_file=..., comment=..., only_native=..., tooltip=..., log=..., report_path=...): # -> tuple[LiteralString, str | None] | LiteralString | None:
    """ 
    Creates plots associated with segmentation 
    and returns them as SVG url embedded in HTML. 
    
    Parameters
    ----------
     subject_data: `SubjectData` instance
       object that encapsulates the date for the subject (should have fields
       like func, anat, output_dir, etc.)

    output_dir: string
        directory containing all the output files
    
    report_path: string, optional (default None)
        path to the report HTML file

    """
    ...

def generate_normalization_report(subject_data, output_dir, tooltip=..., log=..., report_path=...): # -> tuple[LiteralString, LiteralString]:
    """ 
    Creates plots associated with normalization and returns them as SVG url 
    embedded in HTML. Calls generate_segmentation_report and 
    generate_registration_report. 
    
    Parameters
    ----------
     subject_data: `SubjectData` instance
       object that encapsulates the date for the subject (should have fields
       like func, anat, output_dir, etc.)

    output_dir: string
        directory containing all the output files
    
    report_path: string, optional (default None)
        path to the report HTML file

    """
    ...

def generate_tsdiffana_report(image_files, sessions, subject_id, output_dir, tooltips=...): # -> LiteralString:
    """ 
    Creates plots associated with tsdiffana and returns them as SVG 
    url embedded in HTML. 
    
    Parameters
    ----------
    image_files: string
        location to the functional images

    output_dir: string
        directory containing all the output files
    
    """
    ...

def generate_preproc_steps_docstring(prepreproc_undergone=..., tools_used=..., dcm2nii=..., deleteorient=..., fwhm=..., anat_fwhm=..., bet=..., slice_timing=..., realign=..., coregister=..., coreg_func_to_anat=..., segment=..., normalize=..., func_write_voxel_sizes=..., anat_write_voxel_sizes=..., dartel=..., additional_preproc_undergone=..., command_line=..., details_filename=..., has_func=...):
    """
    Generates a brief description of the pipeline used in the preprocessing.

    Parameters
    ----------
    command_line: string, optional (None)
        exact command-line typed at the terminal to run the underlying
        preprocessing (useful if someone were to reproduce your results)
    """
    ...

def get_log_text(nipype_output_files): # -> LiteralString:
    """
    Creates properly formatted HTML log file containing the logs 
    corresponding to each of preprocessing pipeline functions calls.
    Calls get_nipype_report_filename and get_nipype_report for formatting 
    the log files.

    nipype_output_files: string
        location of the nipype log files
    """
    ...

def get_nipype_report_filename(output_files_or_dir): # -> str:
    ...

def get_nipype_report(nipype_report_filename): # -> LiteralString:
    ...

def nipype2htmlreport(nipype_report_filename): # -> str:
    """
    Converts a nipype.caching report (.rst) to html.

    """
    ...

def lines2breaks(lines, delimiter=..., number_lines=...): # -> str:
    """
    Converts line breaks to HTML breaks, adding `pre` tags as necessary.

    Parameters
    ----------
    lines: string delimited by delimiter, or else list of strings
        lines to format into HTML format

    delimiter: string (default '\n')
        new-line delimiter, can be (escape) characters like '\n', '\r',
        '\r\n', '\t', etc.

    number_lines: boolean (default False)
        if false, then output will be line-numbered

    Returns
    -------
    HTML-formatted string
    """
    ...

def pretty_time(): # -> LiteralString:
    """
    Returns currenct time in the format: hh:mm:ss ddd mmm yyyy.
    """
    ...


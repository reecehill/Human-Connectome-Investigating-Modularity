"""
This type stub file was generated by pyright.
"""

import atexit

"""
Created on 20 Apr 2010

logging options : INFO, DEBUG
hash_method : content, timestamp

@author: Chris Filo Gorgolewski
"""
CONFIG_DEPRECATIONS = ...
DEFAULT_CONFIG_TPL = ...
def mkdir_p(path): # -> None:
    ...

class NipypeConfig:
    """Base nipype config class"""
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @property
    def cwd(self): # -> str:
        """Cache current working directory ASAP"""
        ...
    
    def set_default_config(self): # -> None:
        """Read default settings template and set into config object"""
        ...
    
    def enable_debug_mode(self): # -> None:
        """Enables debug configuration"""
        ...
    
    def set_log_dir(self, log_dir): # -> None:
        """Sets logging directory

        This should be the first thing that is done before any nipype class
        with logging is imported.
        """
        ...
    
    def get(self, section, option, default=...): # -> str | None:
        """Get an option"""
        ...
    
    def set(self, section, option, value): # -> None:
        """Set new value on option"""
        ...
    
    def getboolean(self, section, option): # -> bool:
        """Get a boolean option from section"""
        ...
    
    def has_option(self, section, option): # -> bool:
        """Check if option exists in section"""
        ...
    
    def get_data(self, key): # -> Any | None:
        """Read options file"""
        ...
    
    def save_data(self, key, value): # -> None:
        """Store config file"""
        ...
    
    def update_config(self, config_dict): # -> None:
        """Extend internal dictionary with config_dict"""
        ...
    
    def update_matplotlib(self): # -> None:
        """Set backend on matplotlib from options"""
        ...
    
    def enable_provenance(self): # -> None:
        """Sets provenance storing on"""
        ...
    
    @property
    def resource_monitor(self): # -> bool | None:
        """Check if resource_monitor is available"""
        ...
    
    @resource_monitor.setter
    def resource_monitor(self, value): # -> None:
        ...
    
    def enable_resource_monitor(self): # -> None:
        """Sets the resource monitor on"""
        ...
    
    def disable_resource_monitor(self): # -> None:
        """Sets the resource monitor off"""
        ...
    
    def get_display(self):
        """Returns the first display available"""
        ...
    
    def stop_display(self): # -> None:
        """Closes the display if started"""
        ...
    


@atexit.register
def free_display(): # -> None:
    """Stop virtual display (if it is up)"""
    ...

